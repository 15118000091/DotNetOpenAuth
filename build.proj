<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildProjectDirectory)\tools\DotNetOpenAuth.automated.props"/>
	<Import Project="$(ProjectRoot)tools\Publish.targets"/>
	<Import Project="$(ProjectRoot)tools\Translation.targets"/>

	<ItemGroup>
		<ProjectsToClean Include="
										 $(SolutionPath);
										 projecttemplates\projecttemplates.proj;
										 vsi\vsi.proj;
										 vsix\vsix.proj;
										 samples\samples.proj;
										 doc\doc.proj;
										 "/>

		<DirectoriesToClean Include="
			                           $(ProjectRoot)bin;
			                           $(ProjectRoot)**\obj;
			                           $(DropsRoot);
			                           $(ProjectRoot)src\PrecompiledWeb;
			                           " />
		<FilesToClean Include="
		                     $(ProjectRoot)**\*~;
		                     $(ProjectRoot)**\*.log*;
		                     $(ProjectRoot)doc\$(ProductName).chm;
		                     " />
	</ItemGroup>

	<Target Name="BuildTests" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(SolutionPath)" Targets="DotNetOpenAuth_Test;DotNetOpenAuth_TestWeb" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="Build" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(SolutionPath)" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(SolutionPath)" Targets="Rebuild" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="ToolsLayout" DependsOnTargets="BuildUnifiedProduct">
		<PropertyGroup>
			<ToolsDirectoryNoSlash>$(DropsRoot)$(ProductName)-Tools-$(BuildVersion)</ToolsDirectoryNoSlash>
			<ToolsDirectory>$(ToolsDirectoryNoSlash)\</ToolsDirectory>
		</PropertyGroup>

		<ItemGroup>
			<ToolProjects Include="$(ProjectRoot)Samples\OpenIdOfflineProvider\OpenIdOfflineProvider.csproj" />
		</ItemGroup>

		<MSBuild Projects="@(ToolProjects)" BuildInParallel="$(BuildInParallel)" />

		<ItemGroup>
			<OfflineProvider Include="
											 $(OutputPath)**\*.dll;
											 $(OutputPath)OpenIdOfflineProvider.exe"
				 Exclude="
											 $(OutputPath)$(ProductName).*;
											 $(ILMergeOutputAssembly);
											 "/>
			<OfflineProviderTargets Include="
											 @(OfflineProvider->'$(ToolsDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<OfflineProvider Include="$(ILMergeOutputAssembly)" />
			<OfflineProviderTargets Include="$(ToolsDirectory)$(ProductName).dll" />

			<AllToolSources Include="@(OfflineProvider)" />
			<AllToolTargets Include="@(OfflineProviderTargets)" />
		</ItemGroup>

		<MakeDir Directories="@(ToolsDirectory)" />
		<Copy SourceFiles="@(AllToolSources)" DestinationFiles="@(AllToolTargets)" SkipUnchangedFiles="true" />

		<!-- remove files that shouldn't be in the directory (perhaps from a previous version). -->
		<Purge Directories="$(ToolsDirectory)" IntendedFiles="@(AllToolTargets)" />
	</Target>
	
	<Target Name="Tools" DependsOnTargets="ToolsLayout">
		<PropertyGroup>
			<ToolsZip>$(ToolsDirectoryNoSlash).zip</ToolsZip>
		</PropertyGroup>

		<Zip ZipFileName="$(ToolsZip)" 
				 Files="@(AllToolTargets)"
				 WorkingDirectory="$(ToolsDirectory)"
				 ZipLevel="$(ZipLevel)" />
	</Target>

	<Target Name="Test" DependsOnTargets="BuildTests"
	        Inputs="$(OutputPath)$(ProductName).Test.dll"
	        Outputs='$(OutputPath)Test-result.xml'>
		<PropertyGroup>
			<!-- Performance tests are only expected to pass in optimized builds. -->
			<NUnitExcludeCategories Condition=" '$(Configuration)' != 'Release' ">Performance</NUnitExcludeCategories>
		</PropertyGroup>
		<NUnit Assemblies="$(OutputPath)$(ProductName).Test.dll"
		       ToolPath="$(NUnitToolPath)"
		       OutputXmlFile="$(OutputPath)Test-result.xml"
		       ExcludeCategory="$(NUnitExcludeCategories)"/>
	</Target>

	<Target Name="DropLayout" DependsOnTargets="BuildUnifiedProduct;ReSignDelaySignedAssemblies">
		<!-- Note that we use an MSBuild task for these dependencies rather than individual DependsOnTargets entries
		     so that these builds can be executed in parallel. -->
		<MSBuild BuildInParallel="$(BuildInParallel)"
						 Projects="
						 samples\samples.proj;
						 vsi\vsi.proj;
						 vsix\vsix.proj;
						 doc\doc.proj;
						 " />
		<PropertyGroup>
			<DropBinDirectory>$(DropDirectory)Bin\</DropBinDirectory>
			<DropLibDirectory>$(DropDirectory)Lib\</DropLibDirectory>
			<DropProjectTemplatesDirectory>$(DropDirectory)Project Templates\</DropProjectTemplatesDirectory>
			<DropSamplesDirectory>$(DropDirectory)Samples\</DropSamplesDirectory>
			<DropSpecsDirectory>$(DropDirectory)Specs\</DropSpecsDirectory>
		</PropertyGroup>
		<ItemGroup>
			<DropDirectories Include="
						 $(DropDirectory);
						 $(DropBinDirectory);
						 $(DropLibDirectory);
						 $(DropProjectTemplatesDirectory);
						 $(DropSamplesDirectory);
						 $(DropSpecsDirectory);
										 " />

			<DropSourceFiles Include="
																$(ProjectRoot)Doc\$(ProductName).chm;
																$(ProjectRoot)Doc\*.htm*;
																$(ProjectRoot)LICENSE.txt;
																$(ProjectRoot)CONTRIB.txt;
																"
											 Exclude="$(ProjectRoot)Doc\README.*.html;" />
			<DropBinSourceFiles Include="
																$(ILMergeOutputAssemblyDirectory)$(ProductName).???;
																$(OutputPath)**\$(ProductName).resources.dll;
																$(OutputPath)$(ProductName).xml;
																$(OutputPath)$(ProductName).Contracts.???;
																$(ProjectRoot)Doc\README.Bin.html;
																$(ProjectRoot)src\$(ProductName)\Configuration\$(ProductName).xsd;
													" />
			<DropLibSourceFiles Include="
																$(ProjectRoot)Lib\log4net.*;
																" />
			<DropProjectTemplatesSourceFiles Include="$(ProjectTemplatesVsi)" />
			<DropVsixSourceFiles Include="$(ExtensionVsix)" />
			<DropSamplesSourceFiles Include="$(ProjectRoot)Samples\**" Exclude="
															$(ProjectRoot)**\obj\**;
															$(ProjectRoot)**\*.sln.cache;
															$(ProjectRoot)**\*.suo;
															$(ProjectRoot)**\*.user;
															$(ProjectRoot)**\*.gitignore;
															$(ProjectRoot)**\*.ldf;
															$(ProjectRoot)**\*.log*;
															$(ProjectRoot)**\*~;
															$(ProjectRoot)**\Debug\**;
															$(ProjectRoot)**\Settings.StyleCop;
															$(ProjectRoot)**\StyleCop.Cache;
															$(ProjectRoot)Samples\**\DotNetOpenAuth.???;
															$(ProjectRoot)Samples\**\log4net.???;
															$(ProjectRoot)Samples\**\PresentationCore.dll;
															$(ProjectRoot)Samples\**\System.Printing.dll;
															$(ProjectRoot)Samples\**\*.refresh_;
															$(ProjectRoot)Samples\Samples.proj;
															" />
			<!-- Some .refresh files are only applicable to drop builds, so we rename them from *.refresh_ -->
			<DropSamplesRefreshSourceFiles Include="$(ProjectRoot)Samples\**\*.refresh_" />
			<DropSpecsSourceFiles Include="$(ProjectRoot)Doc\specs\*.htm*" />

			<DropFiles Include="@(DropSourceFiles->'$(DropDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropBinFiles Include="@(DropBinSourceFiles->'$(DropBinDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropLibFiles Include="@(DropLibSourceFiles->'$(DropLibDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropProjectTemplatesFiles Include="@(DropProjectTemplatesSourceFiles->'$(DropProjectTemplatesDirectory)%(FileName)%(Extension)')" />
			<DropVsixFiles Include="@(DropVsixSourceFiles->'$(DropProjectTemplatesDirectory)%(FileName)%(Extension)')" />
			<DropSamplesFiles Include="@(DropSamplesSourceFiles->'$(DropSamplesDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropSamplesRefreshFiles Include="@(DropSamplesRefreshSourceFiles->'$(DropSamplesDirectory)%(RecursiveDir)%(FileName).refresh')"/>
			<DropSamplesToolsProjects Include="$(DropSamplesDirectory)OpenIdOfflineProvider\OpenIdOfflineProvider.csproj" />
			<DropSpecsFiles Include="@(DropSpecsSourceFiles->'$(DropSpecsDirectory)%(RecursiveDir)%(FileName)%(Extension)')"/>

			<AllDropSources Include="
										@(DropSourceFiles);
										@(DropBinSourceFiles);
										@(DropLibSourceFiles);
										@(DropProjectTemplatesSourceFiles);
										@(DropVsixSourceFiles);
										@(DropSamplesSourceFiles);
										@(DropSamplesRefreshSourceFiles);
										@(DropDocSourceFiles);
										@(DropSpecsSourceFiles);
										" />

			<AllDropTargets Include="
										@(DropFiles);
										@(DropBinFiles);
										@(DropLibFiles);
										@(DropProjectTemplatesFiles);
										@(DropVsixFiles);
										@(DropSamplesFiles);
										@(DropSamplesRefreshFiles);
										@(DropDocFiles);
										@(DropSpecsFiles)
										" />
		</ItemGroup>

		<!-- clean up any previous drop with the same name so we don't aggregate files. -->
		<MakeDir Directories="@(DropDirectories)" />
		<Copy SourceFiles="@(AllDropSources)" DestinationFiles="@(AllDropTargets)" SkipUnchangedFiles="true" />
		<Purge Directories="$(DropDirectory)" IntendedFiles="@(AllDropTargets)" />
		<!-- fix up the samples so that they will compile right out of the drop -->
		<ItemGroup>
			<SampleProjectTargets Include="$(DropSamplesDirectory)**\*.*proj" />
			<SampleSolutionTargets Include="$(DropSamplesDirectory)**\*.sln" />
		</ItemGroup>
		<FixupShippingToolSamples Projects="@(DropSamplesToolsProjects)"
		                          RemoveImportsStartingWith="%24(ProjectRoot)tools\"
		                          AddReferences="Microsoft.Contracts"/>
		<ChangeProjectReferenceToAssemblyReference Projects="@(SampleProjectTargets)"
		  ProjectReferences="..\..\src\$(ProductName)\$(ProductName).csproj" References="..\..\Bin\$(ProductName).dll" />
		<DowngradeProjects Projects="@(SampleProjectTargets);@(SampleSolutionTargets)" DowngradeMvc2ToMvc1="true" />
	</Target>

	<Target Name="Drop" DependsOnTargets="DropLayout">
		<PropertyGroup>
			<DropZip>$(DropDirectoryNoSlash).zip</DropZip>
		</PropertyGroup>
		<Zip Files="@(AllDropTargets)" ZipFileName="$(DropZip)" WorkingDirectory="$(DropsRoot)" ZipLevel="$(ZipLevel)" />
	</Target>

	<!-- Although Nightly includes publishing samples and docs, those targets are conditioned for
	     running only when the SampleWebRoot and DocWebRoot properties are set, respectively. -->
	<Target Name="Nightly" DependsOnTargets="Drop;Tools;PublishSamples;PublishDocumentation">

	</Target>

	<Import Project="$(ProjectRoot)tools\DotNetOpenAuth.automated.targets"/>
</Project>
