<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildProjectDirectory)\tools\DotNetOpenAuth.Common.Settings.targets"/>
	<PropertyGroup>
		<AutomatedBuild>true</AutomatedBuild>
		<SolutionPath>$(ProjectRoot)\src\$(ProductName).sln</SolutionPath>
		<ILMergeOutputAssemblyDirectory>$(OutputPath)\unified\</ILMergeOutputAssemblyDirectory>
		<ILMergeOutputAssembly>$(ILMergeOutputAssemblyDirectory)\$(ProductName).dll</ILMergeOutputAssembly>
		<ProjectTemplatesLayoutPath>$(ProjectRoot)\obj\$(Configuration)\projecttemplates\</ProjectTemplatesLayoutPath>
	</PropertyGroup>

	<Import Project="$(ProjectRoot)\tools\$(ProductName).Versioning.targets"/>
	<Import Project="$(ProjectRoot)\tools\Documentation.targets"/>
	<Import Project="$(ProjectRoot)\tools\Publish.targets"/>
	<UsingTask AssemblyFile="$(ProjectRoot)\lib\MSBuild.Community.Tasks.dll" TaskName="Zip"/>
	<UsingTask AssemblyFile="$(ProjectRoot)\lib\MSBuild.Community.Tasks.dll" TaskName="ILMerge"/>

	<ItemGroup>
		<SampleProjects Include="$(ProjectRoot)\samples\**\*.csproj" />
		<SampleSites Include="OAuthConsumer;OAuthServiceProvider;InfoCardRelyingParty" />
		<ProjectTemplates Include="$(ProjectRoot)\projecttemplates\**\*.csproj" />
		<ILMergeInputAssemblies Include="$(OutputPath)\$(ProductName).dll;
		                                 $(ProjectRoot)\lib\Microsoft.Contracts.dll; "/>
		<DelaySignedAssemblies Include="$(ILMergeOutputAssembly);
		                                $(OutputPath)\$(ProductName).dll;
		                                $(OutputPath)\$(ProductName).Contracts.dll;
		                                $(OutputPath)\$(ProductName).Test.dll;
		                                $(ProjectRoot)\samples\OpenIdOfflineProvider\bin\$(Configuration)\OpenIdOfflineProvider.exe" />
	</ItemGroup>

	<Target Name="Clean" DependsOnTargets="CleanDocumentation;UnpublishSamples;UnpublishDocumentation">
		<MSBuild Projects="$(SolutionPath)" Targets="Clean" />
		<ItemGroup>
			<DirtyDirectories Include="
			                           $(ProjectRoot)\bin;
			                           $(ProjectRoot)\**\obj;
			                           $(ProjectRoot)\doc\api;
			                           $(DropsRoot);
			                           $(ProjectRoot)\src\PrecompiledWeb;
			                           $(ProjectTemplatesLayoutPath);
			                           " />
			<DirtyDirectories Include="@(SampleDirectories->'%(FullPath)\bin')" />
			<DirtyDirectories Include="@(SampleDirectories->'%(FullPath)\obj')" />
			<DirtyFiles Include="
			                     $(ProjectRoot)\**\*~;
			                     $(ProjectRoot)\**\*.log*;
			                     $(ProjectRoot)\doc\$(ProductName).chm;
			                     " />
		</ItemGroup>
		<Delete Files="@(DirtyFiles)" />
		<RemoveDir Directories="@(DirtyDirectories)" />
	</Target>

	<Target Name="SkipVerification" Condition="'$(IsElevated)' == 'true'">
		<SignatureVerification SkipVerification="true" AssemblyName="*" PublicKeyToken="$(PublicKeyToken)" />
	</Target>
	
	<Target Name="BuildProduct" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(ProjectRoot)\src\$(ProductName)\$(ProductName).csproj" />
	</Target>

	<Target Name="BuildTests" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(ProjectRoot)\src\$(ProductName).Test\$(ProductName).Test.csproj" />
	</Target>

	<Target Name="BuildSamples" DependsOnTargets="SkipVerification">
		<MSBuild Projects="@(SampleProjects)" />
		<MSBuild Projects="$(SolutionPath)" Targets="@(SampleSites)" />
	</Target>

	<Target Name="Build" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(SolutionPath)" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="SkipVerification">
		<MSBuild Projects="$(SolutionPath)" Targets="Rebuild" />
	</Target>

	<Target Name="BuildUnifiedProduct"
					DependsOnTargets="BuildProduct"
					Inputs="@(ILMergeInputAssemblies)"
					Outputs="$(ILMergeOutputAssembly)">
		<MakeDir Directories="$(ILMergeOutputAssemblyDirectory)" />
		<ILMerge ExcludeFile="$(ProjectRoot)\ILMergeInternalizeExceptions.txt"
		         InputAssemblies="@(ILMergeInputAssemblies)"
		         OutputFile="$(ILMergeOutputAssembly)"
		         KeyFile="$(PublicKeyFile)"
		         DelaySign="true"
		         />
	</Target>

	<Target Name="ReSignDelaySignedAssemblies">
		<Message Text="Signing delay-signed assemblies." />
		<ReSignDelaySignedAssemblies
			KeyContainer="$(KeyPairContainer)"
			Assemblies="@(DelaySignedAssemblies)"
			Condition="Exists(%(Identity))" />
	</Target>

	<Target Name="ToolsLayout" DependsOnTargets="GetBuildVersion;_SetDropProperties;BuildUnifiedProduct">
		<PropertyGroup>
			<ToolsDirectory>$(DropsRoot)\$(ProductName)-Tools-$(BuildVersion)</ToolsDirectory>
		</PropertyGroup>

		<ItemGroup>
			<ToolProjects Include="$(ProjectRoot)\Samples\OpenIdOfflineProvider\OpenIdOfflineProvider.csproj" />
			<OfflineProvider Include="
											 $(ProjectRoot)\Samples\OpenIdOfflineProvider\bin\$(Configuration)\**\*.dll;
											 $(ILMergeOutputAssembly).*;
											 $(ProjectRoot)\Samples\OpenIdOfflineProvider\bin\$(Configuration)\OpenIdOfflineProvider.exe"
											 Exclude="
											 $(ProjectRoot)\Samples\OpenIdOfflineProvider\bin\$(Configuration)\$(ProductName).*;
											 "/>
			<OfflineProviderTargets Include="
											 @(OfflineProvider->'$(ToolsDirectory)\%(RecursiveDir)%(FileName)%(Extension)')"/>

			<AllToolSources Include="@(OfflineProvider)" />
			<AllToolTargets Include="@(OfflineProviderTargets)" />
		</ItemGroup>

		<MSBuild Projects="@(ToolProjects)" />

		<!-- clean up any previous drop with the same name so we don't aggregate files. -->
		<RemoveDir Directories="$(ToolsDirectory)" Condition="'$(NoClean)' != 'true'" />
		<MakeDir Directories="@(ToolsDirectory)" />
		<Copy SourceFiles="@(AllToolSources)" DestinationFiles="@(AllToolTargets)" SkipUnchangedFiles="true" />
	</Target>
	
	<Target Name="Tools" DependsOnTargets="ToolsLayout">
		<PropertyGroup>
			<ToolsZip>$(ToolsDirectory).zip</ToolsZip>
		</PropertyGroup>

		<Delete Files="$(ToolsZip)" />
		<Zip ZipFileName="$(ToolsZip)" 
				 Files="@(AllToolTargets)"
				 WorkingDirectory="$(ToolsDirectory)" />
	</Target>

	<Target Name="BuildProjectTemplatesLayout" DependsOnTargets="BuildUnifiedProduct;ReSignDelaySignedAssemblies">
		<ItemGroup>
			<ProjectTemplatesSource Include="$(ProjectRoot)\projecttemplates\**\*"
			                   Exclude="
			                   $(ProjectRoot)\projecttemplates\**\*.sln.cache;
			                   $(ProjectRoot)\projecttemplates\**\*.suo;
			                   $(ProjectRoot)\projecttemplates\**\*.gitignore;
			                   $(ProjectRoot)\projecttemplates\**\*.log*;
			                   $(ProjectRoot)\projecttemplates\**\*~;
			                   $(ProjectRoot)\projecttemplates\**\Settings.StyleCop;
			                   $(ProjectRoot)\projecttemplates\**\StyleCop.Cache;
			                   $(ProjectRoot)\projecttemplates\**\*.user;
			                   $(ProjectRoot)\projecttemplates\**\obj\**;
			                   $(ProjectRoot)\projecttemplates\**\bin\DotNetOpenAuth.dll;
			                   $(ProjectRoot)\projecttemplates\**\bin\DotNetOpenAuth.pdb;
			                   $(ProjectRoot)\projecttemplates\**\bin\Microsoft.Contracts.dll;
			                   $(ProjectRoot)\projecttemplates\**\*.ldf;
			                   $(ProjectRoot)\projecttemplates\**\*.mdf;
			                   "/>
			<_ProjectTemplatesTransformSource Include="@(ProjectTemplatesSource)" Condition="
																			 '%(Extension)' == '.cs'
																			 or '%(Extension)' == '.csproj'
																			 or '%(Extension)' == '.config'
																			 or '%(Extension)' == '.Master'
																			 or '%(Extension)' == '.aspx'
																			 or '%(Extension)' == '.asax'
																			 ">
				<BeforeTokens>%(RecursiveDir)</BeforeTokens>
				<AfterTokens>$safeprojectname$</AfterTokens>
			</_ProjectTemplatesTransformSource>
			<ProjectTemplatesSource Remove="@(_ProjectTemplatesTransformSource)" />

			<ProjectTemplatesLayout Include="@(ProjectTemplatesSource->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')"/>
			<ProjectTemplatesTransformLayout Include="@(_ProjectTemplatesTransformSource->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')"/>

			<!-- Include the template icon -->
			<ProjectTemplatesSource Include="@(ProjectTemplates->'$(ProjectRoot)\doc\logo\dotnetopenid.ico')" />
			<ProjectTemplatesLayout Include="@(ProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)__TemplateIcon.ico')" />

			<!-- Include the unified, signed version of the library -->
			<ProjectTemplatesSource Include="@(ProjectTemplates->'$(ILMergeOutputAssembly)')" />
			<ProjectTemplatesSource Include="@(ProjectTemplates->'$(ILMergeOutputAssemblyDirectory)\$(ProductName).pdb')" />
			<ProjectTemplatesSource Include="@(ProjectTemplates->'$(OutputPath)\$(ProductName).Contracts.dll')" />
			<ProjectTemplatesLayout Include="@(ProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)bin\$(ProductName).dll')" />
			<ProjectTemplatesLayout Include="@(ProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)bin\$(ProductName).pdb')" />
			<ProjectTemplatesLayout Include="@(ProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)bin\$(ProductName).Contracts.dll')" />
		</ItemGroup>
		<Trim Inputs="@(_ProjectTemplatesTransformSource)" MetadataName="BeforeTokens" AllAfter="\">
			<Output TaskParameter="Outputs" ItemName="ProjectTemplatesTransformSource" />
		</Trim>
		<MSBuild Projects="@(ProjectTemplates)" />
		<RemoveDir Directories="$(ProjectTemplatesLayoutPath)" Condition="'$(NoClean)' != 'true'" />
		<Copy SourceFiles="@(ProjectTemplatesSource)" DestinationFiles="@(ProjectTemplatesLayout)" SkipUnchangedFiles="true" />
		<CopyWithTokenSubstitution SourceFiles="@(ProjectTemplatesTransformSource)" DestinationFiles="@(ProjectTemplatesTransformLayout)" SkipUnchangedFiles="true">
			<Output TaskParameter="CopiedFiles" ItemName="CopiedProjectTemplateFiles" />
		</CopyWithTokenSubstitution>
		<ChangeProjectReferenceToAssemblyReference
			Projects="@(CopiedProjectTemplateFiles)"
			Condition="'%(Extension)' == '.csproj'"
		  ProjectReference="..\..\src\$(ProductName)\$(ProductName).csproj"
			Reference="Bin\$(ProductName).dll" />
	</Target>

	<Target Name="BuildProjectTemplates" DependsOnTargets="BuildProjectTemplatesLayout">
		<PropertyGroup>
			<WebFormsRelyingPartyZipFile>$(ProjectTemplatesLayoutPath)\WebFormsRelyingParty.zip</WebFormsRelyingPartyZipFile>
		</PropertyGroup>
		<ItemGroup>
			<WebFormsRelyingPartyProjectTemplateLayout Include="$(ProjectTemplatesLayoutPath)\WebFormsRelyingParty\**\*" />
		</ItemGroup>
		<Delete Files="$(WebFormsRelyingPartyZipFile)" />
		<Zip
			Files="@(WebFormsRelyingPartyProjectTemplateLayout)"
			ZipFileName="$(WebFormsRelyingPartyZipFile)"
			WorkingDirectory="$(ProjectTemplatesLayoutPath)\WebFormsRelyingParty" />
	</Target>

	<Target Name="Documentation" DependsOnTargets="BuildProduct;Chm" Condition="'$(NoDocumentation)' != 'true'">
	</Target>

	<!-- Test depends on "Build" rather than "BuildTests" until we can figure out how to build the 
	     no-.csproj file test project (to copy binaries to Bin directory). -->
	<Target Name="Test" DependsOnTargets="Build"
	        Inputs="$(OutputPath)\$(ProductName).Test.dll"
	        Outputs='$(OutputPath)\Test-results.xml;$(OutputPath)\Test-output-results.log'>
		<Exec Command='"mstest.exe" /testcontainer:"$(OutputPath)\$(ProductName).Test.dll"' />
	</Target>

	<Target Name="_SetDropProperties">
		<!-- This target is necessary because PropertyGroups within the same Target as 
		     where CallTarget is fired do NOT affect those called targets. -->
		<!-- The rest of these are here so that other DependsOn targets have access to these properties. -->
		<PropertyGroup>
			<DropDirectory>$(DropsRoot)\$(ProductName)-$(BuildVersion)</DropDirectory>
		</PropertyGroup>
	</Target>

	<Target Name="DropLayout" DependsOnTargets="GetBuildVersion;_SetDropProperties;BuildUnifiedProduct;ReSignDelaySignedAssemblies;BuildSamples;BuildProjectTemplates;Documentation">
		<PropertyGroup>
			<DropBinDirectory>$(DropDirectory)\Bin</DropBinDirectory>
			<DropLibDirectory>$(DropDirectory)\Lib</DropLibDirectory>
			<DropProjectTemplatesDirectory>$(DropDirectory)\Project Templates</DropProjectTemplatesDirectory>
			<DropSamplesDirectory>$(DropDirectory)\Samples</DropSamplesDirectory>
			<DropSpecsDirectory>$(DropDirectory)\Specs</DropSpecsDirectory>
		</PropertyGroup>
		<ItemGroup>
			<DropDirectories Include="
						 $(DropDirectory);
						 $(DropBinDirectory);
						 $(DropLibDirectory);
						 $(DropProjectTemplatesDirectory);
						 $(DropSamplesDirectory);
						 $(DropSpecsDirectory);
										 " />

			<DropSourceFiles Include="
																$(ProjectRoot)\Doc\$(ProductName).chm;
																$(ProjectRoot)\Doc\*.htm*;
																$(ProjectRoot)\LICENSE.txt;
																$(ProjectRoot)\CONTRIB.txt;
																"
											 Exclude="$(ProjectRoot)\Doc\README.*.html;" />
			<DropBinSourceFiles Include="
																$(ILMergeOutputAssemblyDirectory)\$(ProductName).???;
																$(OutputPath)\**\$(ProductName).resources.dll;
																$(OutputPath)\$(ProductName).xml;
																$(OutputPath)\$(ProductName).Contracts.???;
																$(ProjectRoot)\Doc\README.Bin.html;
																$(ProjectRoot)\src\$(ProductName)\Configuration\$(ProductName).xsd;
													" />
			<DropLibSourceFiles Include="
																$(ProjectRoot)\Lib\log4net.*;
																" />
			<DropProjectTemplatesSourceFiles Include="$(ProjectTemplatesLayoutPath)\*.zip" />
			<DropSamplesSourceFiles Include="$(ProjectRoot)\Samples\**" Exclude="
															$(ProjectRoot)\**\obj\**;
															$(ProjectRoot)\**\*.sln.cache;
															$(ProjectRoot)\**\*.suo;
															$(ProjectRoot)\**\*.user;
															$(ProjectRoot)\**\*.gitignore;
															$(ProjectRoot)\**\*.ldf;
															$(ProjectRoot)\**\*.log*;
															$(ProjectRoot)\**\*~;
															$(ProjectRoot)\**\Debug\**;
															$(ProjectRoot)\**\Settings.StyleCop;
															$(ProjectRoot)\**\StyleCop.Cache;
															$(ProjectRoot)\Samples\**\DotNetOpenAuth.???;
															$(ProjectRoot)\Samples\**\log4net.???;
															$(ProjectRoot)\Samples\**\PresentationCore.dll;
															$(ProjectRoot)\Samples\**\System.Printing.dll;
															$(ProjectRoot)\Samples\**\*.refresh_;
															" />
			<!-- Some .refresh files are only applicable to drop builds, so we rename them from *.refresh_ -->
			<DropSamplesRefreshSourceFiles Include="$(ProjectRoot)\Samples\**\*.refresh_" />
			<DropSpecsSourceFiles Include="$(ProjectRoot)\Doc\specs\*.htm*" />

			<DropFiles Include="@(DropSourceFiles->'$(DropDirectory)\%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropBinFiles Include="@(DropBinSourceFiles->'$(DropBinDirectory)\%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropLibFiles Include="@(DropLibSourceFiles->'$(DropLibDirectory)\%(RecurisveDir)%(FileName)%(Extension)')"/>
			<DropProjectTemplatesFiles Include="@(DropProjectTemplatesSourceFiles->'$(DropProjectTemplatesDirectory)\%(FileName)%(Extension)')" />
			<DropSamplesFiles Include="@(DropSamplesSourceFiles->'$(DropSamplesDirectory)\%(RecursiveDir)%(FileName)%(Extension)')"/>
			<DropSamplesRefreshFiles Include="@(DropSamplesRefreshSourceFiles->'$(DropSamplesDirectory)\%(RecursiveDir)%(FileName).refresh')"/>
			<DropSpecsFiles Include="@(DropSpecsSourceFiles->'$(DropSpecsDirectory)\%(RecursiveDir)%(FileName)%(Extension)')"/>

			<AllDropSources Include="
										@(DropSourceFiles);
										@(DropBinSourceFiles);
										@(DropLibSourceFiles);
										@(DropProjectTemplatesSourceFiles);
										@(DropSamplesSourceFiles);
										@(DropSamplesRefreshSourceFiles);
										@(DropDocSourceFiles);
										@(DropSpecsSourceFiles);
										" />

			<AllDropTargets Include="
										@(DropFiles);
										@(DropBinFiles);
										@(DropLibFiles);
										@(DropProjectTemplatesFiles);
										@(DropSamplesFiles);
										@(DropSamplesRefreshFiles);
										@(DropDocFiles);
										@(DropSpecsFiles)
										" />
		</ItemGroup>

		<!-- clean up any previous drop with the same name so we don't aggregate files. -->
		<RemoveDir Directories="$(DropDirectory)" Condition="'$(NoClean)' != 'true'" />
		<MakeDir Directories="@(DropDirectories)" />
		<Copy SourceFiles="@(AllDropSources)" DestinationFiles="@(AllDropTargets)" SkipUnchangedFiles="true" />
		<!-- fix up the samples so that they will compile right out of the drop -->
		<ItemGroup>
			<SampleProjectTargets Include="$(DropSamplesDirectory)\**\*.csproj" />
		</ItemGroup>
		<ChangeProjectReferenceToAssemblyReference Projects="@(SampleProjectTargets)"
		  ProjectReference="..\..\src\$(ProductName)\$(ProductName).csproj" Reference="..\..\Bin\$(ProductName).dll" />
	</Target>

	<Target Name="Drop" DependsOnTargets="DropLayout">
		<PropertyGroup>
			<DropZip>$(DropDirectory).zip</DropZip>
		</PropertyGroup>
		<Delete Files="$(DropZip)" />
		<Zip Files="@(AllDropTargets)" ZipFileName="$(DropZip)" WorkingDirectory="$(DropsRoot)" />
	</Target>

	<!-- Although Nightly includes publishing samples and docs, those targets are conditioned for
	     running only when the SampleWebRoot and DocWebRoot properties are set, respectively. -->
	<Target Name="Nightly" DependsOnTargets="Drop;Tools;PublishSamples;PublishDocumentation">

	</Target>
</Project>
