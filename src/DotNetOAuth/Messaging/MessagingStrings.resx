<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentPropertyMissing" xml:space="preserve">
    <value>Argument's {0}.{1} property is required but is empty or null.</value>
  </data>
  <data name="CurrentHttpContextRequired" xml:space="preserve">
    <value>HttpContext.Current is null.  There must be an ASP.NET request in process for this operation to succeed.</value>
  </data>
  <data name="DataContractMissingFromMessageType" xml:space="preserve">
    <value>DataContractSerializer could not be initialized on message type {0}.  Is it missing a [DataContract] attribute?</value>
  </data>
  <data name="DataContractMissingNamespace" xml:space="preserve">
    <value>DataContractSerializer could not be initialized on message type {0} because the DataContractAttribute.Namespace property is not set.</value>
  </data>
  <data name="DerivedTypeNotExpected" xml:space="preserve">
    <value>An instance of type {0} was expected, but received unexpected derived type {1}.</value>
  </data>
  <data name="DirectedMessageMissingRecipient" xml:space="preserve">
    <value>The directed message's Recipient property must not be null.</value>
  </data>
  <data name="ErrorInRequestReplyMessage" xml:space="preserve">
    <value>Error occurred while sending a direct message or getting the response.</value>
  </data>
  <data name="ExceptionNotConstructedForTransit" xml:space="preserve">
    <value>This exception was not constructed with a root request message that caused it.</value>
  </data>
  <data name="ExpectedMessageNotReceived" xml:space="preserve">
    <value>Expected message {0} but received no recognizable message.</value>
  </data>
  <data name="ExpiredMessage" xml:space="preserve">
    <value>The message expired at {0} and it is now {1}.</value>
  </data>
  <data name="HttpContextRequired" xml:space="preserve">
    <value>This method requires a current HttpContext.  Alternatively, use an overload of this method that allows you to pass in information without an HttpContext.</value>
  </data>
  <data name="IndirectMessagesMustImplementIDirectedProtocolMessage" xml:space="preserve">
    <value>Messages that indicate indirect transport must implement the {0} interface.</value>
  </data>
  <data name="InsufficentMessageProtection" xml:space="preserve">
    <value>The message required protections {0} but the channel could only apply {1}.</value>
  </data>
  <data name="InvalidMessageParts" xml:space="preserve">
    <value>Some part(s) of the message have invalid values: {0}</value>
  </data>
  <data name="InvalidNonceReceived" xml:space="preserve">
    <value>The incoming message had an invalid or missing nonce.</value>
  </data>
  <data name="KeyAlreadyExists" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="QueuedMessageResponseAlreadyExists" xml:space="preserve">
    <value>A message response is already queued for sending in the response stream.</value>
  </data>
  <data name="ReplayAttackDetected" xml:space="preserve">
    <value>This message has already been processed.  This could indicate a replay attack in progress.</value>
  </data>
  <data name="ReplayProtectionNotSupported" xml:space="preserve">
    <value>This channel does not support replay protection.</value>
  </data>
  <data name="RequiredParametersMissing" xml:space="preserve">
    <value>The following required parameters were missing from the {0} message: {1}</value>
  </data>
  <data name="RequiredProtectionMissing" xml:space="preserve">
    <value>The binding element offering the {0} protection requires other protection that is not provided.</value>
  </data>
  <data name="SequenceContainsNoElements" xml:space="preserve">
    <value>The list is empty.</value>
  </data>
  <data name="SequenceContainsNullElement" xml:space="preserve">
    <value>The list contains a null element.</value>
  </data>
  <data name="SignatureInvalid" xml:space="preserve">
    <value>Message signature was incorrect.</value>
  </data>
  <data name="SigningNotSupported" xml:space="preserve">
    <value>This channel does not support signing messages.  To support signing messages, a derived Channel type must override the Sign and IsSignatureValid methods.</value>
  </data>
  <data name="StreamUnreadable" xml:space="preserve">
    <value>The stream's CanRead property returned false.</value>
  </data>
  <data name="StreamUnwritable" xml:space="preserve">
    <value>The stream's CanWrite property returned false.</value>
  </data>
  <data name="TooManyBindingsOfferingSameProtection" xml:space="preserve">
    <value>Expected at most 1 binding element offering the {0} protection, but found {1}.</value>
  </data>
  <data name="UnexpectedMessageReceived" xml:space="preserve">
    <value>Expected message {0} but received {1} instead.</value>
  </data>
  <data name="UnexpectedType" xml:space="preserve">
    <value>The type {0} or a derived type was expected, but {1} was given.</value>
  </data>
  <data name="UnrecognizedEnumValue" xml:space="preserve">
    <value>{0} property has unrecognized value {1}.</value>
  </data>
</root>