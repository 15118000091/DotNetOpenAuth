// <auto-generated/> // disable StyleCop on this file
//-----------------------------------------------------------------------
// <copyright file="Protocol.cs" company="Andrew Arnott">
//     Copyright (c) Andrew Arnott. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace DotNetOpenAuth.OAuthWrap {
	using System;
	using System.Collections.Generic;

	/// <summary>
	/// An enumeration of the OAuth WRAP protocol versions supported by this library.
	/// </summary>
	public enum ProtocolVersion {
		/// <summary>
		/// The OAuth WRAP 1.0 specification.
		/// </summary>
		V10,
	}

	/// <summary>
	/// Protocol constants for OAuth WRAP.
	/// </summary>
	internal class Protocol {
		/// <summary>
		/// The HTTP authorization scheme "WRAP";
		/// </summary>
		internal const string HttpAuthorizationScheme = "WRAP";

		/// <summary>
		/// The "wrap_client_state" string.
		/// </summary>
		internal const string wrap_client_state = "wrap_client_state";

		/// <summary>
		/// The "wrap_callback" string.
		/// </summary>
		internal const string wrap_callback = "wrap_callback";

		/// <summary>
		/// The "wrap_client_id" string.
		/// </summary>
		internal const string wrap_client_id = "wrap_client_id";

		/// <summary>
		/// The "wrap_scope" string.
		/// </summary>
		internal const string wrap_scope = "wrap_scope";

		/// <summary>
		/// The "wrap_client_secret" string.
		/// </summary>
		internal const string wrap_client_secret = "wrap_client_secret";

		/// <summary>
		/// The "wrap_verification_code" string.
		/// </summary>
		internal const string wrap_verification_code = "wrap_verification_code";

		/// <summary>
		/// The "wrap_verification_url" string.
		/// </summary>
		internal const string wrap_verification_url = "wrap_verification_url";

		/// <summary>
		/// The "wrap_error_reason" string.
		/// </summary>
		internal const string wrap_error_reason = "wrap_error_reason";

		/// <summary>
		/// The "wrap_access_token" string.
		/// </summary>
		internal const string wrap_access_token = "wrap_access_token";

		/// <summary>
		/// The "wrap_refresh_token" string.
		/// </summary>
		internal const string wrap_refresh_token = "wrap_refresh_token";

		/// <summary>
		/// The "wrap_access_token_expires_in" string.
		/// </summary>
		internal const string wrap_access_token_expires_in = "wrap_access_token_expires_in";

		/// <summary>
		/// The "expired_delegation_code" string.
		/// </summary>
		internal const string expired_delegation_code = "expired_delegation_code";

		/// <summary>
		/// The "wrap_username" string.
		/// </summary>
		internal const string wrap_username = "wrap_username";

		/// <summary>
		/// The "wrap_password" string.
		/// </summary>
		internal const string wrap_password = "wrap_password";

		/// <summary>
		/// The "wrap_name" string.
		/// </summary>
		internal const string wrap_name = "wrap_name";

		/// <summary>
		/// The "wrap_assertion_format" string.
		/// </summary>
		internal const string wrap_assertion_format = "wrap_assertion_format";

		/// <summary>
		/// The "wrap_assertion" string.
		/// </summary>
		internal const string wrap_assertion = "wrap_assertion";

		/// <summary>
		/// The "wrap_SAML" string.
		/// </summary>
		internal const string wrap_saml = "wrap_SAML";

		/// <summary>
		/// The "wrap_SWT" string.
		/// </summary>
		internal const string wrap_swt = "wrap_SWT";

		/// <summary>
		/// The "wrap_captcha_url" string.
		/// </summary>
		internal const string wrap_captcha_url = "wrap_captcha_url";

		/// <summary>
		/// The "wrap_captcha_solution" string.
		/// </summary>
		internal const string wrap_captcha_solution = "wrap_captcha_solution";

		/// <summary>
		/// The "user_denied" string.
		/// </summary>
		internal const string user_denied = "user_denied";

		/// <summary>
		/// Gets the <see cref="Protocol"/> instance with values initialized for V1.0 of the protocol.
		/// </summary>
		internal static readonly Protocol V10 = new Protocol {
			Version = new Version(1, 0),
			ProtocolVersion = ProtocolVersion.V10,
		};

		/// <summary>
		/// A list of all supported OAuth versions, in order starting from newest version.
		/// </summary>
		internal static readonly List<Protocol> AllVersions = new List<Protocol>() { V10 };

		/// <summary>
		/// The default (or most recent) supported version of the OpenID protocol.
		/// </summary>
		internal static readonly Protocol Default = AllVersions[0];

		/// <summary>
		/// Gets or sets the OAuth WRAP version represented by this instance.
		/// </summary>
		/// <value>The version.</value>
		internal Version Version { get; private set; }

		/// <summary>
		/// Gets or sets the OAuth WRAP version represented by this instance.
		/// </summary>
		/// <value>The protocol version.</value>
		internal ProtocolVersion ProtocolVersion { get; private set; }

		/// <summary>
		/// Gets the OAuth Protocol instance to use for the given version.
		/// </summary>
		/// <param name="version">The OAuth version to get.</param>
		/// <returns>A matching <see cref="Protocol"/> instance.</returns>
		public static Protocol Lookup(ProtocolVersion version) {
			switch (version) {
				case ProtocolVersion.V10: return Protocol.V10;
				default: throw new ArgumentOutOfRangeException("version");
			}
		}
	}
}
