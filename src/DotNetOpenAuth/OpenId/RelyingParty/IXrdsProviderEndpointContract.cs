// <auto-generated />

namespace DotNetOpenAuth.OpenId.RelyingParty {
	using System;
	using System.Diagnostics.CodeAnalysis;
	using System.Diagnostics.Contracts;
	using System.Globalization;
	using DotNetOpenAuth.OpenId.Messages;

	[ContractClassFor(typeof(IXrdsProviderEndpoint))]
	internal abstract class IXrdsProviderEndpointContract : IXrdsProviderEndpoint {
		#region IXrdsProviderEndpoint Properties

		int? IXrdsProviderEndpoint.ServicePriority {
			get { throw new System.NotImplementedException(); }
		}

		int? IXrdsProviderEndpoint.UriPriority {
			get { throw new System.NotImplementedException(); }
		}

		#endregion

		#region IProviderEndpoint Properties

		Version IProviderEndpoint.Version {
			get { throw new System.NotImplementedException(); }
		}

		Uri IProviderEndpoint.Uri {
			get { throw new System.NotImplementedException(); }
		}

		#endregion

		#region IXrdsProviderEndpoint Methods

		bool IXrdsProviderEndpoint.IsTypeUriPresent(string typeUri) {
			throw new System.NotImplementedException();
		}

		#endregion

		#region IProviderEndpoint Methods

		bool IProviderEndpoint.IsExtensionSupported<T>() {
			throw new System.NotImplementedException();
		}

		bool IProviderEndpoint.IsExtensionSupported(System.Type extensionType) {
			Contract.Requires<ArgumentNullException>(extensionType != null);
			Contract.Requires<ArgumentException>(typeof(IOpenIdMessageExtension).IsAssignableFrom(extensionType), string.Format(CultureInfo.CurrentCulture, OpenIdStrings.TypeMustImplementX, typeof(IOpenIdMessageExtension).FullName));
			throw new System.NotImplementedException();
		}

		#endregion
	}
}
