// <auto-generated/> // disable StyleCop on this file
//-----------------------------------------------------------------------
// <copyright file="ContractInternal.cs" company="Andrew Arnott">
//     Copyright (c) Andrew Arnott. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace DotNetOpenAuth {
	using System;
	using System.Diagnostics;
	using System.Diagnostics.Contracts;
	using DotNetOpenAuth.Messaging;

	/// <summary>
	/// An internal equivalent to <see cref="Microsoft.Contracts.Contract"/> in order to
	/// avoid a runtime dependency on Microsoft.Contracts.dll.
	/// </summary>
	/// <remarks>
	/// The Code Contracts assembly rewriter (ccrewrite) tool causes all calls to Contract.*()
	/// to redirect to this class.
	/// </remarks>
	public static class ContractRuntimeFailureMethods {
		[DebuggerStepThrough]
		public static void Requires(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new ArgumentException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void Ensures(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new InternalErrorException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void EnsuresOnThrow(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new InternalErrorException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void Assert(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new InternalErrorException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void Assume(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new InternalErrorException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void Invariant(bool condition, string userMessage, string conditionText) {
			if (!condition) {
				throw new InternalErrorException(userMessage ?? conditionText);
			}
		}

		[DebuggerStepThrough]
		public static void Failure(ContractFailureKind failureKind, string userProvidedMessage, string condition, Exception originalException) {
			switch (failureKind) {
				case ContractFailureKind.Assert:
					Assert(false, userProvidedMessage, condition);
					break;
				case ContractFailureKind.Assume:
					Assume(false, userProvidedMessage, condition);
					break;
				case ContractFailureKind.Invariant:
					Invariant(false, userProvidedMessage, condition);
					break;
				case ContractFailureKind.Postcondition:
					Ensures(false, userProvidedMessage, condition);
					break;
				case ContractFailureKind.Precondition:
					Requires(false, userProvidedMessage, condition);
					break;
				default:
					ErrorUtilities.ThrowInternal(userProvidedMessage ?? condition);
					break;
			}
		}
	}
}
