.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89)
}
.assembly extern System.Xml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89)
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89)
}
.assembly Microsoft.Ddue.Tools.Compiler
{
  .publickey = (00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 EF 09 EE D7 93 0B 34 BA 88 83 E7 DB 9F 08 F5 DF A0 D9 F1 7A 97 8E 98 F3 99 03 36 B2 2A 75 D6 BB 2C 25 90 6C 4F 4E 5D 42 60 00 A9 22 00 A9 CE FE 3F 5E C4 22 BA 1E FF 47 7D C4 14 E7 52 C3 30 07 1C 66 1C 58 3F 28 48 0C 03 35 94 CE 5F A5 FC 44 94 D2 A4 42 95 E5 A3 3E AD B2 FD FF 45 13 77 FD BE 62 48 38 EF 02 BF 22 54 00 56 5D DB DA 10 D8 7E 77 F9 7F 9F 20 60 11 4B 49 3A 4D 62 FE C3 C3)
  .hash algorithm 0x00008004
}
.namespace System.Compiler
{
  .class public Acquire
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Condition
    .field public class System.Compiler.Expression ConditionFunction
    .field public bool ReadOnly
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariable
    .field public class System.Compiler.Statement Target
  }
  .class public AddressDereference
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression address, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression address, class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression address, class System.Compiler.TypeNode 'type', bool Volatile, int32 'alignment')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression address, class System.Compiler.TypeNode 'type', bool Volatile, int32 'alignment', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Address
    .field public int32 Alignment
    .field public bool Volatile
  }
  .class public AliasDefinition
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier alias, class System.Compiler.Identifier originalName)
    {
      ret
    }
    .field public class System.Compiler.Identifier Alias
    .field public class System.Compiler.TypeNode AliasedType
    .field public class System.Compiler.TypeNode AliasedTypeExpression
    .field public class System.Compiler.Identifier OriginalName
    .field public class System.Compiler.Identifier URI
  }
  .class public sealed AliasDefinitionList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.AliasDefinitionList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.AliasDefinition get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.AliasDefinition Current()
      {
        .get instance class System.Compiler.AliasDefinition System.Compiler.AliasDefinitionList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.AliasDefinition element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.AliasDefinitionList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.AliasDefinition get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.AliasDefinition 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.AliasDefinitionList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.AliasDefinition Item(int32)
    {
      .get instance class System.Compiler.AliasDefinition System.Compiler.AliasDefinitionList::get_Item(int32)
      .set instance void System.Compiler.AliasDefinitionList::set_Item(int32, class System.Compiler.AliasDefinition)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.AliasDefinitionList::get_Length()
    }
  }
  .class public AnonymousNestedFunction
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ParameterList parameters, class System.Compiler.Block body)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ParameterList parameters, class System.Compiler.Block body, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Invocation
    .field public class System.Compiler.Method Method
    .field public class System.Compiler.ParameterList Parameters
  }
  .class public ApplyToAll
    extends System.Compiler.BinaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, valuetype System.Compiler.SourceContext ctx)
    {
      ret
    }
    .field public class System.Compiler.Local ElementLocal
    .field public class System.Compiler.Method ResultIterator
  }
  .class public ArrayType
    extends System.Compiler.TypeNode
  {
    .method public hidebysig 
      instance bool IsSzArray()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.MemberList get_Members()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_Members(class System.Compiler.MemberList 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void SetLowerBoundToUnknown()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance int32 GetLowerBound(int32 dimension)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance int32 GetSize(int32 dimension)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.MemberList GetMembersNamed(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class [mscorlib]System.Type GetRuntimeType()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Constructor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Getter()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Setter()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Address()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsAssignableTo(class System.Compiler.TypeNode targetType)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
    .field public int32[] LowerBounds
    .field public int32 Rank
    .field public int32[] Sizes
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance class System.Compiler.Method Address()
    {
      .get instance class System.Compiler.Method System.Compiler.ArrayType::get_Address()
    }
    .property instance class System.Compiler.Method Constructor()
    {
      .get instance class System.Compiler.Method System.Compiler.ArrayType::get_Constructor()
    }
    .property instance string FullName()
    {
      .get instance string System.Compiler.ArrayType::get_FullName()
    }
    .property instance class System.Compiler.Method Getter()
    {
      .get instance class System.Compiler.Method System.Compiler.ArrayType::get_Getter()
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.ArrayType::get_IsStructural()
    }
    .property instance class System.Compiler.MemberList Members()
    {
      .get instance class System.Compiler.MemberList System.Compiler.ArrayType::get_Members()
      .set instance void System.Compiler.ArrayType::set_Members(class System.Compiler.MemberList)
    }
    .property instance class System.Compiler.Method Setter()
    {
      .get instance class System.Compiler.Method System.Compiler.ArrayType::get_Setter()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.ArrayType::get_StructuralElementTypes()
    }
  }
  .class public ArrayTypeExpression
    extends System.Compiler.ArrayType
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, int32[] sizes)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, int32[] sizes, int32[] lowerBounds)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, int32[] sizes, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, int32[] sizes, int32[] lowerBounds, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public bool LowerBoundIsUnknown
  }
  .class public AssemblyCouldNotBeSignedException
    extends [mscorlib]System.ApplicationException
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public sealed AssemblyFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.AssemblyFlags CompatibilityMask = int32(0x000000F0)
    .field static public literal valuetype System.Compiler.AssemblyFlags DisableJITcompileOptimizer = int32(0x00004000)
    .field static public literal valuetype System.Compiler.AssemblyFlags EnableJITcompileTracking = int32(0x00008000)
    .field static public literal valuetype System.Compiler.AssemblyFlags Library = int32(0x00000002)
    .field static public literal valuetype System.Compiler.AssemblyFlags NonSideBySideCompatible = int32(0x00000010)
    .field static public literal valuetype System.Compiler.AssemblyFlags NonSideBySideMachine = int32(0x00000030)
    .field static public literal valuetype System.Compiler.AssemblyFlags NonSideBySideProcess = int32(0x00000020)
    .field static public literal valuetype System.Compiler.AssemblyFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.AssemblyFlags NowPlatform = int32(0x00000006)
    .field static public literal valuetype System.Compiler.AssemblyFlags Platform = int32(0x00000004)
    .field static public literal valuetype System.Compiler.AssemblyFlags PublicKey = int32(0x00000001)
    .field static public literal valuetype System.Compiler.AssemblyFlags Retargetable = int32(0x00000100)
    .field static public literal valuetype System.Compiler.AssemblyFlags SideBySideCompatible = int32(0x00000000)
  }
  .class public sealed AssemblyHashAlgorithm
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.AssemblyHashAlgorithm MD5 = int32(0x00008003)
    .field static public literal valuetype System.Compiler.AssemblyHashAlgorithm None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.AssemblyHashAlgorithm 'SHA1' = int32(0x00008004)
  }
  .class public AssemblyNode
    extends System.Compiler.Module
  {
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.AssemblyNode get_ContractAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ContractAssembly(class System.Compiler.AssemblyNode 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance string get_StrongName()
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_IsShadowAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode GetAttributeByName(class System.Compiler.TypeNode attributeType)
    {
      .custom instance void [mscorlib]System.ObsoleteAttribute::.ctor(string) = { string('Please use GetAttribute(TypeNode attributeType)') }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode GetModuleAttribute(class System.Compiler.TypeNode attributeType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module/TypeNodeProvider provider, class System.Compiler.Module/TypeNodeListProvider listProvider, class System.Compiler.Module/CustomAttributeProvider provideCustomAttributes, class System.Compiler.Module/ResourceProvider provideResources, string directory)
    {
      ret
    }
    .method public virtual hidebysig 
      instance void Dispose()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_ExportedTypes()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ExportedTypes(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_GetDebugSymbols()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_GetDebugSymbols(bool 'value')
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(unsigned int8[] buffer)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(string location)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(string location, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(string location, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(string location, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(string location, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class System.Compiler.AssemblyReference assemblyReference, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class System.Compiler.AssemblyReference assemblyReference, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class System.Compiler.AssemblyReference assemblyReference, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class System.Compiler.AssemblyReference assemblyReference, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class [mscorlib]System.Reflection.Assembly runtimeAssembly)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class [mscorlib]System.Reflection.Assembly runtimeAssembly, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class [mscorlib]System.Reflection.Assembly runtimeAssembly, class [mscorlib]System.Collections.IDictionary cache, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.AssemblyNode GetAssembly(class [mscorlib]System.Reflection.Assembly runtimeAssembly, class [mscorlib]System.Collections.IDictionary cache, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public hidebysig 
      instance void SetupDebugReader(string pdbSearchPath)
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.AssemblyName GetAssemblyName()
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.Assembly GetRuntimeAssembly()
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.Assembly GetRuntimeAssembly(class [mscorlib]System.Security.Policy.Evidence evidence)
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.Assembly GetRuntimeAssembly(class [mscorlib]System.AppDomain targetAppDomain)
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.Assembly GetRuntimeAssembly(class [mscorlib]System.Security.Policy.Evidence evidence, class [mscorlib]System.AppDomain targetAppDomain)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool MayAccessInternalTypesOf(class System.Compiler.AssemblyNode 'assembly')
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.AssemblyReferenceList GetFriendAssemblies()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance unsigned int8[] get_PublicKeyToken()
    {
      ret
    }
    .field public string Culture
    .field public valuetype System.Compiler.AssemblyFlags Flags
    .field public unsigned int8[] KeyBlob
    .field public string KeyContainerName
    .field public class System.Compiler.AttributeList ModuleAttributes
    .field public unsigned int8[] PublicKeyOrToken
    .field public class [mscorlib]System.Version Version
    .field family class System.Compiler.AssemblyNode contractAssembly
    .field family class System.Compiler.TypeNodeList exportedTypes
    .field family class System.Compiler.TrivialHashtable friends
    .field family string strongName
    .field family unsigned int8[] token
    .property instance class System.Compiler.AssemblyNode ContractAssembly()
    {
      .get instance class System.Compiler.AssemblyNode System.Compiler.AssemblyNode::get_ContractAssembly()
      .set instance void System.Compiler.AssemblyNode::set_ContractAssembly(class System.Compiler.AssemblyNode)
    }
    .property instance class System.Compiler.TypeNodeList ExportedTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.AssemblyNode::get_ExportedTypes()
      .set instance void System.Compiler.AssemblyNode::set_ExportedTypes(class System.Compiler.TypeNodeList)
    }
    .property instance bool GetDebugSymbols()
    {
      .get instance bool System.Compiler.AssemblyNode::get_GetDebugSymbols()
      .set instance void System.Compiler.AssemblyNode::set_GetDebugSymbols(bool)
    }
    .property instance bool IsShadowAssembly()
    {
      .get instance bool System.Compiler.AssemblyNode::get_IsShadowAssembly()
    }
    .property instance unsigned int8[] PublicKeyToken()
    {
      .get instance unsigned int8[] System.Compiler.AssemblyNode::get_PublicKeyToken()
    }
    .property instance string StrongName()
    {
      .get instance string System.Compiler.AssemblyNode::get_StrongName()
    }
  }
  .class public sealed AssemblyNodeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.AssemblyNodeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.AssemblyNode get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.AssemblyNode Current()
      {
        .get instance class System.Compiler.AssemblyNode System.Compiler.AssemblyNodeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.AssemblyNode[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.AssemblyNode element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.AssemblyNode get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.AssemblyNode 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.AssemblyNodeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.AssemblyNode Item(int32)
    {
      .get instance class System.Compiler.AssemblyNode System.Compiler.AssemblyNodeList::get_Item(int32)
      .set instance void System.Compiler.AssemblyNodeList::set_Item(int32, class System.Compiler.AssemblyNode)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.AssemblyNodeList::get_Length()
    }
  }
  .class public AssemblyReference
    extends System.Compiler.Node
  {
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.AssemblyNode get_Assembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Assembly(class System.Compiler.AssemblyNode 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance string get_StrongName()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.AssemblyNode 'assembly')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string assemblyStrongName, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string assemblyStrongName)
    {
      ret
    }
    .method public hidebysig 
      instance class [mscorlib]System.Reflection.AssemblyName GetAssemblyName()
    {
      ret
    }
    .method public hidebysig 
      instance bool Matches(string name, class [mscorlib]System.Version version, string culture, unsigned int8[] publicKeyToken)
    {
      ret
    }
    .method public hidebysig 
      instance bool MatchesIgnoringVersion(class System.Compiler.AssemblyReference aRef)
    {
      ret
    }
    .method public hidebysig specialname 
      instance unsigned int8[] get_PublicKeyToken()
    {
      ret
    }
    .field public string Culture
    .field public valuetype System.Compiler.AssemblyFlags Flags
    .field public unsigned int8[] HashValue
    .field public string Location
    .field public string Name
    .field public unsigned int8[] PublicKeyOrToken
    .field public class [mscorlib]System.Version Version
    .field famorassem class System.Compiler.AssemblyNode 'assembly'
    .field static family class [mscorlib]'System.Security.Cryptography.SHA1' sha
    .field family string strongName
    .property instance class System.Compiler.AssemblyNode Assembly()
    {
      .get instance class System.Compiler.AssemblyNode System.Compiler.AssemblyReference::get_Assembly()
      .set instance void System.Compiler.AssemblyReference::set_Assembly(class System.Compiler.AssemblyNode)
    }
    .property instance unsigned int8[] PublicKeyToken()
    {
      .get instance unsigned int8[] System.Compiler.AssemblyReference::get_PublicKeyToken()
    }
    .property instance string StrongName()
    {
      .get instance string System.Compiler.AssemblyReference::get_StrongName()
    }
  }
  .class public sealed AssemblyReferenceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.AssemblyReferenceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.AssemblyReference get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.AssemblyReference Current()
      {
        .get instance class System.Compiler.AssemblyReference System.Compiler.AssemblyReferenceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.AssemblyReference element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.AssemblyReferenceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.AssemblyReference get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.AssemblyReference 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.AssemblyReferenceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.AssemblyReference Item(int32)
    {
      .get instance class System.Compiler.AssemblyReference System.Compiler.AssemblyReferenceList::get_Item(int32)
      .set instance void System.Compiler.AssemblyReferenceList::set_Item(int32, class System.Compiler.AssemblyReference)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.AssemblyReferenceList::get_Length()
    }
  }
  .class public Assertion
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition)
    {
      ret
    }
    .field public class System.Compiler.Expression Condition
  }
  .class public AssignmentExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.AssignmentStatement assignment)
    {
      ret
    }
    .field public class System.Compiler.Statement AssignmentStatement
  }
  .class public AssignmentStatement
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression target, class System.Compiler.Expression source)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression target, class System.Compiler.Expression source, valuetype System.Compiler.SourceContext context)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression target, class System.Compiler.Expression source, valuetype System.Compiler.NodeType Operator)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression target, class System.Compiler.Expression source, valuetype System.Compiler.NodeType Operator, valuetype System.Compiler.SourceContext context)
    {
      ret
    }
    .field public valuetype System.Compiler.NodeType Operator
    .field public class System.Compiler.Method OperatorOverload
    .field public class System.Compiler.Expression Source
    .field public class System.Compiler.Expression Target
  }
  .class public Assumption
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition)
    {
      ret
    }
    .field public class System.Compiler.Expression Condition
  }
  .class public sealed AttributeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.AttributeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.AttributeNode get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.AttributeNode Current()
      {
        .get instance class System.Compiler.AttributeNode System.Compiler.AttributeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.AttributeNode element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.AttributeList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.AttributeNode get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.AttributeNode 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.AttributeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.AttributeNode Item(int32)
    {
      .get instance class System.Compiler.AttributeNode System.Compiler.AttributeList::get_Item(int32)
      .set instance void System.Compiler.AttributeList::set_Item(int32, class System.Compiler.AttributeNode)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.AttributeList::get_Length()
    }
  }
  .class public AttributeNode
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression constructor, class System.Compiler.ExpressionList expressions)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression constructor, class System.Compiler.ExpressionList expressions, valuetype [mscorlib]System.AttributeTargets target)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_AllowMultiple()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_AllowMultiple(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_Inherited()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Inherited(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance valuetype [mscorlib]System.AttributeTargets get_ValidOn()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ValidOn(valuetype [mscorlib]System.AttributeTargets 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_Type()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Type(class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .field public class System.Compiler.Expression Constructor
    .field static public initonly class System.Compiler.AttributeNode DoesNotExist
    .field public class System.Compiler.ExpressionList Expressions
    .field public bool IsPseudoAttribute
    .field public valuetype [mscorlib]System.AttributeTargets Target
    .property instance bool AllowMultiple()
    {
      .get instance bool System.Compiler.AttributeNode::get_AllowMultiple()
      .set instance void System.Compiler.AttributeNode::set_AllowMultiple(bool)
    }
    .property instance bool Inherited()
    {
      .get instance bool System.Compiler.AttributeNode::get_Inherited()
      .set instance void System.Compiler.AttributeNode::set_Inherited(bool)
    }
    .property instance class System.Compiler.TypeNode Type()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.AttributeNode::get_Type()
      .set instance void System.Compiler.AttributeNode::set_Type(class System.Compiler.TypeNode)
    }
    .property instance valuetype [mscorlib]System.AttributeTargets ValidOn()
    {
      .get instance valuetype [mscorlib]System.AttributeTargets System.Compiler.AttributeNode::get_ValidOn()
      .set instance void System.Compiler.AttributeNode::set_ValidOn(valuetype [mscorlib]System.AttributeTargets)
    }
  }
  .class public Base
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
  .class public BinaryExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode resultType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, valuetype System.Compiler.NodeType nodeType, valuetype System.Compiler.SourceContext ctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode resultType, valuetype System.Compiler.SourceContext ctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Operand1
    .field public class System.Compiler.Expression Operand2
  }
  .class public sealed BinaryWriter
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.MemoryStream output)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.MemoryStream output, class [mscorlib]System.Text.Encoding encoding)
    {
      ret
    }
    .method public hidebysig 
      instance void Write(bool 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int8 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(int8 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int8[] buffer)
    {
      ret
    }
    .method public hidebysig 
      instance void Write(char ch)
    {
      ret
    }
    .method public hidebysig 
      instance void Write(char[] chars)
    {
      ret
    }
    .method public hidebysig 
      instance void Write(float64 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(int16 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int16 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(int32 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int32 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(int64 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int64 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(float32 'value')
    {
      ret
    }
    .method public hidebysig 
      instance void Write(string str)
    {
      ret
    }
    .method public hidebysig 
      instance void Write(string str, bool emitNullTerminator)
    {
      ret
    }
    .method public hidebysig 
      instance int32 GetUTF8ByteCount(string str)
    {
      ret
    }
    .field public class System.Compiler.MemoryStream BaseStream
  }
  .class public Block
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.StatementList statements)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.StatementList statements, valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.StatementList statements, bool Checked, bool SuppressCheck, bool IsUnsafe)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.StatementList statements, valuetype System.Compiler.SourceContext sourceContext, bool Checked, bool SuppressCheck, bool IsUnsafe)
    {
      ret
    }
    .field public bool Checked
    .field public bool HasLocals
    .field public bool IsUnsafe
    .field public class System.Compiler.BlockScope Scope
    .field public class System.Compiler.StatementList Statements
    .field public bool SuppressCheck
  }
  .class public BlockExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block, class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Block Block
  }
  .class public sealed BlockList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.BlockList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Block get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Block Current()
      {
        .get instance class System.Compiler.Block System.Compiler.BlockList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Block element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.BlockList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Block get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Block 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.BlockList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Block Item(int32)
    {
      .get instance class System.Compiler.Block System.Compiler.BlockList::get_Item(int32)
      .set instance void System.Compiler.BlockList::set_Item(int32, class System.Compiler.Block)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.BlockList::get_Length()
    }
  }
  .class public BlockScope
    extends System.Compiler.Scope
  {
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Class get_ClosureClass()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_CapturedForClosure()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Class parentScope, class System.Compiler.Block associatedBlock)
    {
      ret
    }
    .field public class System.Compiler.Block AssociatedBlock
    .property instance bool CapturedForClosure()
    {
      .get instance bool System.Compiler.BlockScope::get_CapturedForClosure()
    }
    .property instance class System.Compiler.Class ClosureClass()
    {
      .get instance class System.Compiler.Class System.Compiler.BlockScope::get_ClosureClass()
    }
  }
  .class public BoxedTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public Branch
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block target)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block target, valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block target, valuetype System.Compiler.SourceContext sourceContext, bool unordered)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block target, bool shortOffset, bool unordered, bool leavesExceptionBlock)
    {
      ret
    }
    .field public bool BranchIfUnordered
    .field public class System.Compiler.Expression Condition
    .field public bool LeavesExceptionBlock
    .field public bool ShortOffset
    .field public class System.Compiler.Block Target
  }
  .class public ByteArrayComparer
    extends [mscorlib]System.Object
    implements [mscorlib]System.Collections.IComparer
  {
    .method private final virtual hidebysig newslot 
      instance int32 System.Collections.IComparer.Compare(object x, object y)
    {
      .override [mscorlib]System.Collections.IComparer::Compare
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public ByteArrayHasher
    extends [mscorlib]System.Object
    implements [mscorlib]System.Collections.IHashCodeProvider
  {
    .method private final virtual hidebysig newslot 
      instance int32 System.Collections.IHashCodeProvider.GetHashCode(object x)
    {
      .override [mscorlib]System.Collections.IHashCodeProvider::GetHashCode
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public sequential sealed 'COR_FIELD_OFFSET'
    extends [mscorlib]System.ValueType
  {
    .field public unsigned int32 ridOfField
    .field public unsigned int32 ulOffset
  }
  .class public sealed CallingConventionFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.CallingConventionFlags ArgumentConvention = int32(0x00000007)
    .field static public literal valuetype System.Compiler.CallingConventionFlags C = int32(0x00000001)
    .field static public literal valuetype System.Compiler.CallingConventionFlags Default = int32(0x00000000)
    .field static public literal valuetype System.Compiler.CallingConventionFlags ExplicitThis = int32(0x00000040)
    .field static public literal valuetype System.Compiler.CallingConventionFlags FastCall = int32(0x00000004)
    .field static public literal valuetype System.Compiler.CallingConventionFlags Generic = int32(0x00000010)
    .field static public literal valuetype System.Compiler.CallingConventionFlags HasThis = int32(0x00000020)
    .field static public literal valuetype System.Compiler.CallingConventionFlags StandardCall = int32(0x00000002)
    .field static public literal valuetype System.Compiler.CallingConventionFlags ThisCall = int32(0x00000003)
    .field static public literal valuetype System.Compiler.CallingConventionFlags VarArg = int32(0x00000005)
  }
  .class public Catch
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block, class System.Compiler.Expression variable, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.Block Block
    .field public class System.Compiler.TypeNode Type
    .field public class System.Compiler.TypeNode TypeExpression
    .field public class System.Compiler.Expression Variable
  }
  .class public sealed CatchList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.CatchList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Catch get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Catch Current()
      {
        .get instance class System.Compiler.Catch System.Compiler.CatchList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Catch element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.CatchList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Catch get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Catch 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.CatchList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Catch Item(int32)
    {
      .get instance class System.Compiler.Catch System.Compiler.CatchList::get_Item(int32)
      .set instance void System.Compiler.CatchList::set_Item(int32, class System.Compiler.Catch)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.CatchList::get_Length()
    }
  }
  .class public Class
    extends System.Compiler.TypeNode
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module declaringModule, class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.TypeFlags 'flags', class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.Class baseClass, class System.Compiler.InterfaceList interfaces, class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Class get_BaseClass()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_BaseClass(class System.Compiler.Class 'value')
    {
      ret
    }
    .method public virtual hidebysig 
      instance void GetAbstractMethods(class System.Compiler.MethodList result)
    {
      ret
    }
    .method family hidebysig 
      instance bool AlreadyInList(class System.Compiler.MethodList list, class System.Compiler.Method 'method')
    {
      ret
    }
    .field public class System.Compiler.Class BaseClassExpression
    .field public bool IsAbstractSealedContainerForStatics
    .property instance class System.Compiler.Class BaseClass()
    {
      .get instance class System.Compiler.Class System.Compiler.Class::get_BaseClass()
      .set instance void System.Compiler.Class::set_BaseClass(class System.Compiler.Class)
    }
  }
  .class public ClassExpression
    extends System.Compiler.Class
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
  }
  .class public ClassParameter
    extends System.Compiler.Class
    implements System.Compiler.ITypeParameter
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance class System.Compiler.Member get_DeclaringMember()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_DeclaringMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance int32 get_ParameterListIndex()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_ParameterListIndex(int32 'value')
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance valuetype System.Compiler.TypeParameterFlags get_TypeParameterFlags()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsTemplateParameter()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance string GetFullUnmangledNameWithoutTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig 
      instance string GetFullUnmangledNameWithTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance class System.Compiler.Member DeclaringMember()
    {
      .get instance class System.Compiler.Member System.Compiler.ClassParameter::get_DeclaringMember()
      .set instance void System.Compiler.ClassParameter::set_DeclaringMember(class System.Compiler.Member)
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.ClassParameter::get_IsStructural()
    }
    .property instance bool IsTemplateParameter()
    {
      .get instance bool System.Compiler.ClassParameter::get_IsTemplateParameter()
    }
    .property instance int32 ParameterListIndex()
    {
      .get instance int32 System.Compiler.ClassParameter::get_ParameterListIndex()
      .set instance void System.Compiler.ClassParameter::set_ParameterListIndex(int32)
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.ClassParameter::get_StructuralElementTypes()
    }
    .property instance valuetype System.Compiler.TypeParameterFlags TypeParameterFlags()
    {
      .get instance valuetype System.Compiler.TypeParameterFlags System.Compiler.ClassParameter::get_TypeParameterFlags()
      .set instance void System.Compiler.ClassParameter::set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags)
    }
  }
  .class public ClosureClass
    extends System.Compiler.Class
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public CoerceTuple
    extends System.Compiler.ConstructTuple
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Expression OriginalTuple
    .field public class System.Compiler.Local Temp
  }
  .class public sealed CollectibleSourceText
    extends [mscorlib]System.Object
    implements System.Compiler.ISourceText
  {
    .method public hidebysig specialname 
      instance void .ctor(string filePath, int32 length)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.ISourceText.get_Length()
    {
      .override System.Compiler.ISourceText::get_Length
      ret
    }
    .method private final virtual hidebysig newslot 
      instance string System.Compiler.ISourceText.Substring(int32 startIndex, int32 length)
    {
      .override System.Compiler.ISourceText::Substring
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance char System.Compiler.ISourceText.get_Item(int32 index)
    {
      .override System.Compiler.ISourceText::get_Item
      ret
    }
    .method private final virtual hidebysig newslot 
      instance void System.Compiler.ISourceText.MakeCollectible()
    {
      .override System.Compiler.ISourceText::MakeCollectible
      ret
    }
    .property instance char System.Compiler.ISourceText.Item(int32)
    {
      .get instance char System.Compiler.CollectibleSourceText::System.Compiler.ISourceText.get_Item(int32)
    }
    .property instance int32 System.Compiler.ISourceText.Length()
    {
      .get instance int32 System.Compiler.CollectibleSourceText::System.Compiler.ISourceText.get_Length()
    }
  }
  .class public CollectionEnumerator
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Expression Collection
    .field public class System.Compiler.Method DefaultIndexerGetter
    .field public class System.Compiler.Expression ElementCoercion
    .field public class System.Compiler.Local ElementLocal
    .field public class System.Compiler.Method GetCurrent
    .field public class System.Compiler.Method GetEnumerator
    .field public class System.Compiler.Method LengthPropertyGetter
    .field public class System.Compiler.Method MoveNext
  }
  .class public Compilation
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module targetModule, class System.Compiler.CompilationUnitList compilationUnits, class [System]System.CodeDom.Compiler.CompilerParameters compilerParameters, class System.Compiler.Scope globalScope)
    {
      ret
    }
    .field public class System.Compiler.CompilationUnitList CompilationUnits
    .field public class [System]System.CodeDom.Compiler.CompilerParameters CompilerParameters
    .field public class System.Compiler.Scope GlobalScope
    .field public class System.Compiler.CompilationList ReferencedCompilations
    .field public class System.Compiler.Module TargetModule
  }
  .class public sealed CompilationList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.CompilationList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Compilation get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Compilation Current()
      {
        .get instance class System.Compiler.Compilation System.Compiler.CompilationList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Compilation[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Compilation element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.CompilationList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Compilation get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Compilation 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.CompilationList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Compilation Item(int32)
    {
      .get instance class System.Compiler.Compilation System.Compiler.CompilationList::get_Item(int32)
      .set instance void System.Compiler.CompilationList::set_Item(int32, class System.Compiler.Compilation)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.CompilationList::get_Length()
    }
  }
  .class public CompilationUnit
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name)
    {
      ret
    }
    .field public class System.Compiler.Compilation Compilation
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.NodeList Nodes
    .field public class [System]System.Collections.Specialized.StringDictionary PreprocessorDefinedSymbols
  }
  .class public sealed CompilationUnitList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.CompilationUnitList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.CompilationUnit get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.CompilationUnit Current()
      {
        .get instance class System.Compiler.CompilationUnit System.Compiler.CompilationUnitList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.CompilationUnit[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.CompilationUnit element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.CompilationUnitList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.CompilationUnit get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.CompilationUnit 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.CompilationUnitList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.CompilationUnit Item(int32)
    {
      .get instance class System.Compiler.CompilationUnit System.Compiler.CompilationUnitList::get_Item(int32)
      .set instance void System.Compiler.CompilationUnitList::set_Item(int32, class System.Compiler.CompilationUnit)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.CompilationUnitList::get_Length()
    }
  }
  .class public CompilationUnitSnippet
    extends System.Compiler.CompilationUnit
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.IParserFactory parserFactory, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Method ChangedMethod
    .field public int32 OriginalEndPosOfChangedMethod
    .field public class System.Compiler.IParserFactory ParserFactory
  }
  .class public sealed CompilationUnitSnippetList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.CompilationUnitSnippetList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.CompilationUnitSnippet get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.CompilationUnitSnippet Current()
      {
        .get instance class System.Compiler.CompilationUnitSnippet System.Compiler.CompilationUnitSnippetList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.CompilationUnitSnippet[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.CompilationUnitSnippet element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.CompilationUnitSnippetList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.CompilationUnitSnippet get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.CompilationUnitSnippet 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.CompilationUnitSnippetList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.CompilationUnitSnippet Item(int32)
    {
      .get instance class System.Compiler.CompilationUnitSnippet System.Compiler.CompilationUnitSnippetList::get_Item(int32)
      .set instance void System.Compiler.CompilationUnitSnippetList::set_Item(int32, class System.Compiler.CompilationUnitSnippet)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.CompilationUnitSnippetList::get_Length()
    }
  }
  .class public CompilerOptions
    extends [System]System.CodeDom.Compiler.CompilerParameters
  {
    .method public hidebysig specialname 
      instance class [System]System.Collections.Specialized.StringCollection get_EmbeddedResources()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class [System]System.Collections.Specialized.StringCollection get_LinkedResources()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.CompilerOptions source)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetOptionHelp()
    {
      ret
    }
    .field public class System.Compiler.StringList AdditionalSearchPaths
    .field public class [System]System.Collections.Specialized.StringCollection AliasesForReferencedAssemblies
    .field public bool AllowUnsafeCode
    .field public string AssemblyKeyFile
    .field public string AssemblyKeyName
    .field public int64 BaseAddress
    .field public string BugReportFileName
    .field public bool CheckedArithmetic
    .field public object CodePage
    .field public bool CompileAndExecute
    .field public class System.Compiler.StringList DefinedPreProcessorSymbols
    .field public bool DelaySign
    .field public bool DisplayCommandLineHelp
    .field public bool EmitManifest
    .field public bool EncodeOutputInUTF8
    .field public int32 FileAlignment
    .field public bool FullyQualifyPaths
    .field public bool HeuristicReferenceResolution
    .field public bool IncrementalCompile
    .field public bool MayLockFiles
    .field public valuetype System.Compiler.ModuleKindFlags ModuleKind
    .field public bool NoStandardLibrary
    .field public bool Optimize
    .field public string OutputPath
    .field public bool PDBOnly
    .field public string RecursiveWildcard
    .field public class System.Compiler.StringList ReferencedModules
    .field public string RootNamespace
    .field public string ShadowedAssembly
    .field public class System.Compiler.Int32List SpecificWarningsNotToTreatAsErrors
    .field public class System.Compiler.Int32List SpecificWarningsToTreatAsErrors
    .field public string StandardLibraryLocation
    .field public bool SuppressLogo
    .field public class System.Compiler.Int32List SuppressedWarnings
    .field public class [mscorlib]System.AppDomain TargetAppDomain
    .field public valuetype System.Compiler.TargetInformation TargetInformation
    .field public valuetype System.Compiler.PlatformType TargetPlatform
    .field public string TargetPlatformLocation
    .field public valuetype System.Compiler.ProcessorType TargetProcessor
    .field public bool UseStandardConfigFile
    .field public object UserLocaleId
    .field public string Win32Icon
    .field public string XMLDocFileName
    .property instance class [System]System.Collections.Specialized.StringCollection EmbeddedResources()
    {
      .get instance class [System]System.Collections.Specialized.StringCollection System.Compiler.CompilerOptions::get_EmbeddedResources()
    }
    .property instance class [System]System.Collections.Specialized.StringCollection LinkedResources()
    {
      .get instance class [System]System.Collections.Specialized.StringCollection System.Compiler.CompilerOptions::get_LinkedResources()
    }
  }
  .class public abstract Composer
    extends [mscorlib]System.Object
  {
    .method public virtual hidebysig newslot abstract 
      instance class System.Compiler.Node Compose(class System.Compiler.Node node, class System.Compiler.Composer context, bool hasContextReference, class System.Compiler.Class scope)
    {
    }
    .method family hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public initonly class System.Compiler.Composer Null
  }
  .class public Composition
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression exp, class System.Compiler.Composer composer, class System.Compiler.Class scope)
    {
      ret
    }
    .field public class System.Compiler.Composer Composer
    .field public class System.Compiler.Expression Expression
    .field public class System.Compiler.Class Scope
  }
  .class public Comprehension
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_IsDisplay()
    {
      ret
    }
    .field public class System.Compiler.Method AddMethod
    .field public class System.Compiler.ExpressionList BindingsAndFilters
    .field public class System.Compiler.ExpressionList Elements
    .field public valuetype System.Compiler.ComprehensionMode Mode
    .field public class System.Compiler.Node nonEnumerableTypeCtor
    .property instance bool IsDisplay()
    {
      .get instance bool System.Compiler.Comprehension::get_IsDisplay()
    }
  }
  .class public ComprehensionBinding
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.TypeNode AsTargetVariableType
    .field public class System.Compiler.TypeNode AsTargetVariableTypeExpression
    .field public valuetype System.Compiler.ComprehensionBindingMode Mode
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariables
    .field public class System.Compiler.Expression SourceEnumerable
    .field public class System.Compiler.Expression TargetVariable
    .field public class System.Compiler.TypeNode TargetVariableType
    .field public class System.Compiler.TypeNode TargetVariableTypeExpression
  }
  .class public sealed ComprehensionBindingMode
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.ComprehensionBindingMode Gets = int32(0x00000001)
    .field static public literal valuetype System.Compiler.ComprehensionBindingMode In = int32(0x00000000)
  }
  .class public sealed ComprehensionMode
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.ComprehensionMode Comprehension = int32(0x00000001)
    .field static public literal valuetype System.Compiler.ComprehensionMode Reduction = int32(0x00000000)
  }
  .class public Construct
    extends System.Compiler.NaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression constructor, class System.Compiler.ExpressionList arguments)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression constructor, class System.Compiler.ExpressionList arguments, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression constructor, class System.Compiler.ExpressionList arguments, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.Expression Constructor
  }
  .class public ConstructArray
    extends System.Compiler.NaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.ExpressionList sizes, class System.Compiler.ExpressionList initializers)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.ExpressionList initializers)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, int32 rank, class System.Compiler.ExpressionList initializers)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
    .field public class System.Compiler.TypeNode ElementTypeExpression
    .field public class System.Compiler.ExpressionList Initializers
    .field public int32 Rank
  }
  .class public ConstructDelegate
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode delegateType, class System.Compiler.Expression targetObject, class System.Compiler.Identifier methodName)
    {
      ret
    }
    .field public class System.Compiler.TypeNode DelegateType
    .field public class System.Compiler.TypeNode DelegateTypeExpression
    .field public class System.Compiler.Identifier MethodName
    .field public class System.Compiler.Expression TargetObject
  }
  .class public ConstructFlexArray
    extends System.Compiler.NaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.ExpressionList sizes, class System.Compiler.ExpressionList initializers)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
    .field public class System.Compiler.TypeNode ElementTypeExpression
    .field public class System.Compiler.ExpressionList Initializers
  }
  .class public ConstructIterator
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Class state, class System.Compiler.Block body, class System.Compiler.TypeNode elementType, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.TypeNode ElementType
    .field public class System.Compiler.Class State
  }
  .class public ConstructTuple
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.FieldList Fields
  }
  .class public Continue
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Literal level)
    {
      ret
    }
    .field public class System.Compiler.Literal Level
  }
  .class public CurrentClosure
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method 'method', class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method 'method', class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Method Method
  }
  .class public DelegateNode
    extends System.Compiler.TypeNode
  {
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.ParameterList get_Parameters()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Parameters(class System.Compiler.ParameterList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_ReturnType()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ReturnType(class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module declaringModule, class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.TypeFlags 'flags', class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.TypeNode returnType, class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void ProvideMembers()
    {
      ret
    }
    .field public class System.Compiler.TypeNode ReturnTypeExpression
    .field family class System.Compiler.ParameterList parameters
    .field family class System.Compiler.TypeNode returnType
    .property instance class System.Compiler.ParameterList Parameters()
    {
      .get instance class System.Compiler.ParameterList System.Compiler.DelegateNode::get_Parameters()
      .set instance void System.Compiler.DelegateNode::set_Parameters(class System.Compiler.ParameterList)
    }
    .property instance class System.Compiler.TypeNode ReturnType()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.DelegateNode::get_ReturnType()
      .set instance void System.Compiler.DelegateNode::set_ReturnType(class System.Compiler.TypeNode)
    }
  }
  .class public DoWhile
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Condition
  }
  .class public Document
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string name, int32 lineNumber, string text, valuetype [mscorlib]System.Guid documentType, valuetype [mscorlib]System.Guid language, valuetype [mscorlib]System.Guid languageVendor)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string name, int32 lineNumber, class System.Compiler.DocumentText text, valuetype [mscorlib]System.Guid documentType, valuetype [mscorlib]System.Guid language, valuetype [mscorlib]System.Guid languageVendor)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance int32 GetLine(int32 position)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance int32 GetColumn(int32 position)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void GetOffsets(int32 startLine, int32 startColumn, int32 endLine, int32 endColumn, [out] int32& startPos, [out] int32& endPos)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string Substring(int32 position, int32 length)
    {
      ret
    }
    .method family hidebysig 
      instance int32 GetLineCount(string text)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void InsertOrDeleteLines(int32 offset, int32 lineCount)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_UniqueKey()
    {
      ret
    }
    .field public valuetype [mscorlib]System.Guid DocumentType
    .field public bool Hidden
    .field public valuetype [mscorlib]System.Guid Language
    .field public valuetype [mscorlib]System.Guid LanguageVendor
    .field public int32 LineNumber
    .field public string Name
    .field public class System.Compiler.DocumentText Text
    .property instance int32 UniqueKey()
    {
      .get instance int32 System.Compiler.Document::get_UniqueKey()
    }
  }
  .class public sealed DocumentText
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .method public hidebysig specialname 
      instance void .ctor(string source)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ISourceText textProvider)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ISourceTextBuffer textProvider)
    {
      ret
    }
    .method public hidebysig 
      instance bool Equals(string str, int32 position, int32 length)
    {
      ret
    }
    .method public hidebysig 
      instance bool Equals(int32 offset, class System.Compiler.DocumentText text, int32 textOffset, int32 length)
    {
      ret
    }
    .method public hidebysig 
      instance string Substring(int32 position, int32 length)
    {
      ret
    }
    .method public hidebysig specialname 
      instance char get_Item(int32 position)
    {
      ret
    }
    .field public unsigned int8* AsciiStringPtr
    .field public int32 Length
    .field public string Source
    .field public class System.Compiler.ISourceText TextProvider
    .property instance char Item(int32)
    {
      .get instance char System.Compiler.DocumentText::get_Item(int32)
    }
  }
  .class public DocumentWithPrecomputedLineNumbers
    extends System.Compiler.Document
  {
    .method public hidebysig specialname 
      instance void .ctor(string filename, int32 startLine, int32 startCol, int32 endLine, int32 endCol)
    {
      ret
    }
    .method public virtual hidebysig 
      instance int32 GetColumn(int32 offset)
    {
      ret
    }
    .method public virtual hidebysig 
      instance int32 GetLine(int32 offset)
    {
      ret
    }
  }
  .class public Duplicator
    extends System.Compiler.StandardVisitor
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module module, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Visitor callingVisitor)
    {
      ret
    }
    .method public virtual hidebysig 
      instance void TransferStateTo(class System.Compiler.Visitor targetVisitor)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.NodeList nodes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.Namespace nspace)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.NamespaceList namespaces)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void FindTypesToBeDuplicated(class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Node Visit(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitAddressDereference(class System.Compiler.AddressDereference addr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AliasDefinition VisitAliasDefinition(class System.Compiler.AliasDefinition aliasDefinition)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AliasDefinitionList VisitAliasDefinitionList(class System.Compiler.AliasDefinitionList aliasDefinitions)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitAnonymousNestedFunction(class System.Compiler.AnonymousNestedFunction func)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitApplyToAll(class System.Compiler.ApplyToAll applyToAll)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AssemblyNode VisitAssembly(class System.Compiler.AssemblyNode 'assembly')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AssemblyReference VisitAssemblyReference(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAssertion(class System.Compiler.Assertion assertion)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAssumption(class System.Compiler.Assumption Assumption)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitAssignmentExpression(class System.Compiler.AssignmentExpression assignment)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAssignmentStatement(class System.Compiler.AssignmentStatement assignment)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitAttributeConstructor(class System.Compiler.AttributeNode attribute)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AttributeNode VisitAttributeNode(class System.Compiler.AttributeNode attribute)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.AttributeList VisitAttributeList(class System.Compiler.AttributeList attributes)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitBase(class System.Compiler.Base Base)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitBinaryExpression(class System.Compiler.BinaryExpression binaryExpression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Block VisitBlock(class System.Compiler.Block block)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitBlockExpression(class System.Compiler.BlockExpression blockExpression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.BlockList VisitBlockList(class System.Compiler.BlockList blockList)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitBranch(class System.Compiler.Branch branch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitCatch(class System.Compiler.Catch Catch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.CatchList VisitCatchList(class System.Compiler.CatchList catchers)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitCoerceTuple(class System.Compiler.CoerceTuple coerceTuple)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.CollectionEnumerator VisitCollectionEnumerator(class System.Compiler.CollectionEnumerator ce)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Compilation VisitCompilation(class System.Compiler.Compilation compilation)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.CompilationUnit VisitCompilationUnit(class System.Compiler.CompilationUnit cUnit)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.CompilationUnit VisitCompilationUnitSnippet(class System.Compiler.CompilationUnitSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Node VisitComposition(class System.Compiler.Composition comp)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstruct(class System.Compiler.Construct cons)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstructArray(class System.Compiler.ConstructArray consArr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstructDelegate(class System.Compiler.ConstructDelegate consDelegate)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstructFlexArray(class System.Compiler.ConstructFlexArray consArr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstructIterator(class System.Compiler.ConstructIterator consIterator)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstructTuple(class System.Compiler.ConstructTuple consTuple)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitContinue(class System.Compiler.Continue Continue)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitCurrentClosure(class System.Compiler.CurrentClosure currentClosure)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.DelegateNode VisitDelegateNode(class System.Compiler.DelegateNode delegateNode)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitDoWhile(class System.Compiler.DoWhile doWhile)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitEndFilter(class System.Compiler.EndFilter endFilter)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitEndFinally(class System.Compiler.EndFinally endFinally)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Event VisitEvent(class System.Compiler.Event evnt)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ExceptionHandler VisitExceptionHandler(class System.Compiler.ExceptionHandler 'handler')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ExceptionHandlerList VisitExceptionHandlerList(class System.Compiler.ExceptionHandlerList handlers)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitExit(class System.Compiler.Exit exit)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitExpose(class System.Compiler.Expose Expose)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitExpression(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ExpressionList VisitExpressionList(class System.Compiler.ExpressionList expressions)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitExpressionSnippet(class System.Compiler.ExpressionSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitExpressionStatement(class System.Compiler.ExpressionStatement statement)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFaultHandler(class System.Compiler.FaultHandler faultHandler)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.FaultHandlerList VisitFaultHandlerList(class System.Compiler.FaultHandlerList faultHandlers)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Field VisitField(class System.Compiler.Field 'field')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Block VisitFieldInitializerBlock(class System.Compiler.FieldInitializerBlock block)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.FieldList VisitFieldList(class System.Compiler.FieldList fields)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFilter(class System.Compiler.Filter 'filter')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.FilterList VisitFilterList(class System.Compiler.FilterList filters)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFinally(class System.Compiler.Finally Finally)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFixed(class System.Compiler.Fixed Fixed)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFor(class System.Compiler.For For)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitForEach(class System.Compiler.ForEach forEach)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitFunctionDeclaration(class System.Compiler.FunctionDeclaration functionDeclaration)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitGoto(class System.Compiler.Goto Goto)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitGotoCase(class System.Compiler.GotoCase gotoCase)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitIdentifier(class System.Compiler.Identifier identifier)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitIf(class System.Compiler.If If)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitImplicitThis(class System.Compiler.ImplicitThis implicitThis)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitIndexer(class System.Compiler.Indexer indexer)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.InterfaceList VisitInterfaceReferenceList(class System.Compiler.InterfaceList interfaceReferences)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitLabeledStatement(class System.Compiler.LabeledStatement lStatement)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitLiteral(class System.Compiler.Literal 'literal')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitLocal(class System.Compiler.Local local)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.LocalDeclaration VisitLocalDeclaration(class System.Compiler.LocalDeclaration localDeclaration)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.LocalDeclarationList VisitLocalDeclarationList(class System.Compiler.LocalDeclarationList localDeclarations)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitLocalDeclarationsStatement(class System.Compiler.LocalDeclarationsStatement localDeclarations)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitLock(class System.Compiler.Lock Lock)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAcquire(class System.Compiler.Acquire acquire)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitResourceUse(class System.Compiler.ResourceUse resourceUse)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitLRExpression(class System.Compiler.LRExpression expr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitMemberBinding(class System.Compiler.MemberBinding memberBinding)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.MemberList VisitMemberList(class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Member VisitMemberReference(class System.Compiler.Member member)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MemberList VisitMemberReferenceList(class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Method VisitMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitMethodCall(class System.Compiler.MethodCall 'call')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MethodList VisitMethodList(class System.Compiler.MethodList methods)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MethodList VisitMethodReferenceList(class System.Compiler.MethodList methods)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Module VisitModule(class System.Compiler.Module module)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Module VisitModuleReference(class System.Compiler.Module module)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ModuleReference VisitModuleReference(class System.Compiler.ModuleReference moduleReference)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitNameBinding(class System.Compiler.NameBinding nameBinding)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitNamedArgument(class System.Compiler.NamedArgument namedArgument)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Namespace VisitNamespace(class System.Compiler.Namespace nspace)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.NamespaceList VisitNamespaceList(class System.Compiler.NamespaceList namespaces)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.NodeList VisitNodeList(class System.Compiler.NodeList nodes)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitParameter(class System.Compiler.Parameter parameter)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ParameterList VisitParameterList(class System.Compiler.ParameterList parameterList)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitPrefixExpression(class System.Compiler.PrefixExpression pExpr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitPostfixExpression(class System.Compiler.PostfixExpression pExpr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Property VisitProperty(class System.Compiler.Property 'property')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitComprehension(class System.Compiler.Comprehension Comprehension)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ComprehensionBinding VisitComprehensionBinding(class System.Compiler.ComprehensionBinding comprehensionBinding)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitQualifiedIdentifier(class System.Compiler.QualifiedIdentifier qualifiedIdentifier)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitRepeat(class System.Compiler.Repeat repeat)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitReturn(class System.Compiler.Return Return)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.SecurityAttribute VisitSecurityAttribute(class System.Compiler.SecurityAttribute attribute)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.SecurityAttributeList VisitSecurityAttributeList(class System.Compiler.SecurityAttributeList attributes)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitSetterValue(class System.Compiler.SetterValue 'value')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.StatementList VisitStatementList(class System.Compiler.StatementList statements)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.StatementSnippet VisitStatementSnippet(class System.Compiler.StatementSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitSwitch(class System.Compiler.Switch Switch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.SwitchCase VisitSwitchCase(class System.Compiler.SwitchCase switchCase)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.SwitchCaseList VisitSwitchCaseList(class System.Compiler.SwitchCaseList switchCases)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitSwitchInstruction(class System.Compiler.SwitchInstruction switchInstruction)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitTypeswitch(class System.Compiler.Typeswitch Typeswitch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeswitchCase VisitTypeswitchCase(class System.Compiler.TypeswitchCase typeswitchCase)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeswitchCaseList VisitTypeswitchCaseList(class System.Compiler.TypeswitchCaseList typeswitchCases)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitTernaryExpression(class System.Compiler.TernaryExpression expression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitThis(class System.Compiler.This This)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitThrow(class System.Compiler.Throw Throw)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitTry(class System.Compiler.Try Try)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeModifier VisitTypeModifier(class System.Compiler.TypeModifier typeModifier)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeNode(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNodeList VisitTypeNodeList(class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeParameter(class System.Compiler.TypeNode typeParameter)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNodeList VisitTypeParameterList(class System.Compiler.TypeNodeList typeParameters)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeReference(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNodeList VisitTypeReferenceList(class System.Compiler.TypeNodeList typeReferences)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitUnaryExpression(class System.Compiler.UnaryExpression unaryExpression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitVariableDeclaration(class System.Compiler.VariableDeclaration variableDeclaration)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.UsedNamespace VisitUsedNamespace(class System.Compiler.UsedNamespace usedNamespace)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.UsedNamespaceList VisitUsedNamespaceList(class System.Compiler.UsedNamespaceList usedNspaces)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitWhile(class System.Compiler.While While)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitYield(class System.Compiler.Yield Yield)
    {
      ret
    }
    .field static public class System.Compiler.Block DummyBody
    .field public class System.Compiler.TrivialHashtable DuplicateFor
    .field public class System.Compiler.TypeNode OriginalTargetType
    .field public bool RecordOriginalAsTemplate
    .field public bool SkipBodies
    .field public class System.Compiler.Module TargetModule
    .field public class System.Compiler.TypeNode TargetType
    .field public class System.Compiler.TrivialHashtable TypesToBeDuplicated
  }
  .class public EndFilter
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression 'value')
    {
      ret
    }
    .field public class System.Compiler.Expression Value
  }
  .class public EndFinally
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public EnumNode
    extends System.Compiler.TypeNode
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module declaringModule, class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.TypeFlags typeAttributes, class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.InterfaceList interfaces, class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsUnmanaged()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_UnderlyingType()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_UnderlyingType(class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .field public class System.Compiler.TypeNode UnderlyingTypeExpression
    .field family class System.Compiler.TypeNode underlyingType
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.EnumNode::get_IsUnmanaged()
    }
    .property instance class System.Compiler.TypeNode UnderlyingType()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.EnumNode::get_UnderlyingType()
      .set instance void System.Compiler.EnumNode::set_UnderlyingType(class System.Compiler.TypeNode)
    }
  }
  .class public abstract ErrorNode
    extends System.Compiler.Node
  {
    .method family hidebysig specialname 
      instance void .ctor(int32 code, string[] messageParameters)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetErrorNumber()
    {
      ret
    }
    .method public hidebysig 
      instance string GetMessage()
    {
      ret
    }
    .method public virtual hidebysig newslot abstract 
      instance string GetMessage(class [mscorlib]System.Globalization.CultureInfo culture)
    {
    }
    .method public virtual hidebysig newslot 
      instance string GetMessage(string key, class [mscorlib]System.Resources.ResourceManager rm, class [mscorlib]System.Globalization.CultureInfo culture)
    {
      ret
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance int32 get_Severity()
    {
    }
    .field public int32 Code
    .field public string[] MessageParameters
    .property instance int32 Severity()
    {
      .get instance int32 System.Compiler.ErrorNode::get_Severity()
    }
  }
  .class public sealed ErrorNodeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ErrorNodeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.ErrorNode get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.ErrorNode Current()
      {
        .get instance class System.Compiler.ErrorNode System.Compiler.ErrorNodeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.ErrorNode element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ErrorNode get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.ErrorNode 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ErrorNodeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.ErrorNode Item(int32)
    {
      .get instance class System.Compiler.ErrorNode System.Compiler.ErrorNodeList::get_Item(int32)
      .set instance void System.Compiler.ErrorNodeList::set_Item(int32, class System.Compiler.ErrorNode)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ErrorNodeList::get_Length()
    }
  }
  .class public Event
    extends System.Compiler.Member
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.EventFlags 'flags', class System.Compiler.Identifier name, class System.Compiler.Method handlerAdder, class System.Compiler.Method handlerCaller, class System.Compiler.Method handlerRemover, class System.Compiler.TypeNode handlerType)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method family virtual hidebysig 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Event GetEvent(class [mscorlib]System.Reflection.EventInfo eventInfo)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.EventInfo GetEventInfo()
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_IsAbstract()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_IsVirtual()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.Member get_OverriddenMember()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_OverriddenMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Event get_OverriddenEvent()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_OverriddenEvent(class System.Compiler.Event 'value')
    {
      ret
    }
    .field public class System.Compiler.Field BackingField
    .field public valuetype System.Compiler.EventFlags Flags
    .field public class System.Compiler.Method HandlerAdder
    .field public class System.Compiler.Method HandlerCaller
    .field public valuetype System.Compiler.MethodFlags HandlerFlags
    .field public class System.Compiler.Method HandlerRemover
    .field public class System.Compiler.TypeNode HandlerType
    .field public class System.Compiler.TypeNode HandlerTypeExpression
    .field public class System.Compiler.TypeNodeList ImplementedTypeExpressions
    .field public class System.Compiler.TypeNodeList ImplementedTypes
    .field public class System.Compiler.Expression InitialHandler
    .field static public initonly class System.Compiler.Event NotSpecified
    .field public class System.Compiler.MethodList OtherMethods
    .field family class [mscorlib]System.Reflection.EventInfo eventInfo
    .field family string fullName
    .field family class System.Compiler.Property overriddenEvent
    .property instance string FullName()
    {
      .get instance string System.Compiler.Event::get_FullName()
    }
    .property instance bool IsAbstract()
    {
      .get instance bool System.Compiler.Event::get_IsAbstract()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Event::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Event::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Event::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Event::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Event::get_IsFamilyOrAssembly()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Event::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Event::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Event::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Event::get_IsStatic()
    }
    .property instance bool IsVirtual()
    {
      .get instance bool System.Compiler.Event::get_IsVirtual()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Event::get_IsVisibleOutsideAssembly()
    }
    .property instance class System.Compiler.Event OverriddenEvent()
    {
      .get instance class System.Compiler.Event System.Compiler.Event::get_OverriddenEvent()
      .set instance void System.Compiler.Event::set_OverriddenEvent(class System.Compiler.Event)
    }
    .property instance class System.Compiler.Member OverriddenMember()
    {
      .get instance class System.Compiler.Member System.Compiler.Event::get_OverriddenMember()
      .set instance void System.Compiler.Event::set_OverriddenMember(class System.Compiler.Member)
    }
  }
  .class public sealed EventFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.EventFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.EventFlags RTSpecialName = int32(0x00000400)
    .field static public literal valuetype System.Compiler.EventFlags ReservedMask = int32(0x00000400)
    .field static public literal valuetype System.Compiler.EventFlags SpecialName = int32(0x00000200)
  }
  .class public sealed EventList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.EventList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Event get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Event Current()
      {
        .get instance class System.Compiler.Event System.Compiler.EventList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Event element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Event get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Event 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.EventList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Event Item(int32)
    {
      .get instance class System.Compiler.Event System.Compiler.EventList::get_Item(int32)
      .set instance void System.Compiler.EventList::set_Item(int32, class System.Compiler.Event)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.EventList::get_Length()
    }
  }
  .class public ExceptionHandler
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Block BlockAfterHandlerEnd
    .field public class System.Compiler.Block BlockAfterTryEnd
    .field public class System.Compiler.Block FilterExpression
    .field public class System.Compiler.TypeNode FilterType
    .field public class System.Compiler.Block HandlerStartBlock
    .field public valuetype System.Compiler.NodeType HandlerType
    .field public class System.Compiler.Block TryStartBlock
  }
  .class public sealed ExceptionHandlerList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ExceptionHandlerList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.ExceptionHandler get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.ExceptionHandler Current()
      {
        .get instance class System.Compiler.ExceptionHandler System.Compiler.ExceptionHandlerList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.ExceptionHandler element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ExceptionHandlerList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ExceptionHandler get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.ExceptionHandler 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ExceptionHandlerList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.ExceptionHandler Item(int32)
    {
      .get instance class System.Compiler.ExceptionHandler System.Compiler.ExceptionHandlerList::get_Item(int32)
      .set instance void System.Compiler.ExceptionHandlerList::set_Item(int32, class System.Compiler.ExceptionHandler)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ExceptionHandlerList::get_Length()
    }
  }
  .class public Exit
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Literal level)
    {
      ret
    }
    .field public class System.Compiler.Literal Level
  }
  .class public Expose
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Instance
  }
  .class public Expression
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.TypeNode Type
  }
  .class public sealed ExpressionList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ExpressionList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Expression get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Expression Current()
      {
        .get instance class System.Compiler.Expression System.Compiler.ExpressionList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Expression element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ExpressionList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Expression get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Expression 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ExpressionList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Expression Item(int32)
    {
      .get instance class System.Compiler.Expression System.Compiler.ExpressionList::get_Item(int32)
      .set instance void System.Compiler.ExpressionList::set_Item(int32, class System.Compiler.Expression)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ExpressionList::get_Length()
      .set instance void System.Compiler.ExpressionList::set_Length(int32)
    }
  }
  .class public ExpressionSnippet
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.IParserFactory parserFactory, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.IParserFactory ParserFactory
  }
  .class public ExpressionStatement
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
  }
  .class public FaultHandler
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block)
    {
      ret
    }
    .field public class System.Compiler.Block Block
  }
  .class public sealed FaultHandlerList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.FaultHandlerList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.FaultHandler get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.FaultHandler Current()
      {
        .get instance class System.Compiler.FaultHandler System.Compiler.FaultHandlerList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 n)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.FaultHandler element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.FaultHandlerList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.FaultHandler get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.FaultHandler 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.FaultHandlerList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.FaultHandler Item(int32)
    {
      .get instance class System.Compiler.FaultHandler System.Compiler.FaultHandlerList::get_Item(int32)
      .set instance void System.Compiler.FaultHandlerList::set_Item(int32, class System.Compiler.FaultHandler)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.FaultHandlerList::get_Length()
    }
  }
  .class public Field
    extends System.Compiler.Member
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.FieldFlags 'flags', class System.Compiler.Identifier name, class System.Compiler.TypeNode Type, class System.Compiler.Literal defaultValue)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method family virtual hidebysig 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Field GetField(class [mscorlib]System.Reflection.FieldInfo fieldInfo)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.FieldInfo GetFieldInfo()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsLiteral()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsInitOnly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance object GetValue(object targetObject)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Literal GetValue(class System.Compiler.Literal targetObject)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void SetValue(object targetObject, object 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void SetValue(class System.Compiler.Literal targetObject, class System.Compiler.Literal 'value')
    {
      ret
    }
    .field public class System.Compiler.Literal DefaultValue
    .field public valuetype System.Compiler.FieldFlags Flags
    .field public class System.Compiler.InterfaceList ImplementedInterfaceExpressions
    .field public class System.Compiler.InterfaceList ImplementedInterfaces
    .field public unsigned int8[] InitialData
    .field public class System.Compiler.Expression Initializer
    .field public bool IsVolatile
    .field public class System.Compiler.MarshallingInformation MarshallingInformation
    .field public int32 Offset
    .field public valuetype System.Compiler.PESection Section
    .field public class System.Compiler.TypeNode Type
    .field public class System.Compiler.TypeNode TypeExpression
    .field family class [mscorlib]System.Reflection.FieldInfo fieldInfo
    .field family string fullName
    .property instance string FullName()
    {
      .get instance string System.Compiler.Field::get_FullName()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Field::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Field::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Field::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Field::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Field::get_IsFamilyOrAssembly()
    }
    .property instance bool IsInitOnly()
    {
      .get instance bool System.Compiler.Field::get_IsInitOnly()
    }
    .property instance bool IsLiteral()
    {
      .get instance bool System.Compiler.Field::get_IsLiteral()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Field::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Field::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Field::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Field::get_IsStatic()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Field::get_IsVisibleOutsideAssembly()
    }
  }
  .class public sealed FieldFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.FieldFlags Assembly = int32(0x00000003)
    .field static public literal valuetype System.Compiler.FieldFlags CompilerControlled = int32(0x00000000)
    .field static public literal valuetype System.Compiler.FieldFlags FamANDAssem = int32(0x00000002)
    .field static public literal valuetype System.Compiler.FieldFlags FamORAssem = int32(0x00000005)
    .field static public literal valuetype System.Compiler.FieldFlags Family = int32(0x00000004)
    .field static public literal valuetype System.Compiler.FieldFlags FieldAccessMask = int32(0x00000007)
    .field static public literal valuetype System.Compiler.FieldFlags HasDefault = int32(0x00008000)
    .field static public literal valuetype System.Compiler.FieldFlags HasFieldMarshal = int32(0x00001000)
    .field static public literal valuetype System.Compiler.FieldFlags HasFieldRVA = int32(0x00000100)
    .field static public literal valuetype System.Compiler.FieldFlags InitOnly = int32(0x00000020)
    .field static public literal valuetype System.Compiler.FieldFlags Literal = int32(0x00000040)
    .field static public literal valuetype System.Compiler.FieldFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.FieldFlags NotSerialized = int32(0x00000080)
    .field static public literal valuetype System.Compiler.FieldFlags PinvokeImpl = int32(0x00002000)
    .field static public literal valuetype System.Compiler.FieldFlags Private = int32(0x00000001)
    .field static public literal valuetype System.Compiler.FieldFlags Public = int32(0x00000006)
    .field static public literal valuetype System.Compiler.FieldFlags RTSpecialName = int32(0x00000400)
    .field static public literal valuetype System.Compiler.FieldFlags ReservedMask = int32(0x00009500)
    .field static public literal valuetype System.Compiler.FieldFlags SpecialName = int32(0x00000200)
    .field static public literal valuetype System.Compiler.FieldFlags Static = int32(0x00000010)
  }
  .class public FieldInitializerBlock
    extends System.Compiler.Block
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode 'type', bool isStatic)
    {
      ret
    }
    .field public bool IsStatic
    .field public class System.Compiler.TypeNode Type
  }
  .class public sealed FieldList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.FieldList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Field get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Field Current()
      {
        .get instance class System.Compiler.Field System.Compiler.FieldList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Field[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Field element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.FieldList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Field get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Field 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.FieldList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Field Item(int32)
    {
      .get instance class System.Compiler.Field System.Compiler.FieldList::get_Item(int32)
      .set instance void System.Compiler.FieldList::set_Item(int32, class System.Compiler.Field)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.FieldList::get_Length()
    }
  }
  .class public sealed FileFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.FileFlags ContainsMetaData = int32(0x00000000)
    .field static public literal valuetype System.Compiler.FileFlags ContainsNoMetaData = int32(0x00000001)
  }
  .class public Filter
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block, class System.Compiler.Expression expression)
    {
      ret
    }
    .field public class System.Compiler.Block Block
    .field public class System.Compiler.Expression Expression
  }
  .class public sealed FilterList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.FilterList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Filter get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Filter Current()
      {
        .get instance class System.Compiler.Filter System.Compiler.FilterList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Filter element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.FilterList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Filter get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Filter 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.FilterList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Filter Item(int32)
    {
      .get instance class System.Compiler.Filter System.Compiler.FilterList::get_Item(int32)
      .set instance void System.Compiler.FilterList::set_Item(int32, class System.Compiler.Filter)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.FilterList::get_Length()
    }
  }
  .class public Finally
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block block)
    {
      ret
    }
    .field public class System.Compiler.Block Block
  }
  .class public Fixed
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Statement Declarators
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariables
  }
  .class public FlexArrayTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public For
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.StatementList initializer, class System.Compiler.Expression condition, class System.Compiler.StatementList incrementer, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Condition
    .field public class System.Compiler.StatementList Incrementer
    .field public class System.Compiler.StatementList Initializer
  }
  .class public ForEach
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode targetVariableType, class System.Compiler.Expression targetVariable, class System.Compiler.Expression sourceEnumerable, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariables
    .field public class System.Compiler.Expression SourceEnumerable
    .field public class System.Compiler.Expression TargetVariable
    .field public class System.Compiler.TypeNode TargetVariableType
    .field public class System.Compiler.TypeNode TargetVariableTypeExpression
  }
  .class public FunctionDeclaration
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.ParameterList parameters, class System.Compiler.TypeNode returnType, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Method Method
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.ParameterList Parameters
    .field public class System.Compiler.TypeNode ReturnType
    .field public class System.Compiler.TypeNode ReturnTypeExpression
  }
  .class public FunctionPointer
    extends System.Compiler.TypeNode
  {
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.FunctionPointer For(class System.Compiler.TypeNodeList parameterTypes, class System.Compiler.TypeNode returnType)
    {
      ret
    }
    .field public valuetype System.Compiler.CallingConventionFlags CallingConvention
    .field public class System.Compiler.TypeNodeList ParameterTypes
    .field public class System.Compiler.TypeNode ReturnType
    .field public int32 VarArgStart
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.FunctionPointer::get_IsStatic()
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.FunctionPointer::get_IsStructural()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.FunctionPointer::get_StructuralElementTypes()
    }
  }
  .class public FunctionType
    extends System.Compiler.DelegateNode
  {
    .method public static hidebysig 
      class System.Compiler.FunctionType For(class System.Compiler.TypeNode returnType, class System.Compiler.ParameterList parameters, class System.Compiler.TypeNode referringType)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.FunctionType::get_IsStructural()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.FunctionType::get_StructuralElementTypes()
    }
  }
  .class public FunctionTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode returnType, class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode returnType, class System.Compiler.ParameterList parameters, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.ParameterList Parameters
    .field public class System.Compiler.TypeNode ReturnType
  }
  .class public GlobalAssemblyCache
    extends [mscorlib]System.Object
  {
    .method public static hidebysig 
      bool Contains(class [System]System.Uri codeBaseUri)
    {
      ret
    }
    .method public static hidebysig 
      string GetLocation(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public Goto
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier targetLabel)
    {
      ret
    }
    .field public class System.Compiler.Identifier TargetLabel
  }
  .class public GotoCase
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression caseLabel)
    {
      ret
    }
    .field public class System.Compiler.Expression CaseLabel
  }
  .class public interface abstract import IMetaDataEmit
  {
    .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('BA3FEE4C-ECB9-4e41-83B7-183FA41CD859') }
    .custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
    .method public virtual hidebysig newslot abstract 
      instance void SetModuleProps(string szName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void Save(string szFile, unsigned int32 dwSaveFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SaveToStream(void* pIStream, unsigned int32 dwSaveFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetSaveSize(unsigned int32 fSave)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineTypeDef(char* szTypeDef, unsigned int32 dwTypeDefFlags, unsigned int32 tkExtends, unsigned int32* rtkImplements)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineNestedType(char* szTypeDef, unsigned int32 dwTypeDefFlags, unsigned int32 tkExtends, unsigned int32* rtkImplements, unsigned int32 tdEncloser)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetHandler([in] object marshal(iunknown) pUnk)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineMethod(unsigned int32 td, char* zName, unsigned int32 dwMethodFlags, unsigned int8* pvSigBlob, unsigned int32 cbSigBlob, unsigned int32 ulCodeRVA, unsigned int32 dwImplFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DefineMethodImpl(unsigned int32 td, unsigned int32 tkBody, unsigned int32 tkDecl)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineTypeRefByName(unsigned int32 tkResolutionScope, char* szName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineImportType(native int pAssemImport, void* pbHashValue, unsigned int32 cbHashValue, class System.Compiler.IMetaDataImport pImport, unsigned int32 tdImport, native int pAssemEmit)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineMemberRef(unsigned int32 tkImport, string szName, unsigned int8* pvSigBlob, unsigned int32 cbSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineImportMember(native int pAssemImport, void* pbHashValue, unsigned int32 cbHashValue, class System.Compiler.IMetaDataImport pImport, unsigned int32 mbMember, native int pAssemEmit, unsigned int32 tkParent)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineEvent(unsigned int32 td, string szEvent, unsigned int32 dwEventFlags, unsigned int32 tkEventType, unsigned int32 mdAddOn, unsigned int32 mdRemoveOn, unsigned int32 mdFire, unsigned int32* rmdOtherMethods)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetClassLayout(unsigned int32 td, unsigned int32 dwPackSize, valuetype 'System.Compiler.COR_FIELD_OFFSET'* rFieldOffsets, unsigned int32 ulClassSize)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DeleteClassLayout(unsigned int32 td)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetFieldMarshal(unsigned int32 tk, unsigned int8* pvNativeType, unsigned int32 cbNativeType)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DeleteFieldMarshal(unsigned int32 tk)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefinePermissionSet(unsigned int32 tk, unsigned int32 dwAction, void* pvPermission, unsigned int32 cbPermission)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetRVA(unsigned int32 md, unsigned int32 ulRVA)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetTokenFromSig(unsigned int8* pvSig, unsigned int32 cbSig)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineModuleRef(string szName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetParent(unsigned int32 mr, unsigned int32 tk)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetTokenFromTypeSpec(unsigned int8* pvSig, unsigned int32 cbSig)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SaveToMemory(void* pbData, unsigned int32 cbData)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineUserString(string szString, unsigned int32 cchString)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DeleteToken(unsigned int32 tkObj)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetMethodProps(unsigned int32 md, unsigned int32 dwMethodFlags, unsigned int32 ulCodeRVA, unsigned int32 dwImplFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetTypeDefProps(unsigned int32 td, unsigned int32 dwTypeDefFlags, unsigned int32 tkExtends, unsigned int32* rtkImplements)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetEventProps(unsigned int32 ev, unsigned int32 dwEventFlags, unsigned int32 tkEventType, unsigned int32 mdAddOn, unsigned int32 mdRemoveOn, unsigned int32 mdFire, unsigned int32* rmdOtherMethods)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 SetPermissionSetProps(unsigned int32 tk, unsigned int32 dwAction, void* pvPermission, unsigned int32 cbPermission)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DefinePinvokeMap(unsigned int32 tk, unsigned int32 dwMappingFlags, string szImportName, unsigned int32 mrImportDLL)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetPinvokeMap(unsigned int32 tk, unsigned int32 dwMappingFlags, string szImportName, unsigned int32 mrImportDLL)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void DeletePinvokeMap(unsigned int32 tk)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineCustomAttribute(unsigned int32 tkObj, unsigned int32 tkType, void* pCustomAttribute, unsigned int32 cbCustomAttribute)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetCustomAttributeValue(unsigned int32 pcv, void* pCustomAttribute, unsigned int32 cbCustomAttribute)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineField(unsigned int32 td, string szName, unsigned int32 dwFieldFlags, unsigned int8* pvSigBlob, unsigned int32 cbSigBlob, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineProperty(unsigned int32 td, string szProperty, unsigned int32 dwPropFlags, unsigned int8* pvSig, unsigned int32 cbSig, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue, unsigned int32 mdSetter, unsigned int32 mdGetter, unsigned int32* rmdOtherMethods)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineParam(unsigned int32 md, unsigned int32 ulParamSeq, string szName, unsigned int32 dwParamFlags, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetFieldProps(unsigned int32 fd, unsigned int32 dwFieldFlags, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetPropertyProps(unsigned int32 pr, unsigned int32 dwPropFlags, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue, unsigned int32 mdSetter, unsigned int32 mdGetter, unsigned int32* rmdOtherMethods)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetParamProps(unsigned int32 pd, string szName, unsigned int32 dwParamFlags, unsigned int32 dwCPlusTypeFlag, void* pValue, unsigned int32 cchValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 DefineSecurityAttributeSet(unsigned int32 tkObj, native int rSecAttrs, unsigned int32 cSecAttrs)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void ApplyEditAndContinue(object marshal(iunknown) pImport)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 TranslateSigWithScope(native int pAssemImport, void* pbHashValue, unsigned int32 cbHashValue, class System.Compiler.IMetaDataImport 'import', unsigned int8* pbSigBlob, unsigned int32 cbSigBlob, native int pAssemEmit, class System.Compiler.IMetaDataEmit emit, unsigned int8* pvTranslatedSig, unsigned int32 cbTranslatedSigMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetMethodImplFlags(unsigned int32 md, unsigned int32 dwImplFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void SetFieldRVA(unsigned int32 fd, unsigned int32 ulRVA)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void Merge(class System.Compiler.IMetaDataImport pImport, native int pHostMapToken, object marshal(iunknown) pHandler)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void MergeEnd()
    {
    }
  }
  .class public interface abstract import IMetaDataImport
  {
    .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('7DAC8207-D3AE-4c75-9B67-92801A497D44') }
    .custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
    .method public virtual hidebysig newslot abstract 
      instance void CloseEnum(unsigned int32 hEnum)
      preservesig 
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 CountEnum(unsigned int32 hEnum)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void ResetEnum(unsigned int32 hEnum, unsigned int32 ulPos)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumTypeDefs(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rTypeDefs, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumInterfaceImpls(unsigned int32& phEnum, unsigned int32 td, unsigned int32[] marshal([ + 3]) rImpls, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumTypeRefs(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rTypeRefs, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindTypeDefByName(string szTypeDef, unsigned int32 tkEnclosingClass)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance valuetype [mscorlib]System.Guid GetScopeProps(class [mscorlib]System.Text.StringBuilder szName, unsigned int32 cchName, [out] unsigned int32& pchName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetModuleFromScope()
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetTypeDefProps(unsigned int32 td, native int szTypeDef, unsigned int32 cchTypeDef, [out] unsigned int32& pchTypeDef, native int pdwTypeDefFlags)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetInterfaceImplProps(unsigned int32 iiImpl, [out] unsigned int32& pClass)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetTypeRefProps(unsigned int32 tr, [out] unsigned int32& ptkResolutionScope, class [mscorlib]System.Text.StringBuilder szName, unsigned int32 cchName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 ResolveTypeRef(unsigned int32 tr, [in] valuetype [mscorlib]System.Guid& riid, [out] object& marshal(interface) ppIScope)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMembers(unsigned int32& phEnum, unsigned int32 cl, unsigned int32[] marshal([ + 3]) rMembers, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMembersWithName(unsigned int32& phEnum, unsigned int32 cl, string szName, unsigned int32[] marshal([ + 4]) rMembers, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMethods(unsigned int32& phEnum, unsigned int32 cl, unsigned int32* rMethods, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMethodsWithName(unsigned int32& phEnum, unsigned int32 cl, string szName, unsigned int32[] marshal([ + 4]) rMethods, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumFields(unsigned int32& phEnum, unsigned int32 cl, unsigned int32* rFields, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumFieldsWithName(unsigned int32& phEnum, unsigned int32 cl, string szName, unsigned int32[] marshal([ + 4]) rFields, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumParams(unsigned int32& phEnum, unsigned int32 mb, unsigned int32[] marshal([ + 3]) rParams, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMemberRefs(unsigned int32& phEnum, unsigned int32 tkParent, unsigned int32[] marshal([ + 3]) rMemberRefs, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMethodImpls(unsigned int32& phEnum, unsigned int32 td, unsigned int32[] marshal([ + 4]) rMethodBody, unsigned int32[] marshal([ + 4]) rMethodDecl, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumPermissionSets(unsigned int32& phEnum, unsigned int32 tk, unsigned int32 dwActions, unsigned int32[] marshal([ + 4]) rPermission, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindMember(unsigned int32 td, string szName, unsigned int8[] marshal([ + 3]) pvSigBlob, unsigned int32 cbSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindMethod(unsigned int32 td, string szName, unsigned int8[] marshal([ + 3]) pvSigBlob, unsigned int32 cbSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindField(unsigned int32 td, string szName, unsigned int8[] marshal([ + 3]) pvSigBlob, unsigned int32 cbSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindMemberRef(unsigned int32 td, string szName, unsigned int8[] marshal([ + 3]) pvSigBlob, unsigned int32 cbSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetMethodProps(unsigned int32 mb, [out] unsigned int32& pClass, native int szMethod, unsigned int32 cchMethod, [out] unsigned int32& pchMethod, native int pdwAttr, native int ppvSigBlob, native int pcbSigBlob, native int pulCodeRVA)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetMemberRefProps(unsigned int32 mr, unsigned int32& ptk, class [mscorlib]System.Text.StringBuilder szMember, unsigned int32 cchMember, [out] unsigned int32& pchMember, [out] unsigned int8*& ppvSigBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumProperties(unsigned int32& phEnum, unsigned int32 td, unsigned int32* rProperties, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumEvents(unsigned int32& phEnum, unsigned int32 td, unsigned int32* rEvents, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetEventProps(unsigned int32 ev, [out] unsigned int32& pClass, class [mscorlib]System.Text.StringBuilder szEvent, unsigned int32 cchEvent, [out] unsigned int32& pchEvent, [out] unsigned int32& pdwEventFlags, [out] unsigned int32& ptkEventType, [out] unsigned int32& pmdAddOn, [out] unsigned int32& pmdRemoveOn, [out] unsigned int32& pmdFire, unsigned int32[] marshal([ + 11]) rmdOtherMethod, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumMethodSemantics(unsigned int32& phEnum, unsigned int32 mb, unsigned int32[] marshal([ + 3]) rEventProp, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetMethodSemantics(unsigned int32 mb, unsigned int32 tkEventProp)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetClassLayout(unsigned int32 td, [out] unsigned int32& pdwPackSize, valuetype 'System.Compiler.COR_FIELD_OFFSET'[] marshal([ + 3]) rFieldOffset, unsigned int32 cMax, [out] unsigned int32& pcFieldOffset)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetFieldMarshal(unsigned int32 tk, [out] unsigned int8*& ppvNativeType)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetRVA(unsigned int32 tk, [out] unsigned int32& pulCodeRVA)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetPermissionSetProps(unsigned int32 pm, [out] unsigned int32& pdwAction, [out] void*& ppvPermission)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetSigFromToken(unsigned int32 mdSig, [out] unsigned int8*& ppvSig)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetModuleRefProps(unsigned int32 mur, class [mscorlib]System.Text.StringBuilder szName, unsigned int32 cchName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumModuleRefs(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rModuleRefs, unsigned int32 cmax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetTypeSpecFromToken(unsigned int32 typespec, [out] unsigned int8*& ppvSig)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetNameFromToken(unsigned int32 tk)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumUnresolvedMethods(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rMethods, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetUserString(unsigned int32 stk, class [mscorlib]System.Text.StringBuilder szString, unsigned int32 cchString)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetPinvokeMap(unsigned int32 tk, [out] unsigned int32& pdwMappingFlags, class [mscorlib]System.Text.StringBuilder szImportName, unsigned int32 cchImportName, [out] unsigned int32& pchImportName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumSignatures(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rSignatures, unsigned int32 cmax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumTypeSpecs(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rTypeSpecs, unsigned int32 cmax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumUserStrings(unsigned int32& phEnum, unsigned int32[] marshal([ + 2]) rStrings, unsigned int32 cmax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance int32 GetParamForMethodIndex(unsigned int32 md, unsigned int32 ulParamSeq, [out] unsigned int32& pParam)
      preservesig 
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 EnumCustomAttributes(unsigned int32& phEnum, unsigned int32 tk, unsigned int32 tkType, unsigned int32[] marshal([ + 4]) rCustomAttributes, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetCustomAttributeProps(unsigned int32 cv, [out] unsigned int32& ptkObj, [out] unsigned int32& ptkType, [out] void*& ppBlob)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 FindTypeRef(unsigned int32 tkResolutionScope, string szName)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetMemberProps(unsigned int32 mb, [out] unsigned int32& pClass, class [mscorlib]System.Text.StringBuilder szMember, unsigned int32 cchMember, [out] unsigned int32& pchMember, [out] unsigned int32& pdwAttr, [out] unsigned int8*& ppvSigBlob, [out] unsigned int32& pcbSigBlob, [out] unsigned int32& pulCodeRVA, [out] unsigned int32& pdwImplFlags, [out] unsigned int32& pdwCPlusTypeFlag, [out] void*& ppValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetFieldProps(unsigned int32 mb, [out] unsigned int32& pClass, class [mscorlib]System.Text.StringBuilder szField, unsigned int32 cchField, [out] unsigned int32& pchField, [out] unsigned int32& pdwAttr, [out] unsigned int8*& ppvSigBlob, [out] unsigned int32& pcbSigBlob, [out] unsigned int32& pdwCPlusTypeFlag, [out] void*& ppValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetPropertyProps(unsigned int32 prop, [out] unsigned int32& pClass, class [mscorlib]System.Text.StringBuilder szProperty, unsigned int32 cchProperty, [out] unsigned int32& pchProperty, [out] unsigned int32& pdwPropFlags, [out] unsigned int8*& ppvSig, [out] unsigned int32& pbSig, [out] unsigned int32& pdwCPlusTypeFlag, [out] void*& ppDefaultValue, [out] unsigned int32& pcchDefaultValue, [out] unsigned int32& pmdSetter, [out] unsigned int32& pmdGetter, unsigned int32[] marshal([ + 14]) rmdOtherMethod, unsigned int32 cMax)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetParamProps(unsigned int32 tk, [out] unsigned int32& pmd, [out] unsigned int32& pulSequence, class [mscorlib]System.Text.StringBuilder szName, unsigned int32 cchName, [out] unsigned int32& pchName, [out] unsigned int32& pdwAttr, [out] unsigned int32& pdwCPlusTypeFlag, [out] void*& ppValue)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetCustomAttributeByName(unsigned int32 tkObj, string szName, [out] void*& ppData)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance bool marshal(bool) IsValidToken(unsigned int32 tk)
      preservesig 
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetNestedClassProps(unsigned int32 tdNestedClass)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance unsigned int32 GetNativeCallConvFromSig(void* pvSig, unsigned int32 cbSig)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance int32 IsGlobal(unsigned int32 pd)
    {
    }
  }
  .class public interface abstract IParser
  {
    .method public virtual hidebysig newslot abstract 
      instance void ParseCompilationUnit(class System.Compiler.CompilationUnit compilationUnit)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance class System.Compiler.Expression ParseExpression()
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void ParseStatements(class System.Compiler.StatementList statements)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void ParseTypeMembers(class System.Compiler.TypeNode 'type')
    {
    }
  }
  .class public interface abstract IParserFactory
  {
    .method public virtual hidebysig newslot abstract 
      instance class System.Compiler.IParser CreateParser(string fileName, int32 lineNumber, class System.Compiler.DocumentText text, class System.Compiler.Module symbolTable, class System.Compiler.ErrorNodeList errorNodes, class [System]System.CodeDom.Compiler.CompilerParameters options)
    {
    }
  }
  .class public interface abstract ISourceText
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .method public virtual hidebysig newslot abstract specialname 
      instance int32 get_Length()
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance string Substring(int32 startIndex, int32 length)
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance char get_Item(int32 position)
    {
    }
    .method public virtual hidebysig newslot abstract 
      instance void MakeCollectible()
    {
    }
    .property instance char Item(int32)
    {
      .get instance char System.Compiler.ISourceText::get_Item(int32)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ISourceText::get_Length()
    }
  }
  .class public interface abstract ISourceTextBuffer
    implements System.Compiler.ISourceText
  {
    .method public virtual hidebysig newslot abstract specialname 
      instance unsigned int8* get_Buffer()
    {
    }
    .property instance unsigned int8* Buffer()
    {
      .get instance unsigned int8* System.Compiler.ISourceTextBuffer::get_Buffer()
    }
  }
  .class public sealed ISourceTextList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ISourceTextList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.ISourceText get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.ISourceText Current()
      {
        .get instance class System.Compiler.ISourceText System.Compiler.ISourceTextList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ISourceText[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.ISourceText element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ISourceText get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.ISourceText 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ISourceTextList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.ISourceText Item(int32)
    {
      .get instance class System.Compiler.ISourceText System.Compiler.ISourceTextList::get_Item(int32)
      .set instance void System.Compiler.ISourceTextList::set_Item(int32, class System.Compiler.ISourceText)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ISourceTextList::get_Length()
    }
  }
  .class public interface abstract ISymbolicTypeReference
  {
  }
  .class public interface abstract ITypeParameter
  {
    .method public virtual hidebysig newslot abstract specialname 
      instance class System.Compiler.Member get_DeclaringMember()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance void set_DeclaringMember(class System.Compiler.Member 'value')
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance int32 get_ParameterListIndex()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance void set_ParameterListIndex(int32 'value')
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance valuetype System.Compiler.TypeParameterFlags get_TypeParameterFlags()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance void set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags 'value')
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsUnmanaged()
    {
    }
    .property instance class System.Compiler.Member DeclaringMember()
    {
      .get instance class System.Compiler.Member System.Compiler.ITypeParameter::get_DeclaringMember()
      .set instance void System.Compiler.ITypeParameter::set_DeclaringMember(class System.Compiler.Member)
    }
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.ITypeParameter::get_IsUnmanaged()
    }
    .property instance int32 ParameterListIndex()
    {
      .get instance int32 System.Compiler.ITypeParameter::get_ParameterListIndex()
      .set instance void System.Compiler.ITypeParameter::set_ParameterListIndex(int32)
    }
    .property instance valuetype System.Compiler.TypeParameterFlags TypeParameterFlags()
    {
      .get instance valuetype System.Compiler.TypeParameterFlags System.Compiler.ITypeParameter::get_TypeParameterFlags()
      .set instance void System.Compiler.ITypeParameter::set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags)
    }
  }
  .class public interface abstract IUniqueKey
  {
    .method public virtual hidebysig newslot abstract specialname 
      instance int32 get_UniqueId()
    {
    }
    .property instance int32 UniqueId()
    {
      .get instance int32 System.Compiler.IUniqueKey::get_UniqueId()
    }
  }
  .class public sealed Identifier
    extends System.Compiler.Expression
  {
    .method public static hidebysig 
      class System.Compiler.Identifier For(valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string name)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string name, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Identifier For(string name)
    {
      ret
    }
    .method public hidebysig specialname 
      instance string get_Name()
    {
      ret
    }
    .method public virtual hidebysig 
      instance string ToString()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_UniqueIdKey()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance int32 get_UniqueKey()
    {
      ret
    }
    .field static public class System.Compiler.Identifier Empty
    .field public class System.Compiler.Identifier Prefix
    .property instance string Name()
    {
      .get instance string System.Compiler.Identifier::get_Name()
    }
    .property instance int32 UniqueIdKey()
    {
      .get instance int32 System.Compiler.Identifier::get_UniqueIdKey()
    }
    .property instance int32 UniqueKey()
    {
      .get instance int32 System.Compiler.Identifier::get_UniqueKey()
    }
  }
  .class public sealed IdentifierList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.IdentifierList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Identifier get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Identifier Current()
      {
        .get instance class System.Compiler.Identifier System.Compiler.IdentifierList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Identifier element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Identifier get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Identifier 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.IdentifierList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Identifier Item(int32)
    {
      .get instance class System.Compiler.Identifier System.Compiler.IdentifierList::get_Item(int32)
      .set instance void System.Compiler.IdentifierList::set_Item(int32, class System.Compiler.Identifier)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.IdentifierList::get_Length()
      .set instance void System.Compiler.IdentifierList::set_Length(int32)
    }
  }
  .class public If
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block trueBlock, class System.Compiler.Block falseBlock)
    {
      ret
    }
    .field public class System.Compiler.Expression Condition
    .field public valuetype System.Compiler.SourceContext ConditionContext
    .field public valuetype System.Compiler.SourceContext ElseContext
    .field public valuetype System.Compiler.SourceContext EndIfContext
    .field public class System.Compiler.Block FalseBlock
    .field public class System.Compiler.Block TrueBlock
  }
  .class public ImplicitThis
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Class mostNestedScope, int32 lexLevel)
    {
      ret
    }
    .field public int32 LexLevel
    .field public class System.Compiler.Class MostNestedScope
  }
  .class public Indexer
    extends System.Compiler.NaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression Object, class System.Compiler.ExpressionList arguments)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression Object, class System.Compiler.ExpressionList arguments, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression Object, class System.Compiler.ExpressionList arguments, class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression Object, class System.Compiler.ExpressionList arguments, class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Property CorrespondingDefaultIndexedProperty
    .field public class System.Compiler.TypeNode ElementType
    .field public bool NoNullCheck
    .field public bool NoRangeCheck
    .field public bool NoTypeCheck
    .field public class System.Compiler.Expression Object
  }
  .class public InstanceInitializer
    extends System.Compiler.Method
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method/MethodBodyProvider provider, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, class System.Compiler.ParameterList parameters, class System.Compiler.Block body)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.ConstructorInfo GetConstructorInfo()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class [mscorlib]System.Reflection.MethodInfo GetMethodInfo()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance object Invoke(object[] arguments)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Literal Invoke(class System.Compiler.Literal[] arguments)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .field family class [mscorlib]System.Reflection.ConstructorInfo constructorInfo
  }
  .class public Instruction
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.OpCode opCode, int32 offset)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.OpCode opCode, int32 offset, object 'value')
    {
      ret
    }
    .field public int32 Offset
    .field public valuetype System.Compiler.OpCode OpCode
    .field public object Value
  }
  .class public sealed InstructionList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.InstructionList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Instruction get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Instruction Current()
      {
        .get instance class System.Compiler.Instruction System.Compiler.InstructionList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Instruction element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Instruction get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Instruction 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.InstructionList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Instruction Item(int32)
    {
      .get instance class System.Compiler.Instruction System.Compiler.InstructionList::get_Item(int32)
      .set instance void System.Compiler.InstructionList::set_Item(int32, class System.Compiler.Instruction)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.InstructionList::get_Length()
      .set instance void System.Compiler.InstructionList::set_Length(int32)
    }
  }
  .class public sealed Int32List
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.Int32List list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance int32 get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance int32 Current()
      {
        .get instance int32 System.Compiler.Int32List/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(int32 element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, int32 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.Int32List/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance int32 Item(int32)
    {
      .get instance int32 System.Compiler.Int32List::get_Item(int32)
      .set instance void System.Compiler.Int32List::set_Item(int32, int32)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.Int32List::get_Length()
    }
  }
  .class public Interface
    extends System.Compiler.TypeNode
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.InterfaceList baseInterfaces)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.InterfaceList baseInterfaces, class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module declaringModule, class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.TypeFlags 'flags', class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.InterfaceList baseInterfaces, class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig 
      instance void GetAbstractMethods(class System.Compiler.MethodList result)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MemberList GetAllMembersNamed(class System.Compiler.Identifier name)
    {
      ret
    }
    .field family class System.Compiler.TrivialHashtable jointMemberTable
  }
  .class public InterfaceExpression
    extends System.Compiler.Interface
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
  }
  .class public sealed InterfaceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.InterfaceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Interface get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Interface Current()
      {
        .get instance class System.Compiler.Interface System.Compiler.InterfaceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Interface[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Interface element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.InterfaceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig 
      instance int32 SearchFor(class System.Compiler.Interface element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Interface get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Interface 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.InterfaceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Interface Item(int32)
    {
      .get instance class System.Compiler.Interface System.Compiler.InterfaceList::get_Item(int32)
      .set instance void System.Compiler.InterfaceList::set_Item(int32, class System.Compiler.Interface)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.InterfaceList::get_Length()
      .set instance void System.Compiler.InterfaceList::set_Length(int32)
    }
  }
  .class public InvariantTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public KeyFileNotFoundException
    extends [mscorlib]System.ArgumentException
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public LRExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .field public class System.Compiler.ExpressionList SubexpressionsToEvaluateOnce
    .field public class System.Compiler.LocalList Temporaries
  }
  .class public LabeledStatement
    extends System.Compiler.Block
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Identifier Label
    .field public class System.Compiler.Statement Statement
  }
  .class public Literal
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(object Value)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(object Value, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(object Value, class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .method public virtual hidebysig 
      instance string ToString()
    {
      ret
    }
    .method public static hidebysig 
      void Initialize()
    {
      ret
    }
    .method public static hidebysig 
      void ClearStatics()
    {
      ret
    }
    .field static public class System.Compiler.Literal DoubleOne
    .field static public class System.Compiler.Literal False
    .field static public class System.Compiler.Literal Int32MinusOne
    .field static public class System.Compiler.Literal Int32One
    .field static public class System.Compiler.Literal Int32Sixteen
    .field static public class System.Compiler.Literal Int32Two
    .field static public class System.Compiler.Literal Int32Zero
    .field static public class System.Compiler.Literal Int64One
    .field static public class System.Compiler.Literal Int64Zero
    .field static public class System.Compiler.Literal Null
    .field static public class System.Compiler.Literal SingleOne
    .field public class System.Compiler.Expression SourceExpression
    .field static public class System.Compiler.Literal True
    .field public bool TypeWasExplicitlySpecifiedInSource
    .field public object Value
  }
  .class public Local
    extends System.Compiler.Variable
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext context)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext context)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type', class System.Compiler.Block declaringBlock)
    {
      ret
    }
    .field public class System.Compiler.Block DeclaringBlock
    .field public int32 Index
    .field public bool InitOnly
    .field public bool Pinned
  }
  .class public LocalBinding
    extends System.Compiler.Local
    implements System.Compiler.IUniqueKey
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Local boundLocal, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public virtual hidebysig 
      instance int32 GetHashCode()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool Equals(object obj)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.IUniqueKey.get_UniqueId()
    {
      .override System.Compiler.IUniqueKey::get_UniqueId
      ret
    }
    .field public class System.Compiler.Local BoundLocal
    .property instance int32 System.Compiler.IUniqueKey.UniqueId()
    {
      .get instance int32 System.Compiler.LocalBinding::System.Compiler.IUniqueKey.get_UniqueId()
    }
  }
  .class public LocalDeclaration
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Expression initialValue)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Expression initialValue, valuetype System.Compiler.NodeType assignmentNodeType)
    {
      ret
    }
    .field public valuetype System.Compiler.NodeType AssignmentNodeType
    .field public class System.Compiler.Field Field
    .field public class System.Compiler.Expression InitialValue
    .field public class System.Compiler.Identifier Name
  }
  .class public sealed LocalDeclarationList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.LocalDeclarationList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.LocalDeclaration get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.LocalDeclaration Current()
      {
        .get instance class System.Compiler.LocalDeclaration System.Compiler.LocalDeclarationList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.LocalDeclaration element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.LocalDeclarationList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.LocalDeclaration get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.LocalDeclaration 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.LocalDeclarationList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.LocalDeclaration Item(int32)
    {
      .get instance class System.Compiler.LocalDeclaration System.Compiler.LocalDeclarationList::get_Item(int32)
      .set instance void System.Compiler.LocalDeclarationList::set_Item(int32, class System.Compiler.LocalDeclaration)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.LocalDeclarationList::get_Length()
    }
  }
  .class public LocalDeclarationsStatement
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.LocalDeclaration ldecl, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public bool Constant
    .field public class System.Compiler.LocalDeclarationList Declarations
    .field public bool InitOnly
    .field public class System.Compiler.TypeNode Type
    .field public class System.Compiler.TypeNode TypeExpression
  }
  .class public sealed LocalList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.LocalList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Local get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Local Current()
      {
        .get instance class System.Compiler.Local System.Compiler.LocalList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Local element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Local get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Local 'value')
    {
      ret
    }
    .property instance class System.Compiler.Local Item(int32)
    {
      .get instance class System.Compiler.Local System.Compiler.LocalList::get_Item(int32)
      .set instance void System.Compiler.LocalList::set_Item(int32, class System.Compiler.Local)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.LocalList::get_Length()
    }
  }
  .class public Lock
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Guard
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariable
  }
  .class public sealed MarshallingInformation
    extends [mscorlib]System.Object
  {
    .method public hidebysig 
      instance class System.Compiler.MarshallingInformation Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public string Class
    .field public string Cookie
    .field public int32 ElementSize
    .field public valuetype System.Compiler.NativeType ElementType
    .field public valuetype System.Compiler.NativeType NativeType
    .field public int32 NumberOfElements
    .field public int32 ParamIndex
    .field public int32 Size
  }
  .class public abstract Member
    extends System.Compiler.Node
  {
    .method family hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method family hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, class System.Compiler.Identifier name, valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.AttributeList get_Attributes()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Attributes(class System.Compiler.AttributeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Member get_OverriddenMember()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_OverriddenMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_OverridesBaseClassMember()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_OverridesBaseClassMember(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode GetAttribute(class System.Compiler.TypeNode attributeType)
    {
      ret
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance string get_FullName()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsAssembly()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsCompilerControlled()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsFamily()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsFamilyAndAssembly()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsFamilyOrAssembly()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsPrivate()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsPublic()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsSpecialName()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsStatic()
    {
    }
    .method public virtual hidebysig newslot abstract specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
    }
    .method public hidebysig specialname 
      instance class [mscorlib]System.ObsoleteAttribute get_ObsoleteAttribute()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_ObsoleteAttribute(class [mscorlib]System.ObsoleteAttribute 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class [System.Xml]System.Xml.XmlNode get_Documentation()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Documentation(class [System.Xml]System.Xml.XmlNode 'value')
    {
      ret
    }
    .method family virtual hidebysig newslot 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Identifier get_DocumentationId()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_DocumentationId(class System.Compiler.Identifier 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance string get_HelpText()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_HelpText(string 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteDocumentation(class [System.Xml]System.Xml.XmlTextWriter xwriter)
    {
      ret
    }
    .field public class System.Compiler.Namespace DeclaringNamespace
    .field public class System.Compiler.TypeNode DeclaringType
    .field public class System.Compiler.Node DocumentationNode
    .field public bool HidesBaseClassMember
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.NodeList References
    .field family class System.Compiler.AttributeList attributes
    .field family class [System.Xml]System.Xml.XmlNode documentation
    .field family class System.Compiler.Identifier documentationId
    .field family string helpText
    .field family class System.Compiler.Member overriddenMember
    .field family bool overridesBaseClassMember
    .field family bool overridesBaseClassMemberSpecifiedExplicitly
    .property instance class System.Compiler.AttributeList Attributes()
    {
      .get instance class System.Compiler.AttributeList System.Compiler.Member::get_Attributes()
      .set instance void System.Compiler.Member::set_Attributes(class System.Compiler.AttributeList)
    }
    .property instance class [System.Xml]System.Xml.XmlNode Documentation()
    {
      .get instance class [System.Xml]System.Xml.XmlNode System.Compiler.Member::get_Documentation()
      .set instance void System.Compiler.Member::set_Documentation(class [System.Xml]System.Xml.XmlNode)
    }
    .property instance class System.Compiler.Identifier DocumentationId()
    {
      .get instance class System.Compiler.Identifier System.Compiler.Member::get_DocumentationId()
      .set instance void System.Compiler.Member::set_DocumentationId(class System.Compiler.Identifier)
    }
    .property instance string FullName()
    {
      .get instance string System.Compiler.Member::get_FullName()
    }
    .property instance string HelpText()
    {
      .get instance string System.Compiler.Member::get_HelpText()
      .set instance void System.Compiler.Member::set_HelpText(string)
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Member::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Member::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Member::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Member::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Member::get_IsFamilyOrAssembly()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Member::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Member::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Member::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Member::get_IsStatic()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Member::get_IsVisibleOutsideAssembly()
    }
    .property instance class [mscorlib]System.ObsoleteAttribute ObsoleteAttribute()
    {
      .get instance class [mscorlib]System.ObsoleteAttribute System.Compiler.Member::get_ObsoleteAttribute()
      .set instance void System.Compiler.Member::set_ObsoleteAttribute(class [mscorlib]System.ObsoleteAttribute)
    }
    .property instance class System.Compiler.Member OverriddenMember()
    {
      .get instance class System.Compiler.Member System.Compiler.Member::get_OverriddenMember()
      .set instance void System.Compiler.Member::set_OverriddenMember(class System.Compiler.Member)
    }
    .property instance bool OverridesBaseClassMember()
    {
      .get instance bool System.Compiler.Member::get_OverridesBaseClassMember()
      .set instance void System.Compiler.Member::set_OverridesBaseClassMember(bool)
    }
  }
  .class public MemberBinding
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression targetObject, class System.Compiler.Member boundMember)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression targetObject, class System.Compiler.Member boundMember, class System.Compiler.Expression boundMemberExpression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression targetObject, class System.Compiler.Member boundMember, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression targetObject, class System.Compiler.Member boundMember, valuetype System.Compiler.SourceContext sctx, class System.Compiler.Expression boundMemberExpression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression targetObject, class System.Compiler.Member boundMember, bool NoNullCheck, bool Volatile, int32 'alignment')
    {
      ret
    }
    .field public int32 Alignment
    .field public class System.Compiler.Member BoundMember
    .field public class System.Compiler.Expression BoundMemberExpression
    .field public bool NoNullCheck
    .field public class System.Compiler.Expression TargetObject
    .field public bool Volatile
  }
  .class public sealed MemberBindingList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.MemberBindingList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.MemberBinding get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.MemberBinding Current()
      {
        .get instance class System.Compiler.MemberBinding System.Compiler.MemberBindingList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.MemberBinding element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.MemberBinding get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.MemberBinding 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.MemberBindingList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.MemberBinding Item(int32)
    {
      .get instance class System.Compiler.MemberBinding System.Compiler.MemberBindingList::get_Item(int32)
      .set instance void System.Compiler.MemberBindingList::set_Item(int32, class System.Compiler.MemberBinding)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.MemberBindingList::get_Length()
    }
  }
  .class public sealed MemberList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.MemberList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Member get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Member Current()
      {
        .get instance class System.Compiler.Member System.Compiler.MemberList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Member[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Member element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.MemberList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Member get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Member 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.MemberList/Enumerator GetEnumerator()
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.Member[] ToArray()
    {
      ret
    }
    .property instance class System.Compiler.Member Item(int32)
    {
      .get instance class System.Compiler.Member System.Compiler.MemberList::get_Item(int32)
      .set instance void System.Compiler.MemberList::set_Item(int32, class System.Compiler.Member)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.MemberList::get_Length()
    }
  }
  .class public sealed MemoryStream
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance int32 get_Position()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Position(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(unsigned int8[] bytes)
    {
      ret
    }
    .method public hidebysig 
      instance void Seek(int64 offset, valuetype System.Compiler.SeekOrigin loc)
    {
      ret
    }
    .method public hidebysig 
      instance unsigned int8[] ToArray()
    {
      ret
    }
    .method public hidebysig 
      instance void Write(unsigned int8[] buffer, int32 index, int32 count)
    {
      ret
    }
    .method public hidebysig 
      instance void WriteTo(class System.Compiler.MemoryStream 'stream')
    {
      ret
    }
    .method public hidebysig 
      instance void WriteTo(class [mscorlib]'System.IO.Stream' 'stream')
    {
      ret
    }
    .field public unsigned int8[] Buffer
    .field public int32 Length
    .field public int32 position
    .property instance int32 Position()
    {
      .get instance int32 System.Compiler.MemoryStream::get_Position()
      .set instance void System.Compiler.MemoryStream::set_Position(int32)
    }
  }
  .class public Method
    extends System.Compiler.Member
  {
    .class nested public sealed MethodBodyProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.Method 'method', object handle, bool asInstructionList)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Method 'method', object handle, bool asInstructionList, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method/MethodBodyProvider provider, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, class System.Compiler.Identifier name, class System.Compiler.ParameterList parameters, class System.Compiler.TypeNode returnType, class System.Compiler.Block body)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Block get_Body()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Body(class System.Compiler.Block 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance string get_ConditionalSymbol()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_ConditionalSymbol(string 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.InstructionList get_Instructions()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Instructions(class System.Compiler.InstructionList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.ExceptionHandlerList get_ExceptionHandlers()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ExceptionHandlers(class System.Compiler.ExceptionHandlerList 'value')
    {
      ret
    }
    .method family virtual hidebysig 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetFullUnmangledNameWithTypeParameters()
    {
      ret
    }
    .method public static hidebysig 
      valuetype System.Compiler.MethodFlags GetVisibilityUnion(class System.Compiler.Method m1, class System.Compiler.Method m2)
    {
      ret
    }
    .method public static hidebysig 
      valuetype System.Compiler.MethodFlags GetVisibilityUnion(valuetype System.Compiler.MethodFlags vis1, valuetype System.Compiler.MethodFlags vis2)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance object Invoke(object targetObject, object[] arguments)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Literal Invoke(class System.Compiler.Literal targetObject, class System.Compiler.Literal[] arguments)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNormalized()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsNormalized(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsAbstract()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsExtern()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsFinal()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsVirtual()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNonSealedVirtual()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.Member get_OverriddenMember()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_OverriddenMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Method get_OverriddenMethod()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_OverriddenMethod(class System.Compiler.Method 'value')
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Method GetMethod(class [mscorlib]System.Reflection.MethodInfo methodInfo)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.MethodInfo GetMethodInfo()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode[] GetParameterTypes()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatch(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatchExceptLast(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatchStructurally(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatchStructurallyIncludingOutFlag(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatchStructurallyExceptLast(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatchIncludingOutFlag(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParameterTypesMatch(class System.Compiler.TypeNodeList argumentTypes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParameterTypesMatchStructurally(class System.Compiler.TypeNodeList argumentTypes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool TemplateParametersMatch(class System.Compiler.TypeNodeList templateParameters)
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Template()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Template(class System.Compiler.Method 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_TemplateParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_TemplateParameters(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetTemplateInstance(class System.Compiler.TypeNode referringType, class System.Compiler.TypeNode[] typeArguments)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetTemplateInstance(class System.Compiler.TypeNode referringType, class System.Compiler.TypeNodeList typeArguments)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Local GetLocalForField(class System.Compiler.Field f)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.Method CreateExplicitImplementation(class System.Compiler.TypeNode implementingType, class System.Compiler.ParameterList parameters, class System.Compiler.StatementList body)
    {
      ret
    }
    .field public valuetype System.Compiler.CallingConventionFlags CallingConvention
    .field public class System.Compiler.Member DeclaringMember
    .field public valuetype System.Compiler.MethodFlags Flags
    .field public bool HasCompilerGeneratedSignature
    .field public bool HasOutOfBandContract
    .field public valuetype System.Compiler.MethodImplFlags ImplFlags
    .field public class System.Compiler.MethodList ImplementedInterfaceMethods
    .field public class System.Compiler.TypeNodeList ImplementedTypeExpressions
    .field public class System.Compiler.TypeNodeList ImplementedTypes
    .field public class System.Compiler.MethodList ImplicitImplementedInterfaceMethods
    .field public bool InitLocals
    .field public bool IsGeneric
    .field family class System.Compiler.TrivialHashtable Locals
    .field public valuetype System.Compiler.PInvokeFlags PInvokeFlags
    .field public string PInvokeImportName
    .field public class System.Compiler.Module PInvokeModule
    .field public class System.Compiler.ParameterList Parameters
    .field public class System.Compiler.Method/MethodBodyProvider ProvideBody
    .field public object ProviderHandle
    .field public class System.Compiler.AttributeList ReturnAttributes
    .field public class System.Compiler.TypeNode ReturnType
    .field public class System.Compiler.TypeNode ReturnTypeExpression
    .field public class System.Compiler.MarshallingInformation ReturnTypeMarshallingInformation
    .field public class System.Compiler.MethodScope Scope
    .field public class System.Compiler.SecurityAttributeList SecurityAttributes
    .field public class System.Compiler.TypeNodeList TemplateArguments
    .field public class System.Compiler.This ThisParameter
    .field family class System.Compiler.Block body
    .field family string conditionalSymbol
    .field family bool doesNotHaveAConditionalSymbol
    .field family class System.Compiler.ExceptionHandlerList exceptionHandlers
    .field famorassem string fullName
    .field family class System.Compiler.InstructionList instructions
    .field family bool isNormalized
    .field family class [mscorlib]System.Reflection.MethodInfo methodInfo
    .field family class System.Compiler.TypeNode[] parameterTypes
    .property instance class System.Compiler.Block Body()
    {
      .get instance class System.Compiler.Block System.Compiler.Method::get_Body()
      .set instance void System.Compiler.Method::set_Body(class System.Compiler.Block)
    }
    .property instance string ConditionalSymbol()
    {
      .get instance string System.Compiler.Method::get_ConditionalSymbol()
      .set instance void System.Compiler.Method::set_ConditionalSymbol(string)
    }
    .property instance class System.Compiler.ExceptionHandlerList ExceptionHandlers()
    {
      .get instance class System.Compiler.ExceptionHandlerList System.Compiler.Method::get_ExceptionHandlers()
      .set instance void System.Compiler.Method::set_ExceptionHandlers(class System.Compiler.ExceptionHandlerList)
    }
    .property instance string FullName()
    {
      .get instance string System.Compiler.Method::get_FullName()
    }
    .property instance class System.Compiler.InstructionList Instructions()
    {
      .get instance class System.Compiler.InstructionList System.Compiler.Method::get_Instructions()
      .set instance void System.Compiler.Method::set_Instructions(class System.Compiler.InstructionList)
    }
    .property instance bool IsAbstract()
    {
      .get instance bool System.Compiler.Method::get_IsAbstract()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Method::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Method::get_IsCompilerControlled()
    }
    .property instance bool IsExtern()
    {
      .get instance bool System.Compiler.Method::get_IsExtern()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Method::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Method::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Method::get_IsFamilyOrAssembly()
    }
    .property instance bool IsFinal()
    {
      .get instance bool System.Compiler.Method::get_IsFinal()
    }
    .property instance bool IsNonSealedVirtual()
    {
      .get instance bool System.Compiler.Method::get_IsNonSealedVirtual()
    }
    .property instance bool IsNormalized()
    {
      .get instance bool System.Compiler.Method::get_IsNormalized()
      .set instance void System.Compiler.Method::set_IsNormalized(bool)
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Method::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Method::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Method::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Method::get_IsStatic()
    }
    .property instance bool IsVirtual()
    {
      .get instance bool System.Compiler.Method::get_IsVirtual()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Method::get_IsVisibleOutsideAssembly()
    }
    .property instance class System.Compiler.Member OverriddenMember()
    {
      .get instance class System.Compiler.Member System.Compiler.Method::get_OverriddenMember()
      .set instance void System.Compiler.Method::set_OverriddenMember(class System.Compiler.Member)
    }
    .property instance class System.Compiler.Method OverriddenMethod()
    {
      .get instance class System.Compiler.Method System.Compiler.Method::get_OverriddenMethod()
      .set instance void System.Compiler.Method::set_OverriddenMethod(class System.Compiler.Method)
    }
    .property instance class System.Compiler.Method Template()
    {
      .get instance class System.Compiler.Method System.Compiler.Method::get_Template()
      .set instance void System.Compiler.Method::set_Template(class System.Compiler.Method)
    }
    .property instance class System.Compiler.TypeNodeList TemplateParameters()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.Method::get_TemplateParameters()
      .set instance void System.Compiler.Method::set_TemplateParameters(class System.Compiler.TypeNodeList)
    }
  }
  .class public MethodBodySpecializer
    extends System.Compiler.Specializer
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module module, class System.Compiler.TypeNodeList pars, class System.Compiler.TypeNodeList args)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Visitor callingVisitor)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Node Visit(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitAddressDereference(class System.Compiler.AddressDereference addr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAssignmentStatement(class System.Compiler.AssignmentStatement assignment)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitBinaryExpression(class System.Compiler.BinaryExpression binaryExpression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitBranch(class System.Compiler.Branch branch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitExpression(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitIndexer(class System.Compiler.Indexer indexer)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitLiteral(class System.Compiler.Literal 'literal')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitLocal(class System.Compiler.Local local)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitParameter(class System.Compiler.Parameter parameter)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitNameBinding(class System.Compiler.NameBinding nameBinding)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitMemberBinding(class System.Compiler.MemberBinding memberBinding)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Method VisitMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitConstruct(class System.Compiler.Construct cons)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitMethodCall(class System.Compiler.MethodCall 'call')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitReturn(class System.Compiler.Return Return)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeNode(class System.Compiler.TypeNode typeNode)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitUnaryExpression(class System.Compiler.UnaryExpression unaryExpression)
    {
      ret
    }
    .field public class System.Compiler.TrivialHashtable alreadyVisitedNodes
  }
  .class public MethodCall
    extends System.Compiler.NaryExpression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression callee, class System.Compiler.ExpressionList arguments)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression callee, class System.Compiler.ExpressionList arguments, valuetype System.Compiler.NodeType typeOfCall)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression callee, class System.Compiler.ExpressionList arguments, valuetype System.Compiler.NodeType typeOfCall, class System.Compiler.TypeNode resultType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression callee, class System.Compiler.ExpressionList arguments, valuetype System.Compiler.NodeType typeOfCall, class System.Compiler.TypeNode resultType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Callee
    .field public class System.Compiler.Expression CalleeExpression
    .field public class System.Compiler.TypeNode Constraint
    .field public bool GiveErrorIfSpecialNameMethod
    .field public bool IsTailCall
  }
  .class public MethodClassParameter
    extends System.Compiler.ClassParameter
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public sealed MethodFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.MethodFlags Abstract = int32(0x00000400)
    .field static public literal valuetype System.Compiler.MethodFlags Assembly = int32(0x00000003)
    .field static public literal valuetype System.Compiler.MethodFlags CheckAccessOnOverride = int32(0x00000200)
    .field static public literal valuetype System.Compiler.MethodFlags CompilerControlled = int32(0x00000000)
    .field static public literal valuetype System.Compiler.MethodFlags FamANDAssem = int32(0x00000002)
    .field static public literal valuetype System.Compiler.MethodFlags FamORAssem = int32(0x00000005)
    .field static public literal valuetype System.Compiler.MethodFlags Family = int32(0x00000004)
    .field static public literal valuetype System.Compiler.MethodFlags Final = int32(0x00000020)
    .field static public literal valuetype System.Compiler.MethodFlags HasSecurity = int32(0x00004000)
    .field static public literal valuetype System.Compiler.MethodFlags HideBySig = int32(0x00000080)
    .field static public literal valuetype System.Compiler.MethodFlags MethodAccessMask = int32(0x00000007)
    .field static public literal valuetype System.Compiler.MethodFlags NewSlot = int32(0x00000100)
    .field static public literal valuetype System.Compiler.MethodFlags PInvokeImpl = int32(0x00002000)
    .field static public literal valuetype System.Compiler.MethodFlags Private = int32(0x00000001)
    .field static public literal valuetype System.Compiler.MethodFlags Public = int32(0x00000006)
    .field static public literal valuetype System.Compiler.MethodFlags RTSpecialName = int32(0x00001000)
    .field static public literal valuetype System.Compiler.MethodFlags RequireSecObject = int32(0x00008000)
    .field static public literal valuetype System.Compiler.MethodFlags ReservedMask = int32(0x0000D000)
    .field static public literal valuetype System.Compiler.MethodFlags ReuseSlot = int32(0x00000000)
    .field static public literal valuetype System.Compiler.MethodFlags SpecialName = int32(0x00000800)
    .field static public literal valuetype System.Compiler.MethodFlags Static = int32(0x00000010)
    .field static public literal valuetype System.Compiler.MethodFlags UnmanagedExport = int32(0x0000D000)
    .field static public literal valuetype System.Compiler.MethodFlags Virtual = int32(0x00000040)
    .field static public literal valuetype System.Compiler.MethodFlags VtableLayoutMask = int32(0x00000100)
  }
  .class public sealed MethodImplFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.MethodImplFlags CodeTypeMask = int32(0x00000003)
    .field static public literal valuetype System.Compiler.MethodImplFlags ForwardRef = int32(0x00000010)
    .field static public literal valuetype System.Compiler.MethodImplFlags IL = int32(0x00000000)
    .field static public literal valuetype System.Compiler.MethodImplFlags InternalCall = int32(0x00001000)
    .field static public literal valuetype System.Compiler.MethodImplFlags Managed = int32(0x00000000)
    .field static public literal valuetype System.Compiler.MethodImplFlags ManagedMask = int32(0x00000004)
    .field static public literal valuetype System.Compiler.MethodImplFlags MaxMethodImplVal = int32(0x0000FFFF)
    .field static public literal valuetype System.Compiler.MethodImplFlags Native = int32(0x00000001)
    .field static public literal valuetype System.Compiler.MethodImplFlags NoInlining = int32(0x00000008)
    .field static public literal valuetype System.Compiler.MethodImplFlags 'OPTIL' = int32(0x00000002)
    .field static public literal valuetype System.Compiler.MethodImplFlags PreserveSig = int32(0x00000080)
    .field static public literal valuetype System.Compiler.MethodImplFlags Runtime = int32(0x00000003)
    .field static public literal valuetype System.Compiler.MethodImplFlags Synchronized = int32(0x00000020)
    .field static public literal valuetype System.Compiler.MethodImplFlags Unmanaged = int32(0x00000004)
  }
  .class public sealed MethodList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.MethodList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Method get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Method Current()
      {
        .get instance class System.Compiler.Method System.Compiler.MethodList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Method element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.MethodList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Method get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Method 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.MethodList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Method Item(int32)
    {
      .get instance class System.Compiler.Method System.Compiler.MethodList::get_Item(int32)
      .set instance void System.Compiler.MethodList::set_Item(int32, class System.Compiler.Method)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.MethodList::get_Length()
    }
  }
  .class public MethodScope
    extends System.Compiler.Scope
  {
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Class get_ClosureClass()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_CapturedForClosure()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Class parentScope, class System.Compiler.UsedNamespaceList usedNamespaces)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Class parentScope, class System.Compiler.UsedNamespaceList usedNamespaces, class System.Compiler.Method 'method')
    {
      ret
    }
    .field public class System.Compiler.Method DeclaringMethod
    .field public class System.Compiler.Field ThisField
    .field public class System.Compiler.TypeNode ThisType
    .field public class System.Compiler.UsedNamespaceList UsedNamespaces
    .field family class System.Compiler.Class closureClass
    .property instance bool CapturedForClosure()
    {
      .get instance bool System.Compiler.MethodScope::get_CapturedForClosure()
    }
    .property instance class System.Compiler.Class ClosureClass()
    {
      .get instance class System.Compiler.Class System.Compiler.MethodScope::get_ClosureClass()
    }
  }
  .class public MethodTypeParameter
    extends System.Compiler.TypeParameter
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.InterfaceList baseInterfaces, class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
  }
  .class public Module
    extends System.Compiler.Node
    implements [mscorlib]System.IDisposable
  {
    .class nested public sealed AssemblyReferenceResolver
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class System.Compiler.AssemblyNode Invoke(class System.Compiler.AssemblyReference assemblyReference, class System.Compiler.Module referencingModule)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.AssemblyReference assemblyReference, class System.Compiler.Module referencingModule, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class System.Compiler.AssemblyNode EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed CustomAttributeProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.Module module)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Module module, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed DocumentationResolver
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [System.Xml]System.Xml.XmlDocument Invoke(class System.Compiler.Module referencingModule)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Module referencingModule, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [System.Xml]System.Xml.XmlDocument EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed ResourceProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.Module module)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Module module, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed TypeNodeListProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.Module module)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Module module, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed TypeNodeProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class System.Compiler.TypeNode Invoke(class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class System.Compiler.TypeNode EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .method public hidebysig specialname 
      instance void add_AssemblyReferenceResolution(class System.Compiler.Module/AssemblyReferenceResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void remove_AssemblyReferenceResolution(class System.Compiler.Module/AssemblyReferenceResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void add_AssemblyReferenceResolutionAfterProbingFailed(class System.Compiler.Module/AssemblyReferenceResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void remove_AssemblyReferenceResolutionAfterProbingFailed(class System.Compiler.Module/AssemblyReferenceResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void add_DocumentationResolution(class System.Compiler.Module/DocumentationResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void remove_DocumentationResolution(class System.Compiler.Module/DocumentationResolver 'value')
      synchronized 
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module/TypeNodeProvider provider, class System.Compiler.Module/TypeNodeListProvider listProvider, class System.Compiler.Module/CustomAttributeProvider provideCustomAttributes, class System.Compiler.Module/ResourceProvider provideResources)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void Dispose()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.AttributeList get_Attributes()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Attributes(class System.Compiler.AttributeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.SecurityAttributeList get_SecurityAttributes()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_SecurityAttributes(class System.Compiler.SecurityAttributeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class [System.Xml]System.Xml.XmlDocument get_Documentation()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Documentation(class [System.Xml]System.Xml.XmlDocument 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Method get_EntryPoint()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_EntryPoint(class System.Compiler.Method 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ModuleReferenceList get_ModuleReferences()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_ModuleReferences(class System.Compiler.ModuleReferenceList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.ResourceList get_Resources()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Resources(class System.Compiler.ResourceList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Win32ResourceList get_Win32Resources()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Win32Resources(class System.Compiler.Win32ResourceList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void AddWin32ResourceFile(string win32ResourceFilePath)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void AddWin32ResourceFile(class [mscorlib]'System.IO.Stream' win32ResourceStream)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void AddWin32Icon(string win32IconFilePath)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void AddWin32Icon(class [mscorlib]'System.IO.Stream' win32IconStream)
    {
      ret
    }
    .method public hidebysig 
      instance void AddWin32VersionInfo(class System.Compiler.CompilerOptions options)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode GetAttribute(class System.Compiler.TypeNode attributeType)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.TrivialHashtable GetMemberDocumentationCache()
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.NamespaceList GetNamespaceList()
    {
      ret
    }
    .method public hidebysig 
      instance bool IsValidNamespace(class System.Compiler.Identifier nsName)
    {
      ret
    }
    .method public hidebysig 
      instance bool IsValidTypeName(class System.Compiler.Identifier nsName, class System.Compiler.Identifier typeName)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.Module GetNestedModule(string moduleName)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetStructurallyEquivalentType(class System.Compiler.Identifier ns, class System.Compiler.Identifier id)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetType(class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_Types()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Types(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(unsigned int8[] buffer)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(unsigned int8[] buffer, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(string location)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(string location, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(string location, class [mscorlib]System.Collections.IDictionary cache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(string location, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Module GetModule(string location, class [mscorlib]System.Collections.IDictionary cache, bool doNotLockFile, bool getDebugInfo, bool useGlobalCache, bool preserveShortBranches)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AssemblyNode Resolve(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AssemblyNode ResolveAfterProbingFailed(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteModule(string location, bool writeDebugSymbols)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteModule(class [mscorlib]'System.IO.Stream' executable, class [mscorlib]'System.IO.Stream' debugSymbols)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteModule([out] unsigned int8[]& executable)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteModule([out] unsigned int8[]& executable, [out] unsigned int8[]& debugSymbols)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteModule(string location, class [System]System.CodeDom.Compiler.CompilerParameters options)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void WriteDocumentation(class [mscorlib]'System.IO.TextWriter' doc)
    {
      ret
    }
    .field public class System.Compiler.AssemblyReferenceList AssemblyReferences
    .field public class System.Compiler.AssemblyNode ContainingAssembly
    .field public string Directory
    .field public class System.Compiler.Node DocumentationNode
    .field public valuetype System.Compiler.AssemblyHashAlgorithm HashAlgorithm
    .field public unsigned int8[] HashValue
    .field public bool IsNormalized
    .field public valuetype System.Compiler.ModuleKindFlags Kind
    .field public string Location
    .field public int32 MetadataFormatMajorVersion
    .field public int32 MetadataFormatMinorVersion
    .field public class [mscorlib]System.Collections.ArrayList MetadataImportErrors
    .field public valuetype [mscorlib]System.Guid Mvid
    .field public string Name
    .field static famorassem initonly class System.Compiler.Method NoSuchMethod
    .field public valuetype System.Compiler.PeKindFlags PeKind
    .field public string TargetRuntimeVersion
    .field public bool TrackDebugData
    .field public bool UsePublicKeyTokensForAssemblyReferences
    .field family class System.Compiler.AttributeList attributes
    .field family class [System.Xml]System.Xml.XmlDocument documentation
    .field family class System.Compiler.Method entryPoint
    .field family class System.Compiler.TrivialHashtable memberDocumentationCache
    .field family class System.Compiler.ModuleReferenceList moduleReferences
    .field family class System.Compiler.NamespaceList namespaceList
    .field family class System.Compiler.TrivialHashtable namespaceTable
    .field family class System.Compiler.Module/CustomAttributeProvider provideCustomAttributes
    .field family class System.Compiler.Module/ResourceProvider provideResources
    .field family class System.Compiler.Module/TypeNodeProvider provideTypeNode
    .field family class System.Compiler.Module/TypeNodeListProvider provideTypeNodeList
    .field family class System.Compiler.ResourceList resources
    .field family int32 savedTypesLength
    .field family class System.Compiler.SecurityAttributeList securityAttributes
    .field family class System.Compiler.TypeNodeList types
    .field family class System.Compiler.TrivialHashtable validNamespaces
    .field family class System.Compiler.Win32ResourceList win32Resources
    .event System.Compiler.Module/AssemblyReferenceResolver AssemblyReferenceResolution
    {
      .addon instance void System.Compiler.Module::add_AssemblyReferenceResolution(class System.Compiler.Module/AssemblyReferenceResolver)
      .removeon instance void System.Compiler.Module::remove_AssemblyReferenceResolution(class System.Compiler.Module/AssemblyReferenceResolver)
    }
    .event System.Compiler.Module/AssemblyReferenceResolver AssemblyReferenceResolutionAfterProbingFailed
    {
      .addon instance void System.Compiler.Module::add_AssemblyReferenceResolutionAfterProbingFailed(class System.Compiler.Module/AssemblyReferenceResolver)
      .removeon instance void System.Compiler.Module::remove_AssemblyReferenceResolutionAfterProbingFailed(class System.Compiler.Module/AssemblyReferenceResolver)
    }
    .event System.Compiler.Module/DocumentationResolver DocumentationResolution
    {
      .addon instance void System.Compiler.Module::add_DocumentationResolution(class System.Compiler.Module/DocumentationResolver)
      .removeon instance void System.Compiler.Module::remove_DocumentationResolution(class System.Compiler.Module/DocumentationResolver)
    }
    .property instance class System.Compiler.AttributeList Attributes()
    {
      .get instance class System.Compiler.AttributeList System.Compiler.Module::get_Attributes()
      .set instance void System.Compiler.Module::set_Attributes(class System.Compiler.AttributeList)
    }
    .property instance class [System.Xml]System.Xml.XmlDocument Documentation()
    {
      .get instance class [System.Xml]System.Xml.XmlDocument System.Compiler.Module::get_Documentation()
      .set instance void System.Compiler.Module::set_Documentation(class [System.Xml]System.Xml.XmlDocument)
    }
    .property instance class System.Compiler.Method EntryPoint()
    {
      .get instance class System.Compiler.Method System.Compiler.Module::get_EntryPoint()
      .set instance void System.Compiler.Module::set_EntryPoint(class System.Compiler.Method)
    }
    .property instance class System.Compiler.ModuleReferenceList ModuleReferences()
    {
      .get instance class System.Compiler.ModuleReferenceList System.Compiler.Module::get_ModuleReferences()
      .set instance void System.Compiler.Module::set_ModuleReferences(class System.Compiler.ModuleReferenceList)
    }
    .property instance class System.Compiler.ResourceList Resources()
    {
      .get instance class System.Compiler.ResourceList System.Compiler.Module::get_Resources()
      .set instance void System.Compiler.Module::set_Resources(class System.Compiler.ResourceList)
    }
    .property instance class System.Compiler.SecurityAttributeList SecurityAttributes()
    {
      .get instance class System.Compiler.SecurityAttributeList System.Compiler.Module::get_SecurityAttributes()
      .set instance void System.Compiler.Module::set_SecurityAttributes(class System.Compiler.SecurityAttributeList)
    }
    .property instance class System.Compiler.TypeNodeList Types()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.Module::get_Types()
      .set instance void System.Compiler.Module::set_Types(class System.Compiler.TypeNodeList)
    }
    .property instance class System.Compiler.Win32ResourceList Win32Resources()
    {
      .get instance class System.Compiler.Win32ResourceList System.Compiler.Module::get_Win32Resources()
      .set instance void System.Compiler.Module::set_Win32Resources(class System.Compiler.Win32ResourceList)
    }
  }
  .class public sealed ModuleKindFlags
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.ModuleKindFlags ConsoleApplication = int32(0x00000000)
    .field static public literal valuetype System.Compiler.ModuleKindFlags DynamicallyLinkedLibrary = int32(0x00000002)
    .field static public literal valuetype System.Compiler.ModuleKindFlags ManifestResourceFile = int32(0x00000003)
    .field static public literal valuetype System.Compiler.ModuleKindFlags UnmanagedDynamicallyLinkedLibrary = int32(0x00000004)
    .field static public literal valuetype System.Compiler.ModuleKindFlags WindowsApplication = int32(0x00000001)
  }
  .class public sealed ModuleList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ModuleList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Module get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Module Current()
      {
        .get instance class System.Compiler.Module System.Compiler.ModuleList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Module element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Module get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Module 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ModuleList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Module Item(int32)
    {
      .get instance class System.Compiler.Module System.Compiler.ModuleList::get_Item(int32)
      .set instance void System.Compiler.ModuleList::set_Item(int32, class System.Compiler.Module)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ModuleList::get_Length()
    }
  }
  .class public ModuleReference
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string name, class System.Compiler.Module module)
    {
      ret
    }
    .field public class System.Compiler.Module Module
    .field public string Name
  }
  .class public sealed ModuleReferenceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ModuleReferenceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.ModuleReference get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.ModuleReference Current()
      {
        .get instance class System.Compiler.ModuleReference System.Compiler.ModuleReferenceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.ModuleReference[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.ModuleReference element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ModuleReferenceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ModuleReference get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.ModuleReference 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ModuleReferenceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.ModuleReference Item(int32)
    {
      .get instance class System.Compiler.ModuleReference System.Compiler.ModuleReferenceList::get_Item(int32)
      .set instance void System.Compiler.ModuleReferenceList::set_Item(int32, class System.Compiler.ModuleReference)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ModuleReferenceList::get_Length()
    }
  }
  .class public NameBinding
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier identifier, class System.Compiler.MemberList boundMembers)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier identifier, class System.Compiler.MemberList boundMembers, class System.Compiler.Class mostNestedScope, int32 lexLevel)
    {
      ret
    }
    .method public virtual hidebysig 
      instance string ToString()
    {
      ret
    }
    .field public class System.Compiler.Expression BoundMember
    .field public class System.Compiler.MemberList BoundMembers
    .field public class System.Compiler.Identifier Identifier
    .field public int32 LexLevel
    .field public class System.Compiler.Class MostNestedScope
  }
  .class public NamedArgument
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Expression 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Expression 'value', valuetype System.Compiler.SourceContext ctx)
    {
      ret
    }
    .field public bool IsCustomAttributeProperty
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.Expression Value
  }
  .class public Namespace
    extends System.Compiler.Member
  {
    .class nested public sealed TypeProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.Namespace nameSpace, object handle)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.Namespace nameSpace, object handle, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Namespace/TypeProvider provideTypes, object providerHandle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.Identifier fullName, class System.Compiler.AliasDefinitionList aliasDefinitions, class System.Compiler.UsedNamespaceList usedNamespaces, class System.Compiler.NamespaceList nestedNamespaces, class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_Types()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Types(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .field public class System.Compiler.AliasDefinitionList AliasDefinitions
    .field public class System.Compiler.Identifier FullNameId
    .field public class System.Compiler.NamespaceList NestedNamespaces
    .field public class System.Compiler.Namespace/TypeProvider ProvideTypes
    .field public object ProviderHandle
    .field public class System.Compiler.Identifier URI
    .field public class System.Compiler.UsedNamespaceList UsedNamespaces
    .field family string fullName
    .field family class System.Compiler.TypeNodeList types
    .property instance string FullName()
    {
      .get instance string System.Compiler.Namespace::get_FullName()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Namespace::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Namespace::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Namespace::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Namespace::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Namespace::get_IsFamilyOrAssembly()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Namespace::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Namespace::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Namespace::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Namespace::get_IsStatic()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Namespace::get_IsVisibleOutsideAssembly()
    }
    .property instance class System.Compiler.TypeNodeList Types()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.Namespace::get_Types()
      .set instance void System.Compiler.Namespace::set_Types(class System.Compiler.TypeNodeList)
    }
  }
  .class public sealed NamespaceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.NamespaceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Namespace get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Namespace Current()
      {
        .get instance class System.Compiler.Namespace System.Compiler.NamespaceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Namespace element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.NamespaceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Namespace get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Namespace 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.NamespaceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Namespace Item(int32)
    {
      .get instance class System.Compiler.Namespace System.Compiler.NamespaceList::get_Item(int32)
      .set instance void System.Compiler.NamespaceList::set_Item(int32, class System.Compiler.Namespace)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.NamespaceList::get_Length()
    }
  }
  .class public NamespaceScope
    extends System.Compiler.Scope
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Scope outerScope, class System.Compiler.Namespace associatedNamespace, class System.Compiler.Module associatedModule)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AliasDefinition GetAliasFor(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Identifier GetUriFor(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Identifier GetNamespaceFullNameFor(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetType(class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, [out] class System.Compiler.TypeNodeList& duplicates)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetType(class System.Compiler.Identifier name, [out] class System.Compiler.TypeNodeList& duplicates)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetType(class System.Compiler.Identifier name, [out] class System.Compiler.TypeNodeList& duplicates, bool returnNullIfHiddenByNestedNamespace)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void GetReferencedTypes(class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .field public class System.Compiler.TrivialHashtable AliasedType
    .field public class System.Compiler.Module AssociatedModule
    .field public class System.Compiler.Namespace AssociatedNamespace
    .field family class System.Compiler.TrivialHashtable aliasFor
    .field family class System.Compiler.TrivialHashtable namespaceFor
    .field family class System.Compiler.TrivialHashtable nestedNamespaceFullName
    .field static family class System.Compiler.AliasDefinition noSuchAlias
    .field family class System.Compiler.TrivialHashtable typeFor
  }
  .class public abstract NaryExpression
    extends System.Compiler.Expression
  {
    .method family hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method family hidebysig specialname 
      instance void .ctor(class System.Compiler.ExpressionList operands, valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .field public class System.Compiler.ExpressionList Operands
  }
  .class public sealed NativeType
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.NativeType AnsiBStr = int32(0x00000023)
    .field static public literal valuetype System.Compiler.NativeType AsAny = int32(0x00000028)
    .field static public literal valuetype System.Compiler.NativeType BStr = int32(0x00000013)
    .field static public literal valuetype System.Compiler.NativeType Bool = int32(0x00000002)
    .field static public literal valuetype System.Compiler.NativeType ByValArray = int32(0x0000001E)
    .field static public literal valuetype System.Compiler.NativeType ByValTStr = int32(0x00000017)
    .field static public literal valuetype System.Compiler.NativeType Currency = int32(0x0000000F)
    .field static public literal valuetype System.Compiler.NativeType CustomMarshaler = int32(0x0000002C)
    .field static public literal valuetype System.Compiler.NativeType Error = int32(0x0000002D)
    .field static public literal valuetype System.Compiler.NativeType FunctionPtr = int32(0x00000026)
    .field static public literal valuetype System.Compiler.NativeType I1 = int32(0x00000003)
    .field static public literal valuetype System.Compiler.NativeType I2 = int32(0x00000005)
    .field static public literal valuetype System.Compiler.NativeType I4 = int32(0x00000007)
    .field static public literal valuetype System.Compiler.NativeType I8 = int32(0x00000009)
    .field static public literal valuetype System.Compiler.NativeType IDispatch = int32(0x0000001A)
    .field static public literal valuetype System.Compiler.NativeType IUnknown = int32(0x00000019)
    .field static public literal valuetype System.Compiler.NativeType Interface = int32(0x0000001C)
    .field static public literal valuetype System.Compiler.NativeType LPArray = int32(0x0000002A)
    .field static public literal valuetype System.Compiler.NativeType LPStr = int32(0x00000014)
    .field static public literal valuetype System.Compiler.NativeType LPStruct = int32(0x0000002B)
    .field static public literal valuetype System.Compiler.NativeType LPTStr = int32(0x00000016)
    .field static public literal valuetype System.Compiler.NativeType LPWStr = int32(0x00000015)
    .field static public literal valuetype System.Compiler.NativeType NotSpecified = int32(0x00000050)
    .field static public literal valuetype System.Compiler.NativeType R4 = int32(0x0000000B)
    .field static public literal valuetype System.Compiler.NativeType R8 = int32(0x0000000C)
    .field static public literal valuetype System.Compiler.NativeType SafeArray = int32(0x0000001D)
    .field static public literal valuetype System.Compiler.NativeType Struct = int32(0x0000001B)
    .field static public literal valuetype System.Compiler.NativeType SysInt = int32(0x0000001F)
    .field static public literal valuetype System.Compiler.NativeType SysUInt = int32(0x00000020)
    .field static public literal valuetype System.Compiler.NativeType TBStr = int32(0x00000024)
    .field static public literal valuetype System.Compiler.NativeType U1 = int32(0x00000004)
    .field static public literal valuetype System.Compiler.NativeType U2 = int32(0x00000006)
    .field static public literal valuetype System.Compiler.NativeType U4 = int32(0x00000008)
    .field static public literal valuetype System.Compiler.NativeType U8 = int32(0x0000000A)
    .field static public literal valuetype System.Compiler.NativeType VBByRefStr = int32(0x00000022)
    .field static public literal valuetype System.Compiler.NativeType VariantBool = int32(0x00000025)
  }
  .class public abstract Node
    extends [mscorlib]System.Object
    implements System.Compiler.IUniqueKey
  {
    .method family hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance int32 get_UniqueKey()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Node Clone()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance object GetVisitorFor(object callingVisitor, string visitorClassName)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.IUniqueKey.get_UniqueId()
    {
      .override System.Compiler.IUniqueKey::get_UniqueId
      ret
    }
    .field public string DebugLabel
    .field public bool IsErroneous
    .field public valuetype System.Compiler.NodeType NodeType
    .field public valuetype System.Compiler.SourceContext SourceContext
    .property instance int32 System.Compiler.IUniqueKey.UniqueId()
    {
      .get instance int32 System.Compiler.Node::System.Compiler.IUniqueKey.get_UniqueId()
    }
    .property instance int32 UniqueKey()
    {
      .get instance int32 System.Compiler.Node::get_UniqueKey()
    }
  }
  .class public sealed NodeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.NodeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Node get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Node Current()
      {
        .get instance class System.Compiler.Node System.Compiler.NodeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Node[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Node element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.NodeList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Node get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Node 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.NodeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Node Item(int32)
    {
      .get instance class System.Compiler.Node System.Compiler.NodeList::get_Item(int32)
      .set instance void System.Compiler.NodeList::set_Item(int32, class System.Compiler.Node)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.NodeList::get_Length()
    }
  }
  .class public sealed NodeType
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.NodeType Acquire = int32(0x0000012E)
    .field static public literal valuetype System.Compiler.NodeType Add = int32(0x00000014)
    .field static public literal valuetype System.Compiler.NodeType AddEventHandler = int32(0x000000B1)
    .field static public literal valuetype System.Compiler.NodeType Add_Ovf = int32(0x00000015)
    .field static public literal valuetype System.Compiler.NodeType Add_Ovf_Un = int32(0x00000016)
    .field static public literal valuetype System.Compiler.NodeType AddressDereference = int32(0x00000079)
    .field static public literal valuetype System.Compiler.NodeType AddressOf = int32(0x0000007A)
    .field static public literal valuetype System.Compiler.NodeType AliasDefinition = int32(0x000000D0)
    .field static public literal valuetype System.Compiler.NodeType And = int32(0x00000017)
    .field static public literal valuetype System.Compiler.NodeType AnonymousNestedFunction = int32(0x0000008B)
    .field static public literal valuetype System.Compiler.NodeType ApplyToAll = int32(0x0000009D)
    .field static public literal valuetype System.Compiler.NodeType Arglist = int32(0x00000018)
    .field static public literal valuetype System.Compiler.NodeType Array = int32(0x00000001)
    .field static public literal valuetype System.Compiler.NodeType ArrayType = int32(0x000000FF)
    .field static public literal valuetype System.Compiler.NodeType ArrayTypeExpression = int32(0x000000DB)
    .field static public literal valuetype System.Compiler.NodeType As = int32(0x000000A0)
    .field static public literal valuetype System.Compiler.NodeType Assembly = int32(0x000000ED)
    .field static public literal valuetype System.Compiler.NodeType AssemblyReference = int32(0x000000EE)
    .field static public literal valuetype System.Compiler.NodeType Assertion = int32(0x00000019)
    .field static public literal valuetype System.Compiler.NodeType AssignmentExpression = int32(0x00000094)
    .field static public literal valuetype System.Compiler.NodeType AssignmentStatement = int32(0x000000AE)
    .field static public literal valuetype System.Compiler.NodeType Assumption = int32(0x0000001A)
    .field static public literal valuetype System.Compiler.NodeType Attribute = int32(0x000000F1)
    .field static public literal valuetype System.Compiler.NodeType Base = int32(0x00000082)
    .field static public literal valuetype System.Compiler.NodeType Block = int32(0x000000CD)
    .field static public literal valuetype System.Compiler.NodeType BlockExpression = int32(0x000000AF)
    .field static public literal valuetype System.Compiler.NodeType BlockReference = int32(0x00000002)
    .field static public literal valuetype System.Compiler.NodeType Box = int32(0x0000001B)
    .field static public literal valuetype System.Compiler.NodeType BoxedTypeExpression = int32(0x000000E4)
    .field static public literal valuetype System.Compiler.NodeType Branch = int32(0x0000001C)
    .field static public literal valuetype System.Compiler.NodeType Call = int32(0x0000001D)
    .field static public literal valuetype System.Compiler.NodeType Calli = int32(0x0000001E)
    .field static public literal valuetype System.Compiler.NodeType Callvirt = int32(0x0000001F)
    .field static public literal valuetype System.Compiler.NodeType Castclass = int32(0x00000020)
    .field static public literal valuetype System.Compiler.NodeType Catch = int32(0x000000B6)
    .field static public literal valuetype System.Compiler.NodeType Ceq = int32(0x00000021)
    .field static public literal valuetype System.Compiler.NodeType Cgt = int32(0x00000022)
    .field static public literal valuetype System.Compiler.NodeType Cgt_Un = int32(0x00000023)
    .field static public literal valuetype System.Compiler.NodeType Ckfinite = int32(0x00000024)
    .field static public literal valuetype System.Compiler.NodeType Class = int32(0x000000F3)
    .field static public literal valuetype System.Compiler.NodeType ClassExpression = int32(0x000000DC)
    .field static public literal valuetype System.Compiler.NodeType ClassParameter = int32(0x000000FC)
    .field static public literal valuetype System.Compiler.NodeType Clt = int32(0x00000025)
    .field static public literal valuetype System.Compiler.NodeType Clt_Un = int32(0x00000026)
    .field static public literal valuetype System.Compiler.NodeType CoerceTuple = int32(0x00000092)
    .field static public literal valuetype System.Compiler.NodeType CollectionEnumerator = int32(0x00000093)
    .field static public literal valuetype System.Compiler.NodeType Comma = int32(0x000000AA)
    .field static public literal valuetype System.Compiler.NodeType Compilation = int32(0x000000D5)
    .field static public literal valuetype System.Compiler.NodeType CompilationParameters = int32(0x00000003)
    .field static public literal valuetype System.Compiler.NodeType CompilationUnit = int32(0x000000D6)
    .field static public literal valuetype System.Compiler.NodeType CompilationUnitSnippet = int32(0x000000D7)
    .field static public literal valuetype System.Compiler.NodeType Composition = int32(0x0000010D)
    .field static public literal valuetype System.Compiler.NodeType Comprehension = int32(0x0000013D)
    .field static public literal valuetype System.Compiler.NodeType ComprehensionBinding = int32(0x0000013E)
    .field static public literal valuetype System.Compiler.NodeType Conditional = int32(0x000000A9)
    .field static public literal valuetype System.Compiler.NodeType ConstrainedType = int32(0x00000103)
    .field static public literal valuetype System.Compiler.NodeType Construct = int32(0x0000008C)
    .field static public literal valuetype System.Compiler.NodeType ConstructArray = int32(0x0000008D)
    .field static public literal valuetype System.Compiler.NodeType ConstructDelegate = int32(0x0000008F)
    .field static public literal valuetype System.Compiler.NodeType ConstructFlexArray = int32(0x0000008E)
    .field static public literal valuetype System.Compiler.NodeType ConstructIterator = int32(0x00000090)
    .field static public literal valuetype System.Compiler.NodeType ConstructTuple = int32(0x00000091)
    .field static public literal valuetype System.Compiler.NodeType Continue = int32(0x000000C7)
    .field static public literal valuetype System.Compiler.NodeType Conv_I = int32(0x00000027)
    .field static public literal valuetype System.Compiler.NodeType Conv_I1 = int32(0x00000028)
    .field static public literal valuetype System.Compiler.NodeType Conv_I2 = int32(0x00000029)
    .field static public literal valuetype System.Compiler.NodeType Conv_I4 = int32(0x0000002A)
    .field static public literal valuetype System.Compiler.NodeType Conv_I8 = int32(0x0000002B)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I = int32(0x0000002C)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I1 = int32(0x0000002D)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I1_Un = int32(0x0000002E)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I2 = int32(0x0000002F)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I2_Un = int32(0x00000030)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I4 = int32(0x00000031)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I4_Un = int32(0x00000032)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I8 = int32(0x00000033)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I8_Un = int32(0x00000034)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_I_Un = int32(0x00000035)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U = int32(0x00000036)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U1 = int32(0x00000037)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U1_Un = int32(0x00000038)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U2 = int32(0x00000039)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U2_Un = int32(0x0000003A)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U4 = int32(0x0000003B)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U4_Un = int32(0x0000003C)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U8 = int32(0x0000003D)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U8_Un = int32(0x0000003E)
    .field static public literal valuetype System.Compiler.NodeType Conv_Ovf_U_Un = int32(0x0000003F)
    .field static public literal valuetype System.Compiler.NodeType Conv_R4 = int32(0x00000040)
    .field static public literal valuetype System.Compiler.NodeType Conv_R8 = int32(0x00000041)
    .field static public literal valuetype System.Compiler.NodeType Conv_R_Un = int32(0x00000042)
    .field static public literal valuetype System.Compiler.NodeType Conv_U = int32(0x00000043)
    .field static public literal valuetype System.Compiler.NodeType Conv_U1 = int32(0x00000044)
    .field static public literal valuetype System.Compiler.NodeType Conv_U2 = int32(0x00000045)
    .field static public literal valuetype System.Compiler.NodeType Conv_U4 = int32(0x00000046)
    .field static public literal valuetype System.Compiler.NodeType Conv_U8 = int32(0x00000047)
    .field static public literal valuetype System.Compiler.NodeType CopyReference = int32(0x0000007D)
    .field static public literal valuetype System.Compiler.NodeType Cpblk = int32(0x00000048)
    .field static public literal valuetype System.Compiler.NodeType CurrentClosure = int32(0x00000084)
    .field static public literal valuetype System.Compiler.NodeType DebugBreak = int32(0x00000049)
    .field static public literal valuetype System.Compiler.NodeType Decrement = int32(0x00000097)
    .field static public literal valuetype System.Compiler.NodeType DefaultValue = int32(0x00000086)
    .field static public literal valuetype System.Compiler.NodeType DelegateNode = int32(0x000000F4)
    .field static public literal valuetype System.Compiler.NodeType Div = int32(0x0000004A)
    .field static public literal valuetype System.Compiler.NodeType Div_Un = int32(0x0000004B)
    .field static public literal valuetype System.Compiler.NodeType DoWhile = int32(0x000000BE)
    .field static public literal valuetype System.Compiler.NodeType Document = int32(0x00000004)
    .field static public literal valuetype System.Compiler.NodeType Dup = int32(0x0000004C)
    .field static public literal valuetype System.Compiler.NodeType EndFilter = int32(0x0000004D)
    .field static public literal valuetype System.Compiler.NodeType EndFinally = int32(0x0000004E)
    .field static public literal valuetype System.Compiler.NodeType EndOfRecord = int32(0x00000005)
    .field static public literal valuetype System.Compiler.NodeType EnforceCheck = int32(0x0000004F)
    .field static public literal valuetype System.Compiler.NodeType Ensures = int32(0x0000013A)
    .field static public literal valuetype System.Compiler.NodeType EnsuresExceptional = int32(0x0000013C)
    .field static public literal valuetype System.Compiler.NodeType EnsuresNormal = int32(0x0000013B)
    .field static public literal valuetype System.Compiler.NodeType EnumNode = int32(0x000000F5)
    .field static public literal valuetype System.Compiler.NodeType Eq = int32(0x000000A1)
    .field static public literal valuetype System.Compiler.NodeType Event = int32(0x000000F6)
    .field static public literal valuetype System.Compiler.NodeType ExceptionHandler = int32(0x00000078)
    .field static public literal valuetype System.Compiler.NodeType Exit = int32(0x000000C6)
    .field static public literal valuetype System.Compiler.NodeType ExplicitCoercion = int32(0x0000009E)
    .field static public literal valuetype System.Compiler.NodeType Expression = int32(0x00000006)
    .field static public literal valuetype System.Compiler.NodeType ExpressionSnippet = int32(0x000000DA)
    .field static public literal valuetype System.Compiler.NodeType ExpressionStatement = int32(0x000000B0)
    .field static public literal valuetype System.Compiler.NodeType FaultHandler = int32(0x000000B7)
    .field static public literal valuetype System.Compiler.NodeType Field = int32(0x00000109)
    .field static public literal valuetype System.Compiler.NodeType FieldInitializerBlock = int32(0x000000CE)
    .field static public literal valuetype System.Compiler.NodeType Filter = int32(0x000000B9)
    .field static public literal valuetype System.Compiler.NodeType Finally = int32(0x000000B8)
    .field static public literal valuetype System.Compiler.NodeType Fixed = int32(0x000000CA)
    .field static public literal valuetype System.Compiler.NodeType FlexArrayTypeExpression = int32(0x000000DE)
    .field static public literal valuetype System.Compiler.NodeType For = int32(0x000000BB)
    .field static public literal valuetype System.Compiler.NodeType ForEach = int32(0x000000BC)
    .field static public literal valuetype System.Compiler.NodeType FunctionDeclaration = int32(0x000000EC)
    .field static public literal valuetype System.Compiler.NodeType FunctionPointer = int32(0x00000100)
    .field static public literal valuetype System.Compiler.NodeType FunctionTypeExpression = int32(0x000000DF)
    .field static public literal valuetype System.Compiler.NodeType Ge = int32(0x000000A2)
    .field static public literal valuetype System.Compiler.NodeType Goto = int32(0x000000C8)
    .field static public literal valuetype System.Compiler.NodeType GotoCase = int32(0x000000C3)
    .field static public literal valuetype System.Compiler.NodeType Gt = int32(0x000000A3)
    .field static public literal valuetype System.Compiler.NodeType Guid = int32(0x00000007)
    .field static public literal valuetype System.Compiler.NodeType Identifier = int32(0x00000080)
    .field static public literal valuetype System.Compiler.NodeType If = int32(0x000000BA)
    .field static public literal valuetype System.Compiler.NodeType Iff = int32(0x00000134)
    .field static public literal valuetype System.Compiler.NodeType ImplicitThis = int32(0x00000083)
    .field static public literal valuetype System.Compiler.NodeType Implies = int32(0x00000135)
    .field static public literal valuetype System.Compiler.NodeType Increment = int32(0x00000098)
    .field static public literal valuetype System.Compiler.NodeType Indexer = int32(0x00000099)
    .field static public literal valuetype System.Compiler.NodeType Initblk = int32(0x00000050)
    .field static public literal valuetype System.Compiler.NodeType InstanceInitializer = int32(0x00000106)
    .field static public literal valuetype System.Compiler.NodeType Instruction = int32(0x000000AD)
    .field static public literal valuetype System.Compiler.NodeType Interface = int32(0x000000F7)
    .field static public literal valuetype System.Compiler.NodeType InterfaceExpression = int32(0x000000DD)
    .field static public literal valuetype System.Compiler.NodeType Invariant = int32(0x00000133)
    .field static public literal valuetype System.Compiler.NodeType InvariantTypeExpression = int32(0x000000E5)
    .field static public literal valuetype System.Compiler.NodeType Is = int32(0x0000009F)
    .field static public literal valuetype System.Compiler.NodeType Isinst = int32(0x00000051)
    .field static public literal valuetype System.Compiler.NodeType Jmp = int32(0x00000052)
    .field static public literal valuetype System.Compiler.NodeType LRExpression = int32(0x000000AC)
    .field static public literal valuetype System.Compiler.NodeType LabeledStatement = int32(0x000000C9)
    .field static public literal valuetype System.Compiler.NodeType Ldftn = int32(0x00000053)
    .field static public literal valuetype System.Compiler.NodeType Ldlen = int32(0x00000054)
    .field static public literal valuetype System.Compiler.NodeType Ldtoken = int32(0x00000055)
    .field static public literal valuetype System.Compiler.NodeType Ldvirtftn = int32(0x00000056)
    .field static public literal valuetype System.Compiler.NodeType Le = int32(0x000000A4)
    .field static public literal valuetype System.Compiler.NodeType List = int32(0x00000008)
    .field static public literal valuetype System.Compiler.NodeType Literal = int32(0x0000007F)
    .field static public literal valuetype System.Compiler.NodeType Local = int32(0x0000010C)
    .field static public literal valuetype System.Compiler.NodeType LocalDeclaration = int32(0x000000D2)
    .field static public literal valuetype System.Compiler.NodeType LocalDeclarationsStatement = int32(0x000000D3)
    .field static public literal valuetype System.Compiler.NodeType Localloc = int32(0x00000057)
    .field static public literal valuetype System.Compiler.NodeType Lock = int32(0x000000CB)
    .field static public literal valuetype System.Compiler.NodeType LogicalAnd = int32(0x000000A7)
    .field static public literal valuetype System.Compiler.NodeType LogicalEqual = int32(0x00000140)
    .field static public literal valuetype System.Compiler.NodeType LogicalImply = int32(0x0000013F)
    .field static public literal valuetype System.Compiler.NodeType LogicalNot = int32(0x0000009B)
    .field static public literal valuetype System.Compiler.NodeType LogicalOr = int32(0x000000A8)
    .field static public literal valuetype System.Compiler.NodeType Lt = int32(0x000000A5)
    .field static public literal valuetype System.Compiler.NodeType Maplet = int32(0x00000142)
    .field static public literal valuetype System.Compiler.NodeType MarshallingInformation = int32(0x00000009)
    .field static public literal valuetype System.Compiler.NodeType Member = int32(0x0000000A)
    .field static public literal valuetype System.Compiler.NodeType MemberBinding = int32(0x0000009A)
    .field static public literal valuetype System.Compiler.NodeType MemberReference = int32(0x0000000B)
    .field static public literal valuetype System.Compiler.NodeType Method = int32(0x00000108)
    .field static public literal valuetype System.Compiler.NodeType MethodCall = int32(0x0000008A)
    .field static public literal valuetype System.Compiler.NodeType MethodContract = int32(0x00000131)
    .field static public literal valuetype System.Compiler.NodeType MissingBlockReference = int32(0x0000000C)
    .field static public literal valuetype System.Compiler.NodeType MissingExpression = int32(0x0000000D)
    .field static public literal valuetype System.Compiler.NodeType MissingMemberReference = int32(0x0000000E)
    .field static public literal valuetype System.Compiler.NodeType Mkrefany = int32(0x00000058)
    .field static public literal valuetype System.Compiler.NodeType Module = int32(0x000000EF)
    .field static public literal valuetype System.Compiler.NodeType ModuleReference = int32(0x000000F0)
    .field static public literal valuetype System.Compiler.NodeType Mul = int32(0x00000059)
    .field static public literal valuetype System.Compiler.NodeType Mul_Ovf = int32(0x0000005A)
    .field static public literal valuetype System.Compiler.NodeType Mul_Ovf_Un = int32(0x0000005B)
    .field static public literal valuetype System.Compiler.NodeType NameBinding = int32(0x00000088)
    .field static public literal valuetype System.Compiler.NodeType NamedArgument = int32(0x0000007E)
    .field static public literal valuetype System.Compiler.NodeType Namespace = int32(0x000000CF)
    .field static public literal valuetype System.Compiler.NodeType Ne = int32(0x000000A6)
    .field static public literal valuetype System.Compiler.NodeType Neg = int32(0x0000005C)
    .field static public literal valuetype System.Compiler.NodeType NonEmptyStreamTypeExpression = int32(0x000000E3)
    .field static public literal valuetype System.Compiler.NodeType NonNullTypeExpression = int32(0x000000E6)
    .field static public literal valuetype System.Compiler.NodeType NonNullableTypeExpression = int32(0x000000E7)
    .field static public literal valuetype System.Compiler.NodeType Nop = int32(0x0000005D)
    .field static public literal valuetype System.Compiler.NodeType Not = int32(0x0000005E)
    .field static public literal valuetype System.Compiler.NodeType OldExpression = int32(0x00000138)
    .field static public literal valuetype System.Compiler.NodeType OptionalModifier = int32(0x00000104)
    .field static public literal valuetype System.Compiler.NodeType OptionalModifierTypeExpression = int32(0x00000143)
    .field static public literal valuetype System.Compiler.NodeType Or = int32(0x0000005F)
    .field static public literal valuetype System.Compiler.NodeType OutAddress = int32(0x0000007C)
    .field static public literal valuetype System.Compiler.NodeType Parameter = int32(0x0000010B)
    .field static public literal valuetype System.Compiler.NodeType Parentheses = int32(0x000000AB)
    .field static public literal valuetype System.Compiler.NodeType Pointer = int32(0x00000101)
    .field static public literal valuetype System.Compiler.NodeType PointerTypeExpression = int32(0x000000E0)
    .field static public literal valuetype System.Compiler.NodeType Pop = int32(0x00000060)
    .field static public literal valuetype System.Compiler.NodeType PostfixExpression = int32(0x00000096)
    .field static public literal valuetype System.Compiler.NodeType PrefixExpression = int32(0x00000095)
    .field static public literal valuetype System.Compiler.NodeType Property = int32(0x0000010A)
    .field static public literal valuetype System.Compiler.NodeType QualifiedIdentifer = int32(0x00000087)
    .field static public literal valuetype System.Compiler.NodeType QueryAggregate = int32(0x0000010E)
    .field static public literal valuetype System.Compiler.NodeType QueryAlias = int32(0x0000010F)
    .field static public literal valuetype System.Compiler.NodeType QueryAll = int32(0x00000110)
    .field static public literal valuetype System.Compiler.NodeType QueryAny = int32(0x00000111)
    .field static public literal valuetype System.Compiler.NodeType QueryAxis = int32(0x00000112)
    .field static public literal valuetype System.Compiler.NodeType QueryCommit = int32(0x00000113)
    .field static public literal valuetype System.Compiler.NodeType QueryContext = int32(0x00000114)
    .field static public literal valuetype System.Compiler.NodeType QueryDelete = int32(0x00000115)
    .field static public literal valuetype System.Compiler.NodeType QueryDifference = int32(0x00000117)
    .field static public literal valuetype System.Compiler.NodeType QueryDistinct = int32(0x00000116)
    .field static public literal valuetype System.Compiler.NodeType QueryExists = int32(0x00000118)
    .field static public literal valuetype System.Compiler.NodeType QueryFilter = int32(0x00000119)
    .field static public literal valuetype System.Compiler.NodeType QueryGeneratedType = int32(0x0000011A)
    .field static public literal valuetype System.Compiler.NodeType QueryGroupBy = int32(0x0000011B)
    .field static public literal valuetype System.Compiler.NodeType QueryInsert = int32(0x0000011C)
    .field static public literal valuetype System.Compiler.NodeType QueryIntersection = int32(0x0000011D)
    .field static public literal valuetype System.Compiler.NodeType QueryIterator = int32(0x0000011E)
    .field static public literal valuetype System.Compiler.NodeType QueryJoin = int32(0x0000011F)
    .field static public literal valuetype System.Compiler.NodeType QueryLimit = int32(0x00000120)
    .field static public literal valuetype System.Compiler.NodeType QueryOrderBy = int32(0x00000121)
    .field static public literal valuetype System.Compiler.NodeType QueryOrderItem = int32(0x00000122)
    .field static public literal valuetype System.Compiler.NodeType QueryPosition = int32(0x00000123)
    .field static public literal valuetype System.Compiler.NodeType QueryProject = int32(0x00000124)
    .field static public literal valuetype System.Compiler.NodeType QueryQuantifiedExpression = int32(0x00000125)
    .field static public literal valuetype System.Compiler.NodeType QueryRollback = int32(0x00000126)
    .field static public literal valuetype System.Compiler.NodeType QuerySelect = int32(0x00000127)
    .field static public literal valuetype System.Compiler.NodeType QuerySingleton = int32(0x00000128)
    .field static public literal valuetype System.Compiler.NodeType QueryTransact = int32(0x00000129)
    .field static public literal valuetype System.Compiler.NodeType QueryTypeFilter = int32(0x0000012A)
    .field static public literal valuetype System.Compiler.NodeType QueryUnion = int32(0x0000012B)
    .field static public literal valuetype System.Compiler.NodeType QueryUpdate = int32(0x0000012C)
    .field static public literal valuetype System.Compiler.NodeType QueryYielder = int32(0x0000012D)
    .field static public literal valuetype System.Compiler.NodeType Range = int32(0x00000141)
    .field static public literal valuetype System.Compiler.NodeType Read = int32(0x0000012F)
    .field static public literal valuetype System.Compiler.NodeType ReadOnlyAddressOf = int32(0x00000061)
    .field static public literal valuetype System.Compiler.NodeType RefAddress = int32(0x0000007B)
    .field static public literal valuetype System.Compiler.NodeType Refanytype = int32(0x00000062)
    .field static public literal valuetype System.Compiler.NodeType Refanyval = int32(0x00000063)
    .field static public literal valuetype System.Compiler.NodeType Reference = int32(0x00000102)
    .field static public literal valuetype System.Compiler.NodeType ReferenceTypeExpression = int32(0x000000E1)
    .field static public literal valuetype System.Compiler.NodeType Rem = int32(0x00000064)
    .field static public literal valuetype System.Compiler.NodeType Rem_Un = int32(0x00000065)
    .field static public literal valuetype System.Compiler.NodeType RemoveEventHandler = int32(0x000000B2)
    .field static public literal valuetype System.Compiler.NodeType Repeat = int32(0x000000BF)
    .field static public literal valuetype System.Compiler.NodeType RequiredModifier = int32(0x00000105)
    .field static public literal valuetype System.Compiler.NodeType RequiredModifierTypeExpression = int32(0x00000144)
    .field static public literal valuetype System.Compiler.NodeType Requires = int32(0x00000136)
    .field static public literal valuetype System.Compiler.NodeType RequiresOtherwise = int32(0x00000139)
    .field static public literal valuetype System.Compiler.NodeType RequiresPlain = int32(0x00000137)
    .field static public literal valuetype System.Compiler.NodeType ResourceUse = int32(0x000000CC)
    .field static public literal valuetype System.Compiler.NodeType Rethrow = int32(0x00000066)
    .field static public literal valuetype System.Compiler.NodeType Return = int32(0x000000B3)
    .field static public literal valuetype System.Compiler.NodeType SecurityAttribute = int32(0x000000F2)
    .field static public literal valuetype System.Compiler.NodeType SetterValue = int32(0x00000085)
    .field static public literal valuetype System.Compiler.NodeType Shl = int32(0x00000067)
    .field static public literal valuetype System.Compiler.NodeType Shr = int32(0x00000068)
    .field static public literal valuetype System.Compiler.NodeType Shr_Un = int32(0x00000069)
    .field static public literal valuetype System.Compiler.NodeType Sizeof = int32(0x0000006A)
    .field static public literal valuetype System.Compiler.NodeType SkipCheck = int32(0x0000006B)
    .field static public literal valuetype System.Compiler.NodeType StatementSnippet = int32(0x000000D9)
    .field static public literal valuetype System.Compiler.NodeType StaticInitializer = int32(0x00000107)
    .field static public literal valuetype System.Compiler.NodeType StreamTypeExpression = int32(0x000000E2)
    .field static public literal valuetype System.Compiler.NodeType String = int32(0x0000000F)
    .field static public literal valuetype System.Compiler.NodeType StringDictionary = int32(0x00000010)
    .field static public literal valuetype System.Compiler.NodeType Struct = int32(0x000000F8)
    .field static public literal valuetype System.Compiler.NodeType Sub = int32(0x0000006C)
    .field static public literal valuetype System.Compiler.NodeType Sub_Ovf = int32(0x0000006D)
    .field static public literal valuetype System.Compiler.NodeType Sub_Ovf_Un = int32(0x0000006E)
    .field static public literal valuetype System.Compiler.NodeType Switch = int32(0x000000C0)
    .field static public literal valuetype System.Compiler.NodeType SwitchCase = int32(0x000000C1)
    .field static public literal valuetype System.Compiler.NodeType SwitchCaseBottom = int32(0x000000C2)
    .field static public literal valuetype System.Compiler.NodeType SwitchInstruction = int32(0x0000006F)
    .field static public literal valuetype System.Compiler.NodeType Tailcall = int32(0x00000070)
    .field static public literal valuetype System.Compiler.NodeType TemplateInstance = int32(0x00000089)
    .field static public literal valuetype System.Compiler.NodeType This = int32(0x00000081)
    .field static public literal valuetype System.Compiler.NodeType Throw = int32(0x00000071)
    .field static public literal valuetype System.Compiler.NodeType Try = int32(0x000000B5)
    .field static public literal valuetype System.Compiler.NodeType TupleType = int32(0x000000F9)
    .field static public literal valuetype System.Compiler.NodeType TupleTypeExpression = int32(0x000000E8)
    .field static public literal valuetype System.Compiler.NodeType TypeAlias = int32(0x000000FA)
    .field static public literal valuetype System.Compiler.NodeType TypeContract = int32(0x00000132)
    .field static public literal valuetype System.Compiler.NodeType TypeExpression = int32(0x000000E9)
    .field static public literal valuetype System.Compiler.NodeType TypeIntersection = int32(0x000000FD)
    .field static public literal valuetype System.Compiler.NodeType TypeIntersectionExpression = int32(0x000000EA)
    .field static public literal valuetype System.Compiler.NodeType TypeMemberSnippet = int32(0x000000D8)
    .field static public literal valuetype System.Compiler.NodeType TypeNode = int32(0x00000011)
    .field static public literal valuetype System.Compiler.NodeType TypeParameter = int32(0x000000FB)
    .field static public literal valuetype System.Compiler.NodeType TypeUnion = int32(0x000000FE)
    .field static public literal valuetype System.Compiler.NodeType TypeUnionExpression = int32(0x000000EB)
    .field static public literal valuetype System.Compiler.NodeType Typeof = int32(0x0000009C)
    .field static public literal valuetype System.Compiler.NodeType Typeswitch = int32(0x000000C4)
    .field static public literal valuetype System.Compiler.NodeType TypeswitchCase = int32(0x000000C5)
    .field static public literal valuetype System.Compiler.NodeType Unaligned = int32(0x00000072)
    .field static public literal valuetype System.Compiler.NodeType UnaryPlus = int32(0x00000075)
    .field static public literal valuetype System.Compiler.NodeType Unbox = int32(0x00000073)
    .field static public literal valuetype System.Compiler.NodeType UnboxAny = int32(0x00000074)
    .field static public literal valuetype System.Compiler.NodeType Undefined = int32(0x00000000)
    .field static public literal valuetype System.Compiler.NodeType Uri = int32(0x00000012)
    .field static public literal valuetype System.Compiler.NodeType UsedNamespace = int32(0x000000D1)
    .field static public literal valuetype System.Compiler.NodeType VariableDeclaration = int32(0x000000D4)
    .field static public literal valuetype System.Compiler.NodeType Volatile = int32(0x00000076)
    .field static public literal valuetype System.Compiler.NodeType While = int32(0x000000BD)
    .field static public literal valuetype System.Compiler.NodeType Write = int32(0x00000130)
    .field static public literal valuetype System.Compiler.NodeType XmlNode = int32(0x00000013)
    .field static public literal valuetype System.Compiler.NodeType Xor = int32(0x00000077)
    .field static public literal valuetype System.Compiler.NodeType Yield = int32(0x000000B4)
  }
  .class public NonEmptyStreamTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public NonNullTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public NonNullableTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public sealed OpCode
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.OpCode Add = int32(0x00000058)
    .field static public literal valuetype System.Compiler.OpCode Add_Ovf = int32(0x000000D6)
    .field static public literal valuetype System.Compiler.OpCode Add_Ovf_Un = int32(0x000000D7)
    .field static public literal valuetype System.Compiler.OpCode And = int32(0x0000005F)
    .field static public literal valuetype System.Compiler.OpCode Arglist = int32(0x0000FE00)
    .field static public literal valuetype System.Compiler.OpCode Beq = int32(0x0000003B)
    .field static public literal valuetype System.Compiler.OpCode Beq_S1 = int32(0x0000002E)
    .field static public literal valuetype System.Compiler.OpCode Bge = int32(0x0000003C)
    .field static public literal valuetype System.Compiler.OpCode Bge_S1 = int32(0x0000002F)
    .field static public literal valuetype System.Compiler.OpCode Bge_Un = int32(0x00000041)
    .field static public literal valuetype System.Compiler.OpCode Bge_Un_S1 = int32(0x00000034)
    .field static public literal valuetype System.Compiler.OpCode Bgt = int32(0x0000003D)
    .field static public literal valuetype System.Compiler.OpCode Bgt_S1 = int32(0x00000030)
    .field static public literal valuetype System.Compiler.OpCode Bgt_Un = int32(0x00000042)
    .field static public literal valuetype System.Compiler.OpCode Bgt_Un_S1 = int32(0x00000035)
    .field static public literal valuetype System.Compiler.OpCode Ble = int32(0x0000003E)
    .field static public literal valuetype System.Compiler.OpCode Ble_S1 = int32(0x00000031)
    .field static public literal valuetype System.Compiler.OpCode Ble_Un = int32(0x00000043)
    .field static public literal valuetype System.Compiler.OpCode Ble_Un_S1 = int32(0x00000036)
    .field static public literal valuetype System.Compiler.OpCode Blt = int32(0x0000003F)
    .field static public literal valuetype System.Compiler.OpCode Blt_S1 = int32(0x00000032)
    .field static public literal valuetype System.Compiler.OpCode Blt_Un = int32(0x00000044)
    .field static public literal valuetype System.Compiler.OpCode Blt_Un_S1 = int32(0x00000037)
    .field static public literal valuetype System.Compiler.OpCode Bne_Un = int32(0x00000040)
    .field static public literal valuetype System.Compiler.OpCode Bne_Un_S1 = int32(0x00000033)
    .field static public literal valuetype System.Compiler.OpCode Box = int32(0x0000008C)
    .field static public literal valuetype System.Compiler.OpCode Br = int32(0x00000038)
    .field static public literal valuetype System.Compiler.OpCode Br_S = int32(0x0000002B)
    .field static public literal valuetype System.Compiler.OpCode Break = int32(0x00000001)
    .field static public literal valuetype System.Compiler.OpCode Brfalse = int32(0x00000039)
    .field static public literal valuetype System.Compiler.OpCode Brfalse_S = int32(0x0000002C)
    .field static public literal valuetype System.Compiler.OpCode Brtrue = int32(0x0000003A)
    .field static public literal valuetype System.Compiler.OpCode Brtrue_S = int32(0x0000002D)
    .field static public literal valuetype System.Compiler.OpCode Call = int32(0x00000028)
    .field static public literal valuetype System.Compiler.OpCode Calli = int32(0x00000029)
    .field static public literal valuetype System.Compiler.OpCode Callvirt = int32(0x0000006F)
    .field static public literal valuetype System.Compiler.OpCode Castclass = int32(0x00000074)
    .field static public literal valuetype System.Compiler.OpCode Ceq = int32(0x0000FE01)
    .field static public literal valuetype System.Compiler.OpCode Cgt = int32(0x0000FE02)
    .field static public literal valuetype System.Compiler.OpCode Cgt_Un = int32(0x0000FE03)
    .field static public literal valuetype System.Compiler.OpCode Ckfinite = int32(0x000000C3)
    .field static public literal valuetype System.Compiler.OpCode Clt = int32(0x0000FE04)
    .field static public literal valuetype System.Compiler.OpCode Clt_Un = int32(0x0000FE05)
    .field static public literal valuetype System.Compiler.OpCode Constrained_ = int32(0x0000FE16)
    .field static public literal valuetype System.Compiler.OpCode Conv_I = int32(0x000000D3)
    .field static public literal valuetype System.Compiler.OpCode Conv_I1 = int32(0x00000067)
    .field static public literal valuetype System.Compiler.OpCode Conv_I2 = int32(0x00000068)
    .field static public literal valuetype System.Compiler.OpCode Conv_I4 = int32(0x00000069)
    .field static public literal valuetype System.Compiler.OpCode Conv_I8 = int32(0x0000006A)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I = int32(0x000000D4)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I1 = int32(0x000000B3)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I1_Un = int32(0x00000082)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I2 = int32(0x000000B5)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I2_Un = int32(0x00000083)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I4 = int32(0x000000B7)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I4_Un = int32(0x00000084)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I8 = int32(0x000000B9)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I8_Un = int32(0x00000085)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_I_Un = int32(0x0000008A)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U = int32(0x000000D5)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U1 = int32(0x000000B4)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U1_Un = int32(0x00000086)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U2 = int32(0x000000B6)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U2_Un = int32(0x00000087)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U4 = int32(0x000000B8)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U4_Un = int32(0x00000088)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U8 = int32(0x000000BA)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U8_Un = int32(0x00000089)
    .field static public literal valuetype System.Compiler.OpCode Conv_Ovf_U_Un = int32(0x0000008B)
    .field static public literal valuetype System.Compiler.OpCode Conv_R4 = int32(0x0000006B)
    .field static public literal valuetype System.Compiler.OpCode Conv_R8 = int32(0x0000006C)
    .field static public literal valuetype System.Compiler.OpCode Conv_R_Un = int32(0x00000076)
    .field static public literal valuetype System.Compiler.OpCode Conv_U = int32(0x000000E0)
    .field static public literal valuetype System.Compiler.OpCode Conv_U1 = int32(0x000000D2)
    .field static public literal valuetype System.Compiler.OpCode Conv_U2 = int32(0x000000D1)
    .field static public literal valuetype System.Compiler.OpCode Conv_U4 = int32(0x0000006D)
    .field static public literal valuetype System.Compiler.OpCode Conv_U8 = int32(0x0000006E)
    .field static public literal valuetype System.Compiler.OpCode Cpblk = int32(0x0000FE17)
    .field static public literal valuetype System.Compiler.OpCode Cpobj = int32(0x00000070)
    .field static public literal valuetype System.Compiler.OpCode Div = int32(0x0000005B)
    .field static public literal valuetype System.Compiler.OpCode Div_Un = int32(0x0000005C)
    .field static public literal valuetype System.Compiler.OpCode Dup = int32(0x00000025)
    .field static public literal valuetype System.Compiler.OpCode Endfilter = int32(0x0000FE11)
    .field static public literal valuetype System.Compiler.OpCode Endfinally = int32(0x000000DC)
    .field static public literal valuetype System.Compiler.OpCode Initblk = int32(0x0000FE18)
    .field static public literal valuetype System.Compiler.OpCode Initobj = int32(0x0000FE15)
    .field static public literal valuetype System.Compiler.OpCode Isinst = int32(0x00000075)
    .field static public literal valuetype System.Compiler.OpCode Jmp = int32(0x00000027)
    .field static public literal valuetype System.Compiler.OpCode Ldarg = int32(0x0000FE09)
    .field static public literal valuetype System.Compiler.OpCode Ldarg_0 = int32(0x00000002)
    .field static public literal valuetype System.Compiler.OpCode Ldarg_1 = int32(0x00000003)
    .field static public literal valuetype System.Compiler.OpCode Ldarg_2 = int32(0x00000004)
    .field static public literal valuetype System.Compiler.OpCode Ldarg_3 = int32(0x00000005)
    .field static public literal valuetype System.Compiler.OpCode Ldarg_S = int32(0x0000000E)
    .field static public literal valuetype System.Compiler.OpCode Ldarga = int32(0x0000FE0A)
    .field static public literal valuetype System.Compiler.OpCode Ldarga_S = int32(0x0000000F)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4 = int32(0x00000020)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_0 = int32(0x00000016)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_1 = int32(0x00000017)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_2 = int32(0x00000018)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_3 = int32(0x00000019)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_4 = int32(0x0000001A)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_5 = int32(0x0000001B)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_6 = int32(0x0000001C)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_7 = int32(0x0000001D)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_8 = int32(0x0000001E)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_M1 = int32(0x00000015)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I4_S = int32(0x0000001F)
    .field static public literal valuetype System.Compiler.OpCode Ldc_I8 = int32(0x00000021)
    .field static public literal valuetype System.Compiler.OpCode Ldc_R4 = int32(0x00000022)
    .field static public literal valuetype System.Compiler.OpCode Ldc_R8 = int32(0x00000023)
    .field static public literal valuetype System.Compiler.OpCode Ldelem = int32(0x000000A3)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_I = int32(0x00000097)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_I1 = int32(0x00000090)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_I2 = int32(0x00000092)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_I4 = int32(0x00000094)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_I8 = int32(0x00000096)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_R4 = int32(0x00000098)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_R8 = int32(0x00000099)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_Ref = int32(0x0000009A)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_U1 = int32(0x00000091)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_U2 = int32(0x00000093)
    .field static public literal valuetype System.Compiler.OpCode Ldelem_U4 = int32(0x00000095)
    .field static public literal valuetype System.Compiler.OpCode Ldelema = int32(0x0000008F)
    .field static public literal valuetype System.Compiler.OpCode Ldfld = int32(0x0000007B)
    .field static public literal valuetype System.Compiler.OpCode Ldflda = int32(0x0000007C)
    .field static public literal valuetype System.Compiler.OpCode Ldftn = int32(0x0000FE06)
    .field static public literal valuetype System.Compiler.OpCode Ldind_I = int32(0x0000004D)
    .field static public literal valuetype System.Compiler.OpCode Ldind_I1 = int32(0x00000046)
    .field static public literal valuetype System.Compiler.OpCode Ldind_I2 = int32(0x00000048)
    .field static public literal valuetype System.Compiler.OpCode Ldind_I4 = int32(0x0000004A)
    .field static public literal valuetype System.Compiler.OpCode Ldind_I8 = int32(0x0000004C)
    .field static public literal valuetype System.Compiler.OpCode Ldind_R4 = int32(0x0000004E)
    .field static public literal valuetype System.Compiler.OpCode Ldind_R8 = int32(0x0000004F)
    .field static public literal valuetype System.Compiler.OpCode Ldind_Ref = int32(0x00000050)
    .field static public literal valuetype System.Compiler.OpCode Ldind_U1 = int32(0x00000047)
    .field static public literal valuetype System.Compiler.OpCode Ldind_U2 = int32(0x00000049)
    .field static public literal valuetype System.Compiler.OpCode Ldind_U4 = int32(0x0000004B)
    .field static public literal valuetype System.Compiler.OpCode Ldlen = int32(0x0000008E)
    .field static public literal valuetype System.Compiler.OpCode Ldloc = int32(0x0000FE0C)
    .field static public literal valuetype System.Compiler.OpCode Ldloc_0 = int32(0x00000006)
    .field static public literal valuetype System.Compiler.OpCode Ldloc_1 = int32(0x00000007)
    .field static public literal valuetype System.Compiler.OpCode Ldloc_2 = int32(0x00000008)
    .field static public literal valuetype System.Compiler.OpCode Ldloc_3 = int32(0x00000009)
    .field static public literal valuetype System.Compiler.OpCode Ldloc_S = int32(0x00000011)
    .field static public literal valuetype System.Compiler.OpCode Ldloca = int32(0x0000FE0D)
    .field static public literal valuetype System.Compiler.OpCode Ldloca_S = int32(0x00000012)
    .field static public literal valuetype System.Compiler.OpCode Ldnull = int32(0x00000014)
    .field static public literal valuetype System.Compiler.OpCode Ldobj = int32(0x00000071)
    .field static public literal valuetype System.Compiler.OpCode Ldsfld = int32(0x0000007E)
    .field static public literal valuetype System.Compiler.OpCode Ldsflda = int32(0x0000007F)
    .field static public literal valuetype System.Compiler.OpCode Ldstr = int32(0x00000072)
    .field static public literal valuetype System.Compiler.OpCode Ldtoken = int32(0x000000D0)
    .field static public literal valuetype System.Compiler.OpCode Ldvirtftn = int32(0x0000FE07)
    .field static public literal valuetype System.Compiler.OpCode Leave = int32(0x000000DD)
    .field static public literal valuetype System.Compiler.OpCode Leave_S = int32(0x000000DE)
    .field static public literal valuetype System.Compiler.OpCode Localloc = int32(0x0000FE0F)
    .field static public literal valuetype System.Compiler.OpCode Mkrefany = int32(0x000000C6)
    .field static public literal valuetype System.Compiler.OpCode Mul = int32(0x0000005A)
    .field static public literal valuetype System.Compiler.OpCode Mul_Ovf = int32(0x000000D8)
    .field static public literal valuetype System.Compiler.OpCode Mul_Ovf_Un = int32(0x000000D9)
    .field static public literal valuetype System.Compiler.OpCode Neg = int32(0x00000065)
    .field static public literal valuetype System.Compiler.OpCode Newarr = int32(0x0000008D)
    .field static public literal valuetype System.Compiler.OpCode Newobj = int32(0x00000073)
    .field static public literal valuetype System.Compiler.OpCode No = int32(0x0000FE19)
    .field static public literal valuetype System.Compiler.OpCode Nop = int32(0x00000000)
    .field static public literal valuetype System.Compiler.OpCode Not = int32(0x00000066)
    .field static public literal valuetype System.Compiler.OpCode Or = int32(0x00000060)
    .field static public literal valuetype System.Compiler.OpCode Pop = int32(0x00000026)
    .field static public literal valuetype System.Compiler.OpCode Prefix1 = int32(0x000000FE)
    .field static public literal valuetype System.Compiler.OpCode Prefix2 = int32(0x000000FD)
    .field static public literal valuetype System.Compiler.OpCode Prefix3 = int32(0x000000FC)
    .field static public literal valuetype System.Compiler.OpCode Prefix4 = int32(0x000000FB)
    .field static public literal valuetype System.Compiler.OpCode Prefix5 = int32(0x000000FA)
    .field static public literal valuetype System.Compiler.OpCode Prefix6 = int32(0x000000F9)
    .field static public literal valuetype System.Compiler.OpCode Prefix7 = int32(0x000000F8)
    .field static public literal valuetype System.Compiler.OpCode Readonly_ = int32(0x0000FE1E)
    .field static public literal valuetype System.Compiler.OpCode Refanytype = int32(0x0000FE1D)
    .field static public literal valuetype System.Compiler.OpCode Refanyval = int32(0x000000C2)
    .field static public literal valuetype System.Compiler.OpCode Rem = int32(0x0000005D)
    .field static public literal valuetype System.Compiler.OpCode Rem_Un = int32(0x0000005E)
    .field static public literal valuetype System.Compiler.OpCode Ret = int32(0x0000002A)
    .field static public literal valuetype System.Compiler.OpCode Rethrow = int32(0x0000FE1A)
    .field static public literal valuetype System.Compiler.OpCode Shl = int32(0x00000062)
    .field static public literal valuetype System.Compiler.OpCode Shr = int32(0x00000063)
    .field static public literal valuetype System.Compiler.OpCode Shr_Un = int32(0x00000064)
    .field static public literal valuetype System.Compiler.OpCode Sizeof = int32(0x0000FE1C)
    .field static public literal valuetype System.Compiler.OpCode Starg = int32(0x0000FE0B)
    .field static public literal valuetype System.Compiler.OpCode Starg_S = int32(0x00000010)
    .field static public literal valuetype System.Compiler.OpCode Stelem = int32(0x000000A4)
    .field static public literal valuetype System.Compiler.OpCode Stelem_I = int32(0x0000009B)
    .field static public literal valuetype System.Compiler.OpCode Stelem_I1 = int32(0x0000009C)
    .field static public literal valuetype System.Compiler.OpCode Stelem_I2 = int32(0x0000009D)
    .field static public literal valuetype System.Compiler.OpCode Stelem_I4 = int32(0x0000009E)
    .field static public literal valuetype System.Compiler.OpCode Stelem_I8 = int32(0x0000009F)
    .field static public literal valuetype System.Compiler.OpCode Stelem_R4 = int32(0x000000A0)
    .field static public literal valuetype System.Compiler.OpCode Stelem_R8 = int32(0x000000A1)
    .field static public literal valuetype System.Compiler.OpCode Stelem_Ref = int32(0x000000A2)
    .field static public literal valuetype System.Compiler.OpCode Stfld = int32(0x0000007D)
    .field static public literal valuetype System.Compiler.OpCode Stind_I = int32(0x000000DF)
    .field static public literal valuetype System.Compiler.OpCode Stind_I1 = int32(0x00000052)
    .field static public literal valuetype System.Compiler.OpCode Stind_I2 = int32(0x00000053)
    .field static public literal valuetype System.Compiler.OpCode Stind_I4 = int32(0x00000054)
    .field static public literal valuetype System.Compiler.OpCode Stind_I8 = int32(0x00000055)
    .field static public literal valuetype System.Compiler.OpCode Stind_R4 = int32(0x00000056)
    .field static public literal valuetype System.Compiler.OpCode Stind_R8 = int32(0x00000057)
    .field static public literal valuetype System.Compiler.OpCode Stind_Ref = int32(0x00000051)
    .field static public literal valuetype System.Compiler.OpCode Stloc = int32(0x0000FE0E)
    .field static public literal valuetype System.Compiler.OpCode Stloc_0 = int32(0x0000000A)
    .field static public literal valuetype System.Compiler.OpCode Stloc_1 = int32(0x0000000B)
    .field static public literal valuetype System.Compiler.OpCode Stloc_2 = int32(0x0000000C)
    .field static public literal valuetype System.Compiler.OpCode Stloc_3 = int32(0x0000000D)
    .field static public literal valuetype System.Compiler.OpCode Stloc_S = int32(0x00000013)
    .field static public literal valuetype System.Compiler.OpCode Stobj = int32(0x00000081)
    .field static public literal valuetype System.Compiler.OpCode Stsfld = int32(0x00000080)
    .field static public literal valuetype System.Compiler.OpCode Sub = int32(0x00000059)
    .field static public literal valuetype System.Compiler.OpCode Sub_Ovf = int32(0x000000DA)
    .field static public literal valuetype System.Compiler.OpCode Sub_Ovf_Un = int32(0x000000DB)
    .field static public literal valuetype System.Compiler.OpCode Switch = int32(0x00000045)
    .field static public literal valuetype System.Compiler.OpCode Tail_ = int32(0x0000FE14)
    .field static public literal valuetype System.Compiler.OpCode Throw = int32(0x0000007A)
    .field static public literal valuetype System.Compiler.OpCode Unaligned_ = int32(0x0000FE12)
    .field static public literal valuetype System.Compiler.OpCode Unbox = int32(0x00000079)
    .field static public literal valuetype System.Compiler.OpCode Unbox_Any = int32(0x000000A5)
    .field static public literal valuetype System.Compiler.OpCode Volatile_ = int32(0x0000FE13)
    .field static public literal valuetype System.Compiler.OpCode Xor = int32(0x00000061)
    .field static public literal valuetype System.Compiler.OpCode _Catch = int32(0x0000FEFC)
    .field static public literal valuetype System.Compiler.OpCode _EndFilter = int32(0x0000FEFB)
    .field static public literal valuetype System.Compiler.OpCode _EndHandler = int32(0x0000FEFF)
    .field static public literal valuetype System.Compiler.OpCode _EndTry = int32(0x0000FEF9)
    .field static public literal valuetype System.Compiler.OpCode _Fault = int32(0x0000FEFE)
    .field static public literal valuetype System.Compiler.OpCode _Filter = int32(0x0000FEFA)
    .field static public literal valuetype System.Compiler.OpCode _Finally = int32(0x0000FEFD)
    .field static public literal valuetype System.Compiler.OpCode _Locals = int32(0x0000FEF7)
    .field static public literal valuetype System.Compiler.OpCode _Try = int32(0x0000FEF8)
  }
  .class public OptionalModifier
    extends System.Compiler.TypeModifier
  {
    .method public static hidebysig 
      class System.Compiler.OptionalModifier For(class System.Compiler.TypeNode modifier, class System.Compiler.TypeNode modified)
    {
      ret
    }
  }
  .class public OptionalModifierTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.TypeNode modifier)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.TypeNode modifier, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ModifiedType
    .field public class System.Compiler.TypeNode Modifier
  }
  .class public sealed PESection
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.PESection SData = int32(0x00000001)
    .field static public literal valuetype System.Compiler.PESection TLS = int32(0x00000002)
    .field static public literal valuetype System.Compiler.PESection Text = int32(0x00000000)
  }
  .class public sealed PInvokeFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.PInvokeFlags BestFitDisabled = int32(0x00000020)
    .field static public literal valuetype System.Compiler.PInvokeFlags BestFitEnabled = int32(0x00000010)
    .field static public literal valuetype System.Compiler.PInvokeFlags BestFitMask = int32(0x00000030)
    .field static public literal valuetype System.Compiler.PInvokeFlags BestFitUseAsm = int32(0x00000000)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallConvCdecl = int32(0x00000200)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallConvFastcall = int32(0x00000500)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallConvStdcall = int32(0x00000300)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallConvThiscall = int32(0x00000400)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallConvWinapi = int32(0x00000100)
    .field static public literal valuetype System.Compiler.PInvokeFlags CallingConvMask = int32(0x00000700)
    .field static public literal valuetype System.Compiler.PInvokeFlags CharSetAns = int32(0x00000002)
    .field static public literal valuetype System.Compiler.PInvokeFlags CharSetAuto = int32(0x00000006)
    .field static public literal valuetype System.Compiler.PInvokeFlags CharSetMask = int32(0x00000006)
    .field static public literal valuetype System.Compiler.PInvokeFlags CharSetNotSpec = int32(0x00000000)
    .field static public literal valuetype System.Compiler.PInvokeFlags CharSetUnicode = int32(0x00000004)
    .field static public literal valuetype System.Compiler.PInvokeFlags NoMangle = int32(0x00000001)
    .field static public literal valuetype System.Compiler.PInvokeFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.PInvokeFlags SupportsLastError = int32(0x00000040)
    .field static public literal valuetype System.Compiler.PInvokeFlags ThrowOnUnmappableCharDisabled = int32(0x00002000)
    .field static public literal valuetype System.Compiler.PInvokeFlags ThrowOnUnmappableCharEnabled = int32(0x00001000)
    .field static public literal valuetype System.Compiler.PInvokeFlags ThrowOnUnmappableCharMask = int32(0x00003000)
    .field static public literal valuetype System.Compiler.PInvokeFlags ThrowOnUnmappableCharUseAsm = int32(0x00000000)
  }
  .class public Parameter
    extends System.Compiler.Variable
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.AttributeList attributes, valuetype System.Compiler.ParameterFlags 'flags', class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type', class System.Compiler.Literal defaultValue, class System.Compiler.MarshallingInformation marshallingInformation)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsIn()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsIn(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsOptional()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsOptional(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsOut()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsOut(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetParamArrayElementType()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode GetParamArrayAttribute()
    {
      ret
    }
    .field public int32 ArgumentListIndex
    .field public class System.Compiler.AttributeList Attributes
    .field public class System.Compiler.Method DeclaringMethod
    .field public class System.Compiler.Expression DefaultValue
    .field public valuetype System.Compiler.ParameterFlags Flags
    .field public class System.Compiler.MarshallingInformation MarshallingInformation
    .field public int32 ParameterListIndex
    .field family class System.Compiler.AttributeNode paramArrayAttribute
    .field family class System.Compiler.TypeNode paramArrayElementType
    .property instance bool IsIn()
    {
      .get instance bool System.Compiler.Parameter::get_IsIn()
      .set instance void System.Compiler.Parameter::set_IsIn(bool)
    }
    .property instance bool IsOptional()
    {
      .get instance bool System.Compiler.Parameter::get_IsOptional()
      .set instance void System.Compiler.Parameter::set_IsOptional(bool)
    }
    .property instance bool IsOut()
    {
      .get instance bool System.Compiler.Parameter::get_IsOut()
      .set instance void System.Compiler.Parameter::set_IsOut(bool)
    }
  }
  .class public ParameterBinding
    extends System.Compiler.Parameter
    implements System.Compiler.IUniqueKey
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Parameter boundParameter, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public virtual hidebysig 
      instance int32 GetHashCode()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool Equals(object obj)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.IUniqueKey.get_UniqueId()
    {
      .override System.Compiler.IUniqueKey::get_UniqueId
      ret
    }
    .field public class System.Compiler.Parameter BoundParameter
    .property instance int32 System.Compiler.IUniqueKey.UniqueId()
    {
      .get instance int32 System.Compiler.ParameterBinding::System.Compiler.IUniqueKey.get_UniqueId()
    }
  }
  .class public ParameterField
    extends System.Compiler.Field
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.FieldFlags 'flags', class System.Compiler.Identifier name, class System.Compiler.TypeNode Type, class System.Compiler.Literal defaultValue)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Parameter get_Parameter()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Parameter(class System.Compiler.Parameter 'value')
    {
      ret
    }
    .field family class System.Compiler.Parameter parameter
    .property instance class System.Compiler.Parameter Parameter()
    {
      .get instance class System.Compiler.Parameter System.Compiler.ParameterField::get_Parameter()
      .set instance void System.Compiler.ParameterField::set_Parameter(class System.Compiler.Parameter)
    }
  }
  .class public sealed ParameterFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.ParameterFlags HasDefault = int32(0x00001000)
    .field static public literal valuetype System.Compiler.ParameterFlags HasFieldMarshal = int32(0x00002000)
    .field static public literal valuetype System.Compiler.ParameterFlags In = int32(0x00000001)
    .field static public literal valuetype System.Compiler.ParameterFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.ParameterFlags Optional = int32(0x00000010)
    .field static public literal valuetype System.Compiler.ParameterFlags Out = int32(0x00000002)
    .field static public literal valuetype System.Compiler.ParameterFlags ReservedMask = int32(0x0000F000)
  }
  .class public sealed ParameterList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ParameterList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Parameter get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Parameter Current()
      {
        .get instance class System.Compiler.Parameter System.Compiler.ParameterList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Parameter[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Parameter element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ParameterList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Parameter get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Parameter 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ParameterList/Enumerator GetEnumerator()
    {
      ret
    }
    .field static public initonly class System.Compiler.ParameterList Empty
    .property instance class System.Compiler.Parameter Item(int32)
    {
      .get instance class System.Compiler.Parameter System.Compiler.ParameterList::get_Item(int32)
      .set instance void System.Compiler.ParameterList::set_Item(int32, class System.Compiler.Parameter)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ParameterList::get_Length()
      .set instance void System.Compiler.ParameterList::set_Length(int32)
    }
  }
  .class public sealed PeKindFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.PeKindFlags AMD = int32(0x00000008)
    .field static public literal valuetype System.Compiler.PeKindFlags ILonly = int32(0x00000001)
    .field static public literal valuetype System.Compiler.PeKindFlags Requires32bits = int32(0x00000002)
    .field static public literal valuetype System.Compiler.PeKindFlags Requires64bits = int32(0x00000004)
  }
  .class public sealed PlatformType
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.PlatformType cli1 = int32(0x00000004)
    .field static public literal valuetype System.Compiler.PlatformType notSpecified = int32(0x00000000)
    .field static public literal valuetype System.Compiler.PlatformType v1 = int32(0x00000001)
    .field static public literal valuetype System.Compiler.PlatformType v11 = int32(0x00000002)
    .field static public literal valuetype System.Compiler.PlatformType v2 = int32(0x00000003)
  }
  .class public Pointer
    extends System.Compiler.TypeNode
  {
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class [mscorlib]System.Type GetRuntimeType()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsAssignableTo(class System.Compiler.TypeNode targetType)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsUnmanaged()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance string FullName()
    {
      .get instance string System.Compiler.Pointer::get_FullName()
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.Pointer::get_IsStructural()
    }
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.Pointer::get_IsUnmanaged()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.Pointer::get_StructuralElementTypes()
    }
  }
  .class public PointerTypeExpression
    extends System.Compiler.Pointer
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
  .class public PostfixExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.NodeType Operator, valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .field public valuetype System.Compiler.NodeType Operator
    .field public class System.Compiler.Method OperatorOverload
  }
  .class public PrefixExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.NodeType Operator, valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .field public valuetype System.Compiler.NodeType Operator
    .field public class System.Compiler.Method OperatorOverload
  }
  .class public sealed ProcessorType
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.ProcessorType Any = int32(0x00000000)
    .field static public literal valuetype System.Compiler.ProcessorType Itanium = int32(0x00000003)
    .field static public literal valuetype System.Compiler.ProcessorType _x64 = int32(0x00000002)
    .field static public literal valuetype System.Compiler.ProcessorType _x86 = int32(0x00000001)
  }
  .class public Property
    extends System.Compiler.Member
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.PropertyFlags 'flags', class System.Compiler.Identifier name, class System.Compiler.Method getter, class System.Compiler.Method setter)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method family virtual hidebysig 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.Property GetProperty(class [mscorlib]System.Reflection.PropertyInfo propertyInfo)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.PropertyInfo GetPropertyInfo()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance object GetValue(object targetObject, object[] indices)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Literal GetValue(class System.Compiler.Literal targetObject, class System.Compiler.Literal[] indices)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance void SetValue(object targetObject, object 'value', object[] indices)
    {
      .param [3]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance void SetValue(class System.Compiler.Literal targetObject, class System.Compiler.Literal 'value', class System.Compiler.Literal[] indices)
    {
      .param [3]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_HelpText()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_HelpText(string 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public hidebysig specialname 
      instance bool get_IsVirtual()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.Member get_OverriddenMember()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_OverriddenMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.Property get_OverriddenProperty()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_OverriddenProperty(class System.Compiler.Property 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.ParameterList get_Parameters()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Parameters(class System.Compiler.ParameterList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParametersMatch(class System.Compiler.ParameterList parameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool ParameterTypesMatch(class System.Compiler.TypeNodeList argumentTypes)
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_Type()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Type(class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .field public valuetype System.Compiler.PropertyFlags Flags
    .field public class System.Compiler.Method Getter
    .field public class System.Compiler.TypeNodeList ImplementedTypeExpressions
    .field public class System.Compiler.TypeNodeList ImplementedTypes
    .field static public initonly class System.Compiler.Property NotSpecified
    .field public class System.Compiler.MethodList OtherMethods
    .field public class System.Compiler.Method Setter
    .field public class System.Compiler.TypeNode TypeExpression
    .field family string fullName
    .field family class System.Compiler.Property overriddenProperty
    .field family class [mscorlib]System.Reflection.PropertyInfo propertyInfo
    .field family class System.Compiler.TypeNode 'type'
    .property instance string FullName()
    {
      .get instance string System.Compiler.Property::get_FullName()
    }
    .property instance string HelpText()
    {
      .get instance string System.Compiler.Property::get_HelpText()
      .set instance void System.Compiler.Property::set_HelpText(string)
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.Property::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.Property::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.Property::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.Property::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.Property::get_IsFamilyOrAssembly()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.Property::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.Property::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.Property::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.Property::get_IsStatic()
    }
    .property instance bool IsVirtual()
    {
      .get instance bool System.Compiler.Property::get_IsVirtual()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.Property::get_IsVisibleOutsideAssembly()
    }
    .property instance class System.Compiler.Member OverriddenMember()
    {
      .get instance class System.Compiler.Member System.Compiler.Property::get_OverriddenMember()
      .set instance void System.Compiler.Property::set_OverriddenMember(class System.Compiler.Member)
    }
    .property instance class System.Compiler.Property OverriddenProperty()
    {
      .get instance class System.Compiler.Property System.Compiler.Property::get_OverriddenProperty()
      .set instance void System.Compiler.Property::set_OverriddenProperty(class System.Compiler.Property)
    }
    .property instance class System.Compiler.ParameterList Parameters()
    {
      .get instance class System.Compiler.ParameterList System.Compiler.Property::get_Parameters()
      .set instance void System.Compiler.Property::set_Parameters(class System.Compiler.ParameterList)
    }
    .property instance class System.Compiler.TypeNode Type()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.Property::get_Type()
      .set instance void System.Compiler.Property::set_Type(class System.Compiler.TypeNode)
    }
  }
  .class public sealed PropertyFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.PropertyFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.PropertyFlags RTSpecialName = int32(0x00000400)
    .field static public literal valuetype System.Compiler.PropertyFlags ReservedMask = int32(0x0000F400)
    .field static public literal valuetype System.Compiler.PropertyFlags SpecialName = int32(0x00000200)
  }
  .class public sealed PropertyList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.PropertyList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Property get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Property Current()
      {
        .get instance class System.Compiler.Property System.Compiler.PropertyList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Property element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Property get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Property 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.PropertyList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Property Item(int32)
    {
      .get instance class System.Compiler.Property System.Compiler.PropertyList::get_Item(int32)
      .set instance void System.Compiler.PropertyList::set_Item(int32, class System.Compiler.Property)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.PropertyList::get_Length()
    }
  }
  .class public QualifiedIdentifier
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression qualifier, class System.Compiler.Identifier identifier)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression qualifier, class System.Compiler.Identifier identifier, valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression qualifier, class System.Compiler.Identifier identifier, valuetype System.Compiler.SourceContext sourceContext, bool qualifierIsNamespace)
    {
      ret
    }
    .method public virtual hidebysig 
      instance string ToString()
    {
      ret
    }
    .field public class System.Compiler.Expression BoundMember
    .field public class System.Compiler.Identifier Identifier
    .field public class System.Compiler.Expression Qualifier
    .field public bool QualifierIsNamespace
  }
  .class public Reference
    extends System.Compiler.TypeNode
  {
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Reference GetReferenceType()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class [mscorlib]System.Type GetRuntimeType()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance string FullName()
    {
      .get instance string System.Compiler.Reference::get_FullName()
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.Reference::get_IsStructural()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.Reference::get_StructuralElementTypes()
    }
  }
  .class public ReferenceTypeExpression
    extends System.Compiler.Reference
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
  .class public Repeat
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Condition
  }
  .class public RequiredModifier
    extends System.Compiler.TypeModifier
  {
    .method public static hidebysig 
      class System.Compiler.RequiredModifier For(class System.Compiler.TypeNode modifier, class System.Compiler.TypeNode modified)
    {
      ret
    }
  }
  .class public RequiredModifierTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.TypeNode modifier)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, class System.Compiler.TypeNode modifier, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ModifiedType
    .field public class System.Compiler.TypeNode Modifier
  }
  .class public sequential sealed Resource
    extends [mscorlib]System.ValueType
  {
    .field public bool IsPublic
    .field public string Name
    .field public class System.Compiler.Module DefiningModule
    .field public unsigned int8[] Data
  }
  .class public sealed ResourceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ResourceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance valuetype System.Compiler.Resource get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance valuetype System.Compiler.Resource Current()
      {
        .get instance valuetype System.Compiler.Resource System.Compiler.ResourceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(valuetype System.Compiler.Resource element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ResourceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance valuetype System.Compiler.Resource get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, valuetype System.Compiler.Resource 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ResourceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance valuetype System.Compiler.Resource Item(int32)
    {
      .get instance valuetype System.Compiler.Resource System.Compiler.ResourceList::get_Item(int32)
      .set instance void System.Compiler.ResourceList::set_Item(int32, valuetype System.Compiler.Resource)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ResourceList::get_Length()
    }
  }
  .class public ResourceUse
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Statement ResourceAcquisition
    .field public class System.Compiler.BlockScope ScopeForTemporaryVariable
  }
  .class public Return
    extends System.Compiler.ExpressionStatement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
  }
  .class public Scope
    extends System.Compiler.Class
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Scope outerScope)
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Scope get_OuterScope()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_OuterScope(class System.Compiler.Scope 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetType(class System.Compiler.Identifier typeName)
    {
      ret
    }
    .field family class System.Compiler.Scope outerScope
    .property instance class System.Compiler.Scope OuterScope()
    {
      .get instance class System.Compiler.Scope System.Compiler.Scope::get_OuterScope()
      .set instance void System.Compiler.Scope::set_OuterScope(class System.Compiler.Scope)
    }
  }
  .class public sealed ScopeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.ScopeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Scope get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Scope Current()
      {
        .get instance class System.Compiler.Scope System.Compiler.ScopeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Scope[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Scope element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ScopeList Clone()
    {
      ret
    }
    .method public hidebysig 
      instance void Insert(class System.Compiler.Scope element, int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig 
      instance int32 SearchFor(class System.Compiler.Scope element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Scope get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Scope 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.ScopeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Scope Item(int32)
    {
      .get instance class System.Compiler.Scope System.Compiler.ScopeList::get_Item(int32)
      .set instance void System.Compiler.ScopeList::set_Item(int32, class System.Compiler.Scope)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.ScopeList::get_Length()
    }
  }
  .class public SecurityAttribute
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance string get_SerializedPermissions()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_SerializedPermissions(string 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class [mscorlib]System.Security.PermissionSet get_Permissions()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Permissions(class [mscorlib]System.Security.PermissionSet 'value')
    {
      ret
    }
    .method family hidebysig 
      instance class [mscorlib]System.Security.SecurityElement GetSecurityElement()
    {
      ret
    }
    .method family hidebysig 
      instance class [mscorlib]System.Security.PermissionSet InstantiatePermissionAttributes()
    {
      ret
    }
    .method family hidebysig 
      instance object GetPermissionOrSetOfPermissionsFromAttribute(class System.Compiler.AttributeNode attr)
    {
      ret
    }
    .field public valuetype [mscorlib]System.Security.Permissions.SecurityAction Action
    .field public class System.Compiler.AttributeList PermissionAttributes
    .field family class [mscorlib]System.Security.PermissionSet permissions
    .field family string serializedPermissions
    .property instance class [mscorlib]System.Security.PermissionSet Permissions()
    {
      .get instance class [mscorlib]System.Security.PermissionSet System.Compiler.SecurityAttribute::get_Permissions()
      .set instance void System.Compiler.SecurityAttribute::set_Permissions(class [mscorlib]System.Security.PermissionSet)
    }
    .property instance string SerializedPermissions()
    {
      .get instance string System.Compiler.SecurityAttribute::get_SerializedPermissions()
      .set instance void System.Compiler.SecurityAttribute::set_SerializedPermissions(string)
    }
  }
  .class public sealed SecurityAttributeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.SecurityAttributeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.SecurityAttribute get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.SecurityAttribute Current()
      {
        .get instance class System.Compiler.SecurityAttribute System.Compiler.SecurityAttributeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.SecurityAttribute element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.SecurityAttributeList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.SecurityAttribute get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.SecurityAttribute 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.SecurityAttributeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.SecurityAttribute Item(int32)
    {
      .get instance class System.Compiler.SecurityAttribute System.Compiler.SecurityAttributeList::get_Item(int32)
      .set instance void System.Compiler.SecurityAttributeList::set_Item(int32, class System.Compiler.SecurityAttribute)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.SecurityAttributeList::get_Length()
    }
  }
  .class public sealed SeekOrigin
    extends [mscorlib]System.Enum
  {
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.SeekOrigin Begin = int32(0x00000000)
    .field static public literal valuetype System.Compiler.SeekOrigin Current = int32(0x00000001)
    .field static public literal valuetype System.Compiler.SeekOrigin End = int32(0x00000002)
  }
  .class public SetterValue
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public SnippetParser
    extends System.Compiler.StandardVisitor
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.IParserFactory defaultParserFactory, class System.Compiler.Module symbolTable, class System.Compiler.ErrorNodeList errorNodes, class [System]System.CodeDom.Compiler.CompilerParameters options)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Node VisitUnknownNodeType(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Block VisitBlock(class System.Compiler.Block block)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.CompilationUnit VisitCompilationUnitSnippet(class System.Compiler.CompilationUnitSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitExpressionSnippet(class System.Compiler.ExpressionSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.StatementSnippet VisitStatementSnippet(class System.Compiler.StatementSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeMemberSnippet VisitTypeMemberSnippet(class System.Compiler.TypeMemberSnippet snippet)
    {
      ret
    }
    .field public class System.Compiler.StatementList CurrentStatementList
    .field public class System.Compiler.IParserFactory DefaultParserFactory
    .field public class System.Compiler.ErrorNodeList ErrorNodes
    .field public class [System]System.CodeDom.Compiler.CompilerParameters Options
    .field public class System.Compiler.Module SymbolTable
  }
  .class public sequential sealed SourceChange
    extends [mscorlib]System.ValueType
  {
    .field public valuetype System.Compiler.SourceContext SourceContext
    .field public string ChangedText
  }
  .class public sealed SourceChangeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.SourceChangeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance valuetype System.Compiler.SourceChange get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance valuetype System.Compiler.SourceChange Current()
      {
        .get instance valuetype System.Compiler.SourceChange System.Compiler.SourceChangeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.SourceChange[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(valuetype System.Compiler.SourceChange element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.SourceChangeList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance valuetype System.Compiler.SourceChange get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, valuetype System.Compiler.SourceChange 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.SourceChangeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance valuetype System.Compiler.SourceChange Item(int32)
    {
      .get instance valuetype System.Compiler.SourceChange System.Compiler.SourceChangeList::get_Item(int32)
      .set instance void System.Compiler.SourceChangeList::set_Item(int32, valuetype System.Compiler.SourceChange)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.SourceChangeList::get_Length()
    }
  }
  .class public sequential sealed SourceContext
    extends [mscorlib]System.ValueType
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Document document)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Document document, int32 startPos, int32 endPos)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Document document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_StartLine()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_StartColumn()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_EndLine()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_EndColumn()
    {
      ret
    }
    .method public hidebysig 
      instance bool Encloses(int32 line, int32 column)
    {
      ret
    }
    .method public hidebysig 
      instance bool Encloses(valuetype System.Compiler.SourceContext sourceContext)
    {
      ret
    }
    .method public hidebysig specialname 
      instance string get_SourceText()
    {
      ret
    }
    .field public class System.Compiler.Document Document
    .field public int32 EndPos
    .field public int32 StartPos
    .property instance int32 EndColumn()
    {
      .get instance int32 System.Compiler.SourceContext::get_EndColumn()
    }
    .property instance int32 EndLine()
    {
      .get instance int32 System.Compiler.SourceContext::get_EndLine()
    }
    .property instance string SourceText()
    {
      .get instance string System.Compiler.SourceContext::get_SourceText()
    }
    .property instance int32 StartColumn()
    {
      .get instance int32 System.Compiler.SourceContext::get_StartColumn()
    }
    .property instance int32 StartLine()
    {
      .get instance int32 System.Compiler.SourceContext::get_StartLine()
    }
  }
  .class public Specializer
    extends System.Compiler.StandardVisitor
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module targetModule, class System.Compiler.TypeNodeList pars, class System.Compiler.TypeNodeList args)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Visitor callingVisitor)
    {
      ret
    }
    .method public virtual hidebysig 
      instance void TransferStateTo(class System.Compiler.Visitor targetVisitor)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.DelegateNode VisitDelegateNode(class System.Compiler.DelegateNode delegateNode)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Member VisitMemberReference(class System.Compiler.Member member)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Method VisitMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MethodList VisitMethodList(class System.Compiler.MethodList methods)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeNode(class System.Compiler.TypeNode typeNode)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitTypeExpression(class System.Compiler.Expression expr)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeParameter(class System.Compiler.TypeNode typeParameter)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.TypeNode VisitTypeReference(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field public class System.Compiler.Method CurrentMethod
    .field public class System.Compiler.TypeNode CurrentType
    .field public class System.Compiler.Module TargetModule
    .field public class System.Compiler.TypeNodeList args
    .field public class System.Compiler.TypeNodeList pars
  }
  .class public StandardIds
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public initonly class System.Compiler.Identifier Add
    .field static public initonly class System.Compiler.Identifier Address
    .field static public initonly class System.Compiler.Identifier AllowMultiple
    .field static public initonly class System.Compiler.Identifier Anonymity
    .field static public initonly class System.Compiler.Identifier ArgumentOutOfRangeException
    .field static public initonly class System.Compiler.Identifier Assembly
    .field static public initonly class System.Compiler.Identifier Assert
    .field static public initonly class System.Compiler.Identifier BeginInvoke
    .field static public initonly class System.Compiler.Identifier CCtor
    .field static public initonly class System.Compiler.Identifier CallingConvention
    .field static public initonly class System.Compiler.Identifier CciTypeExtensions
    .field static public initonly class System.Compiler.Identifier CharSet
    .field static public initonly class System.Compiler.Identifier Class
    .field static public initonly class System.Compiler.Identifier ClassParameter
    .field static public initonly class System.Compiler.Identifier Clear
    .field static public initonly class System.Compiler.Identifier Closure
    .field static public initonly class System.Compiler.Identifier Collection
    .field static public initonly class System.Compiler.Identifier Combine
    .field static public initonly class System.Compiler.Identifier Concat
    .field static public initonly class System.Compiler.Identifier Count
    .field static public initonly class System.Compiler.Identifier Ctor
    .field static public initonly class System.Compiler.Identifier Current
    .field static public initonly class System.Compiler.Identifier Dispose
    .field static public initonly class System.Compiler.Identifier ElementType
    .field static public initonly class System.Compiler.Identifier EndInvoke
    .field static public initonly class System.Compiler.Identifier Enter
    .field static public initonly class System.Compiler.Identifier EntryPoint
    .field static public initonly class System.Compiler.Identifier Enum
    .field static public initonly class System.Compiler.Identifier Equals
    .field static public initonly class System.Compiler.Identifier ExactSpelling
    .field static public initonly class System.Compiler.Identifier Exit
    .field static public initonly class System.Compiler.Identifier Finalize
    .field static public initonly class System.Compiler.Identifier FromObject
    .field static public initonly class System.Compiler.Identifier Get
    .field static public initonly class System.Compiler.Identifier GetEnumerator
    .field static public initonly class System.Compiler.Identifier GetHashCode
    .field static public initonly class System.Compiler.Identifier GetTag
    .field static public initonly class System.Compiler.Identifier GetTagAsType
    .field static public initonly class System.Compiler.Identifier GetType
    .field static public initonly class System.Compiler.Identifier GetValue
    .field static public initonly class System.Compiler.Identifier Global
    .field static public initonly class System.Compiler.Identifier IEnumerableGetEnumerator
    .field static public initonly class System.Compiler.Identifier IEnumeratorGetCurrent
    .field static public initonly class System.Compiler.Identifier IEnumeratorReset
    .field static public initonly class System.Compiler.Identifier IFactory
    .field static public initonly class System.Compiler.Identifier IndexOf
    .field static public initonly class System.Compiler.Identifier Inherited
    .field static public initonly class System.Compiler.Identifier Invoke
    .field static public initonly class System.Compiler.Identifier IsInterned
    .field static public initonly class System.Compiler.Identifier IsNull
    .field static public initonly class System.Compiler.Identifier It
    .field static public initonly class System.Compiler.Identifier Item
    .field static public initonly class System.Compiler.Identifier Length
    .field static public initonly class System.Compiler.Identifier Main
    .field static public initonly class System.Compiler.Identifier MemberwiseClone
    .field static public initonly class System.Compiler.Identifier Method
    .field static public initonly class System.Compiler.Identifier MoveNext
    .field static public initonly class System.Compiler.Identifier Namespace
    .field static public initonly class System.Compiler.Identifier New
    .field static public initonly class System.Compiler.Identifier Object
    .field static public initonly class System.Compiler.Identifier Pack
    .field static public initonly class System.Compiler.Identifier Phase
    .field static public initonly class System.Compiler.Identifier Position
    .field static public initonly class System.Compiler.Identifier PreserveSig
    .field static public initonly class System.Compiler.Identifier ReferenceEquals
    .field static public initonly class System.Compiler.Identifier Remove
    .field static public initonly class System.Compiler.Identifier Replace
    .field static public initonly class System.Compiler.Identifier Reset
    .field static public initonly class System.Compiler.Identifier Set
    .field static public initonly class System.Compiler.Identifier SetLastError
    .field static public initonly class System.Compiler.Identifier SetValue
    .field static public initonly class System.Compiler.Identifier Size
    .field static public initonly class System.Compiler.Identifier StructuralTypes
    .field static public initonly class System.Compiler.Identifier System
    .field static public initonly class System.Compiler.Identifier Tag
    .field static public initonly class System.Compiler.Identifier TagType
    .field static public initonly class System.Compiler.Identifier This
    .field static public initonly class System.Compiler.Identifier ThisValue
    .field static public initonly class System.Compiler.Identifier ToObject
    .field static public initonly class System.Compiler.Identifier ToString
    .field static public initonly class System.Compiler.Identifier TypeParameter
    .field static public initonly class System.Compiler.Identifier Value
    .field static public initonly class System.Compiler.Identifier Value__
    .field static public initonly class System.Compiler.Identifier _Deleted
    .field static public initonly class System.Compiler.Identifier callback
    .field static public initonly class System.Compiler.Identifier getCurrent
    .field static public initonly class System.Compiler.Identifier getItem
    .field static public initonly class System.Compiler.Identifier opAddition
    .field static public initonly class System.Compiler.Identifier opBitwiseAnd
    .field static public initonly class System.Compiler.Identifier opBitwiseOr
    .field static public initonly class System.Compiler.Identifier opComma
    .field static public initonly class System.Compiler.Identifier opDecrement
    .field static public initonly class System.Compiler.Identifier opDivision
    .field static public initonly class System.Compiler.Identifier opEquality
    .field static public initonly class System.Compiler.Identifier opExclusiveOr
    .field static public initonly class System.Compiler.Identifier opExplicit
    .field static public initonly class System.Compiler.Identifier opFalse
    .field static public initonly class System.Compiler.Identifier opGreaterThan
    .field static public initonly class System.Compiler.Identifier opGreaterThanOrEqual
    .field static public initonly class System.Compiler.Identifier opImplicit
    .field static public initonly class System.Compiler.Identifier opIncrement
    .field static public initonly class System.Compiler.Identifier opInequality
    .field static public initonly class System.Compiler.Identifier opLeftShift
    .field static public initonly class System.Compiler.Identifier opLessThan
    .field static public initonly class System.Compiler.Identifier opLessThanOrEqual
    .field static public initonly class System.Compiler.Identifier opLogicalNot
    .field static public initonly class System.Compiler.Identifier opModulus
    .field static public initonly class System.Compiler.Identifier opMultiply
    .field static public initonly class System.Compiler.Identifier opOnesComplement
    .field static public initonly class System.Compiler.Identifier opRightShift
    .field static public initonly class System.Compiler.Identifier opSubtraction
    .field static public initonly class System.Compiler.Identifier opTrue
    .field static public initonly class System.Compiler.Identifier opUnaryNegation
    .field static public initonly class System.Compiler.Identifier opUnaryPlus
    .field static public initonly class System.Compiler.Identifier result
  }
  .class public StandardVisitor
    extends System.Compiler.Visitor
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Visitor callingVisitor)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Node VisitUnknownNodeType(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Visitor GetVisitorFor(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Node Visit(class System.Compiler.Node node)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitAddressDereference(class System.Compiler.AddressDereference addr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AliasDefinition VisitAliasDefinition(class System.Compiler.AliasDefinition aliasDefinition)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AliasDefinitionList VisitAliasDefinitionList(class System.Compiler.AliasDefinitionList aliasDefinitions)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitAnonymousNestedFunction(class System.Compiler.AnonymousNestedFunction func)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitApplyToAll(class System.Compiler.ApplyToAll applyToAll)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.ArrayType VisitArrayType(class System.Compiler.ArrayType 'array')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AssemblyNode VisitAssembly(class System.Compiler.AssemblyNode 'assembly')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AssemblyReference VisitAssemblyReference(class System.Compiler.AssemblyReference assemblyReference)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitAssertion(class System.Compiler.Assertion assertion)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitAssumption(class System.Compiler.Assumption assumption)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitAssignmentExpression(class System.Compiler.AssignmentExpression assignment)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitAssignmentStatement(class System.Compiler.AssignmentStatement assignment)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitAttributeConstructor(class System.Compiler.AttributeNode attribute)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeNode VisitAttributeNode(class System.Compiler.AttributeNode attribute)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.AttributeList VisitAttributeList(class System.Compiler.AttributeList attributes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitBase(class System.Compiler.Base Base)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitBinaryExpression(class System.Compiler.BinaryExpression binaryExpression)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Block VisitBlock(class System.Compiler.Block block)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitBlockExpression(class System.Compiler.BlockExpression blockExpression)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.BlockList VisitBlockList(class System.Compiler.BlockList blockList)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitBranch(class System.Compiler.Branch branch)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitCatch(class System.Compiler.Catch Catch)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.CatchList VisitCatchList(class System.Compiler.CatchList catchers)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Class VisitClass(class System.Compiler.Class Class)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitCoerceTuple(class System.Compiler.CoerceTuple coerceTuple)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.CollectionEnumerator VisitCollectionEnumerator(class System.Compiler.CollectionEnumerator ce)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Compilation VisitCompilation(class System.Compiler.Compilation compilation)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.CompilationUnit VisitCompilationUnit(class System.Compiler.CompilationUnit cUnit)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.NodeList VisitNodeList(class System.Compiler.NodeList nodes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.CompilationUnitList VisitCompilationUnitList(class System.Compiler.CompilationUnitList compilationUnits)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.CompilationUnit VisitCompilationUnitSnippet(class System.Compiler.CompilationUnitSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Node VisitComposition(class System.Compiler.Composition comp)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstruct(class System.Compiler.Construct cons)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstructArray(class System.Compiler.ConstructArray consArr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstructDelegate(class System.Compiler.ConstructDelegate consDelegate)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstructFlexArray(class System.Compiler.ConstructFlexArray consArr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstructIterator(class System.Compiler.ConstructIterator consIterator)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitConstructTuple(class System.Compiler.ConstructTuple consTuple)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitContinue(class System.Compiler.Continue Continue)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitCurrentClosure(class System.Compiler.CurrentClosure currentClosure)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.DelegateNode VisitDelegateNode(class System.Compiler.DelegateNode delegateNode)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitDoWhile(class System.Compiler.DoWhile doWhile)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitEndFilter(class System.Compiler.EndFilter endFilter)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitEndFinally(class System.Compiler.EndFinally endFinally)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.EnumNode VisitEnumNode(class System.Compiler.EnumNode enumNode)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Event VisitEvent(class System.Compiler.Event evnt)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitExit(class System.Compiler.Exit exit)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitExpose(class System.Compiler.Expose expose)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitExpression(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ExpressionList VisitExpressionList(class System.Compiler.ExpressionList expressions)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitExpressionSnippet(class System.Compiler.ExpressionSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitExpressionStatement(class System.Compiler.ExpressionStatement statement)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFaultHandler(class System.Compiler.FaultHandler faultHandler)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.FaultHandlerList VisitFaultHandlerList(class System.Compiler.FaultHandlerList faultHandlers)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Field VisitField(class System.Compiler.Field 'field')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Block VisitFieldInitializerBlock(class System.Compiler.FieldInitializerBlock block)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.FieldList VisitFieldList(class System.Compiler.FieldList fields)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFilter(class System.Compiler.Filter 'filter')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.FilterList VisitFilterList(class System.Compiler.FilterList filters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFinally(class System.Compiler.Finally Finally)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFixed(class System.Compiler.Fixed Fixed)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFor(class System.Compiler.For For)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitForEach(class System.Compiler.ForEach forEach)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitFunctionDeclaration(class System.Compiler.FunctionDeclaration functionDeclaration)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitTemplateInstance(class System.Compiler.TemplateInstance templateInstance)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitGoto(class System.Compiler.Goto Goto)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitGotoCase(class System.Compiler.GotoCase gotoCase)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitIdentifier(class System.Compiler.Identifier identifier)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitIf(class System.Compiler.If If)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitImplicitThis(class System.Compiler.ImplicitThis implicitThis)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitIndexer(class System.Compiler.Indexer indexer)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Interface VisitInterface(class System.Compiler.Interface Interface)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Interface VisitInterfaceReference(class System.Compiler.Interface Interface)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.InterfaceList VisitInterfaceReferenceList(class System.Compiler.InterfaceList interfaceReferences)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.InstanceInitializer VisitInstanceInitializer(class System.Compiler.InstanceInitializer cons)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitLabeledStatement(class System.Compiler.LabeledStatement lStatement)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitLiteral(class System.Compiler.Literal 'literal')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitLocal(class System.Compiler.Local local)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitLocalDeclarationsStatement(class System.Compiler.LocalDeclarationsStatement localDeclarations)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.LocalDeclarationList VisitLocalDeclarationList(class System.Compiler.LocalDeclarationList localDeclarations)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.LocalDeclaration VisitLocalDeclaration(class System.Compiler.LocalDeclaration localDeclaration)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitLock(class System.Compiler.Lock Lock)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitLRExpression(class System.Compiler.LRExpression expr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitMemberBinding(class System.Compiler.MemberBinding memberBinding)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MemberList VisitMemberList(class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method VisitMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitMethodCall(class System.Compiler.MethodCall 'call')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Module VisitModule(class System.Compiler.Module module)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ModuleReference VisitModuleReference(class System.Compiler.ModuleReference moduleReference)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitNameBinding(class System.Compiler.NameBinding nameBinding)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitNamedArgument(class System.Compiler.NamedArgument namedArgument)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Namespace VisitNamespace(class System.Compiler.Namespace nspace)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.NamespaceList VisitNamespaceList(class System.Compiler.NamespaceList namespaces)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitParameter(class System.Compiler.Parameter parameter)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ParameterList VisitParameterList(class System.Compiler.ParameterList parameterList)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitPrefixExpression(class System.Compiler.PrefixExpression pExpr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitPostfixExpression(class System.Compiler.PostfixExpression pExpr)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Property VisitProperty(class System.Compiler.Property 'property')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitComprehension(class System.Compiler.Comprehension comprehension)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ComprehensionBinding VisitComprehensionBinding(class System.Compiler.ComprehensionBinding comprehensionBinding)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitQualifiedIdentifier(class System.Compiler.QualifiedIdentifier qualifiedIdentifier)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitRepeat(class System.Compiler.Repeat repeat)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitReturn(class System.Compiler.Return Return)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitAcquire(class System.Compiler.Acquire acquire)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitResourceUse(class System.Compiler.ResourceUse resourceUse)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.SecurityAttribute VisitSecurityAttribute(class System.Compiler.SecurityAttribute attribute)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.SecurityAttributeList VisitSecurityAttributeList(class System.Compiler.SecurityAttributeList attributes)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitSetterValue(class System.Compiler.SetterValue 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.StatementList VisitStatementList(class System.Compiler.StatementList statements)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.StatementSnippet VisitStatementSnippet(class System.Compiler.StatementSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.StaticInitializer VisitStaticInitializer(class System.Compiler.StaticInitializer cons)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Struct VisitStruct(class System.Compiler.Struct Struct)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitSwitch(class System.Compiler.Switch Switch)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.SwitchCase VisitSwitchCase(class System.Compiler.SwitchCase switchCase)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.SwitchCaseList VisitSwitchCaseList(class System.Compiler.SwitchCaseList switchCases)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitSwitchInstruction(class System.Compiler.SwitchInstruction switchInstruction)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitTypeswitch(class System.Compiler.Typeswitch Typeswitch)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeswitchCase VisitTypeswitchCase(class System.Compiler.TypeswitchCase typeswitchCase)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeswitchCaseList VisitTypeswitchCaseList(class System.Compiler.TypeswitchCaseList typeswitchCases)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitTargetExpression(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitTernaryExpression(class System.Compiler.TernaryExpression expression)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitThis(class System.Compiler.This This)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitThrow(class System.Compiler.Throw Throw)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitTry(class System.Compiler.Try Try)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeMemberSnippet VisitTypeMemberSnippet(class System.Compiler.TypeMemberSnippet snippet)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeModifier VisitTypeModifier(class System.Compiler.TypeModifier typeModifier)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode VisitTypeNode(class System.Compiler.TypeNode typeNode)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNodeList VisitTypeNodeList(class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode VisitTypeParameter(class System.Compiler.TypeNode typeParameter)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNodeList VisitTypeParameterList(class System.Compiler.TypeNodeList typeParameters)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode VisitTypeReference(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNodeList VisitTypeReferenceList(class System.Compiler.TypeNodeList typeReferences)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Expression VisitUnaryExpression(class System.Compiler.UnaryExpression unaryExpression)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitVariableDeclaration(class System.Compiler.VariableDeclaration variableDeclaration)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.UsedNamespace VisitUsedNamespace(class System.Compiler.UsedNamespace usedNamespace)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.UsedNamespaceList VisitUsedNamespaceList(class System.Compiler.UsedNamespaceList usedNspaces)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitWhile(class System.Compiler.While While)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Statement VisitYield(class System.Compiler.Yield Yield)
    {
      ret
    }
    .field public class System.Compiler.Visitor callingVisitor
  }
  .class public Statement
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType nodeType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
  .class public sealed StatementList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.StatementList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.Statement get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.Statement Current()
      {
        .get instance class System.Compiler.Statement System.Compiler.StatementList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Statement[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.Statement statement)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.StatementList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Length(int32 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.Statement get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.Statement 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.StatementList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.Statement Item(int32)
    {
      .get instance class System.Compiler.Statement System.Compiler.StatementList::get_Item(int32)
      .set instance void System.Compiler.StatementList::set_Item(int32, class System.Compiler.Statement)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.StatementList::get_Length()
      .set instance void System.Compiler.StatementList::set_Length(int32)
    }
  }
  .class public StatementSnippet
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.IParserFactory parserFactory, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.IParserFactory ParserFactory
  }
  .class public StaticInitializer
    extends System.Compiler.Method
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Method/MethodBodyProvider provider, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, class System.Compiler.Block body)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Reflection.ConstructorInfo GetConstructorInfo()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class [mscorlib]System.Reflection.MethodInfo GetMethodInfo()
    {
      ret
    }
    .field family class [mscorlib]System.Reflection.ConstructorInfo constructorInfo
  }
  .class public StreamTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode elementType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNode ElementType
  }
  .class public sealed StringList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.StringList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance string get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance string Current()
      {
        .get instance string System.Compiler.StringList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(string[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class [System]System.Collections.Specialized.StringCollection stringCollection)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(string element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance string get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, string 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.StringList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance string Item(int32)
    {
      .get instance string System.Compiler.StringList::get_Item(int32)
      .set instance void System.Compiler.StringList::set_Item(int32, string)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.StringList::get_Length()
    }
  }
  .class public sealed StringSourceText
    extends [mscorlib]System.Object
    implements System.Compiler.ISourceText
  {
    .method public hidebysig specialname 
      instance void .ctor(string sourceText, bool isSameAsFileContents)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.ISourceText.get_Length()
    {
      .override System.Compiler.ISourceText::get_Length
      ret
    }
    .method private final virtual hidebysig newslot 
      instance string System.Compiler.ISourceText.Substring(int32 startIndex, int32 length)
    {
      .override System.Compiler.ISourceText::Substring
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance char System.Compiler.ISourceText.get_Item(int32 index)
    {
      .override System.Compiler.ISourceText::get_Item
      ret
    }
    .method private final virtual hidebysig newslot 
      instance void System.Compiler.ISourceText.MakeCollectible()
    {
      .override System.Compiler.ISourceText::MakeCollectible
      ret
    }
    .field public bool IsSameAsFileContents
    .field public initonly string SourceText
    .property instance char System.Compiler.ISourceText.Item(int32)
    {
      .get instance char System.Compiler.StringSourceText::System.Compiler.ISourceText.get_Item(int32)
    }
    .property instance int32 System.Compiler.ISourceText.Length()
    {
      .get instance int32 System.Compiler.StringSourceText::System.Compiler.ISourceText.get_Length()
    }
  }
  .class public Struct
    extends System.Compiler.TypeNode
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Module declaringModule, class System.Compiler.TypeNode declaringType, class System.Compiler.AttributeList attributes, valuetype System.Compiler.TypeFlags 'flags', class System.Compiler.Identifier Namespace, class System.Compiler.Identifier name, class System.Compiler.InterfaceList interfaces, class System.Compiler.MemberList members)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsUnmanaged()
    {
      ret
    }
    .field family bool cachedUnmanaged
    .field family bool cachedUnmanagedIsValid
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.Struct::get_IsUnmanaged()
    }
  }
  .class public Switch
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.SwitchCaseList cases)
    {
      ret
    }
    .field public class System.Compiler.SwitchCaseList Cases
    .field public class System.Compiler.Expression Expression
    .field public class System.Compiler.BlockScope Scope
  }
  .class public SwitchCase
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression label, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Label
  }
  .class public sealed SwitchCaseList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.SwitchCaseList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.SwitchCase get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.SwitchCase Current()
      {
        .get instance class System.Compiler.SwitchCase System.Compiler.SwitchCaseList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.SwitchCase element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.SwitchCaseList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.SwitchCase get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.SwitchCase 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.SwitchCaseList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.SwitchCase Item(int32)
    {
      .get instance class System.Compiler.SwitchCase System.Compiler.SwitchCaseList::get_Item(int32)
      .set instance void System.Compiler.SwitchCaseList::set_Item(int32, class System.Compiler.SwitchCase)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.SwitchCaseList::get_Length()
    }
  }
  .class public SwitchInstruction
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.BlockList targets)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .field public class System.Compiler.BlockList Targets
  }
  .class public sealed SystemAssemblyLocation
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public string Location
  }
  .class public sealed SystemCompilerRuntimeAssemblyLocation
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public string Location
  }
  .class public sealed SystemDataAssemblyLocation
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public string Location
  }
  .class public sealed SystemTypes
    extends [mscorlib]System.Object
  {
    .method public static hidebysig 
      void Clear()
    {
      ret
    }
    .method public static hidebysig 
      void Initialize(bool doNotLockFile, bool getDebugInfo)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public class System.Compiler.Class Activator
    .field static public class System.Compiler.Class AllowPartiallyTrustedCallersAttribute
    .field static public class System.Compiler.Class AppDomain
    .field static public class System.Compiler.Class ApplicationException
    .field static public class System.Compiler.Struct ArgIterator
    .field static public class System.Compiler.Class ArgumentException
    .field static public class System.Compiler.Class ArgumentNullException
    .field static public class System.Compiler.Class ArgumentOutOfRangeException
    .field static public class System.Compiler.Class Array
    .field static public class System.Compiler.Class ArrayList
    .field static public class System.Compiler.Class Assembly
    .field static public class System.Compiler.Class AssemblyCompanyAttribute
    .field static public class System.Compiler.Class AssemblyConfigurationAttribute
    .field static public class System.Compiler.Class AssemblyCopyrightAttribute
    .field static public class System.Compiler.Class AssemblyCultureAttribute
    .field static public class System.Compiler.Class AssemblyDelaySignAttribute
    .field static public class System.Compiler.Class AssemblyDescriptionAttribute
    .field static public class System.Compiler.Class AssemblyFileVersionAttribute
    .field static public class System.Compiler.Class AssemblyFlagsAttribute
    .field static public class System.Compiler.Class AssemblyInformationalVersionAttribute
    .field static public class System.Compiler.Class AssemblyKeyFileAttribute
    .field static public class System.Compiler.Class AssemblyKeyNameAttribute
    .field static public class System.Compiler.Class AssemblyProductAttribute
    .field static public class System.Compiler.Class AssemblyTitleAttribute
    .field static public class System.Compiler.Class AssemblyTrademarkAttribute
    .field static public class System.Compiler.Class AssemblyVersionAttribute
    .field static public class System.Compiler.DelegateNode AsyncCallback
    .field static public class System.Compiler.Class Attribute
    .field static public class System.Compiler.Class AttributeUsageAttribute
    .field static public class System.Compiler.Struct Boolean
    .field static public class System.Compiler.Class CLSCompliantAttribute
    .field static public class System.Compiler.Struct Char
    .field static public class System.Compiler.Class ClassInterfaceAttribute
    .field static public class System.Compiler.Class CodeAccessPermission
    .field static public class System.Compiler.Class CollectionBase
    .field static public class System.Compiler.Class ComImportAttribute
    .field static public class System.Compiler.Class ComRegisterFunctionAttribute
    .field static public class System.Compiler.Class ComSourceInterfacesAttribute
    .field static public class System.Compiler.Class ComUnregisterFunctionAttribute
    .field static public class System.Compiler.Class ComVisibleAttribute
    .field static public class System.Compiler.Class ConditionalAttribute
    .field static public class System.Compiler.Class CultureInfo
    .field static public class System.Compiler.Class DBNull
    .field static public class System.Compiler.Struct DateTime
    .field static public class System.Compiler.Class DebuggableAttribute
    .field static public class System.Compiler.Class DebuggerHiddenAttribute
    .field static public class System.Compiler.Class DebuggerStepThroughAttribute
    .field static public class System.Compiler.EnumNode DebuggingModes
    .field static public class System.Compiler.Struct Decimal
    .field static public class System.Compiler.Class DefaultMemberAttribute
    .field static public class System.Compiler.Class Delegate
    .field static public class System.Compiler.Class DictionaryBase
    .field static public class System.Compiler.Struct DictionaryEntry
    .field static public class System.Compiler.Class DllImportAttribute
    .field static public class System.Compiler.Struct Double
    .field static public class System.Compiler.Class DuplicateWaitObjectException
    .field static public class System.Compiler.Struct DynamicallyTypedReference
    .field static public class System.Compiler.Class Enum
    .field static public class System.Compiler.Class Environment
    .field static public class System.Compiler.Class EventArgs
    .field static public class System.Compiler.Class Exception
    .field static public class System.Compiler.Class ExecutionEngineException
    .field static public class System.Compiler.Class FieldOffsetAttribute
    .field static public class System.Compiler.Class FlagsAttribute
    .field static public class System.Compiler.Class GC
    .field static public class System.Compiler.Struct GenericArraySegment
    .field static public class System.Compiler.Class GenericArrayToIEnumerableAdapter
    .field static public class System.Compiler.Class GenericDictionary
    .field static public class System.Compiler.Interface GenericICollection
    .field static public class System.Compiler.Interface GenericIComparable
    .field static public class System.Compiler.Interface GenericIComparer
    .field static public class System.Compiler.Interface GenericIDictionary
    .field static public class System.Compiler.Interface GenericIEnumerable
    .field static public class System.Compiler.Interface GenericIEnumerator
    .field static public class System.Compiler.Interface GenericIList
    .field static public class System.Compiler.Struct GenericKeyValuePair
    .field static public class System.Compiler.Class GenericList
    .field static public class System.Compiler.Struct GenericNullable
    .field static public class System.Compiler.Class GenericQueue
    .field static public class System.Compiler.Class GenericSortedDictionary
    .field static public class System.Compiler.Class GenericStack
    .field static public char GenericTypeNamesMangleChar
    .field static public class System.Compiler.Struct Guid
    .field static public class System.Compiler.Class GuidAttribute
    .field static public class System.Compiler.Struct HandleRef
    .field static public class System.Compiler.Class Hashtable
    .field static public class System.Compiler.Interface IASyncResult
    .field static public class System.Compiler.Interface ICloneable
    .field static public class System.Compiler.Interface ICollection
    .field static public class System.Compiler.Interface IComparable
    .field static public class System.Compiler.Interface IComparer
    .field static public class System.Compiler.Interface IDictionary
    .field static public class System.Compiler.Interface IDisposable
    .field static public class System.Compiler.Interface IEnumerable
    .field static public class System.Compiler.Interface IEnumerator
    .field static public class System.Compiler.Interface IFormatProvider
    .field static public class System.Compiler.Interface IHashCodeProvider
    .field static public class System.Compiler.Interface IList
    .field static public class System.Compiler.Interface IMembershipCondition
    .field static public class System.Compiler.Interface IPermission
    .field static public class System.Compiler.Interface ISerializable
    .field static public class System.Compiler.Interface IStackWalk
    .field static public class System.Compiler.Class ImportedFromTypeLibAttribute
    .field static public class System.Compiler.Class InAttribute
    .field static public class System.Compiler.Class IndexOutOfRangeException
    .field static public class System.Compiler.Class IndexerNameAttribute
    .field static public class System.Compiler.Struct Int16
    .field static public class System.Compiler.Struct Int32
    .field static public class System.Compiler.Struct Int64
    .field static public class System.Compiler.Struct Int8
    .field static public class System.Compiler.Struct IntPtr
    .field static public class System.Compiler.Class InterfaceTypeAttribute
    .field static public class System.Compiler.Class InternalsVisibleToAttribute
    .field static public class System.Compiler.Class InvalidCastException
    .field static public class System.Compiler.Class InvalidOperationException
    .field static public class System.Compiler.Class Marshal
    .field static public class System.Compiler.Class MarshalByRefObject
    .field static public class System.Compiler.Class MemberInfo
    .field static public class System.Compiler.Class MethodImplAttribute
    .field static public class System.Compiler.Class Monitor
    .field static public class System.Compiler.Class MulticastDelegate
    .field static public class System.Compiler.Struct NativeOverlapped
    .field static public class System.Compiler.Class NonNullType
    .field static public class System.Compiler.Class NonSerializedAttribute
    .field static public class System.Compiler.Class NotNullAttribute
    .field static public class System.Compiler.Class NotSupportedException
    .field static public class System.Compiler.Class NullReferenceException
    .field static public class System.Compiler.Class Object
    .field static public class System.Compiler.Class ObsoleteAttribute
    .field static public class System.Compiler.Class OptionalAttribute
    .field static public class System.Compiler.Class OutAttribute
    .field static public class System.Compiler.Class OutOfMemoryException
    .field static public class System.Compiler.Class ParamArrayAttribute
    .field static public class System.Compiler.Class ParameterInfo
    .field static public class System.Compiler.Class Queue
    .field static public class System.Compiler.Class ReadOnlyCollectionBase
    .field static public class System.Compiler.Class ResourceManager
    .field static public class System.Compiler.Class ResourceSet
    .field static public class System.Compiler.Class RuntimeCompatibilityAttribute
    .field static public class System.Compiler.Struct RuntimeTypeHandle
    .field static public class System.Compiler.Class STAThreadAttribute
    .field static public class System.Compiler.Class SatelliteContractVersionAttribute
    .field static public class System.Compiler.EnumNode SecurityAction
    .field static public class System.Compiler.Class SecurityAttribute
    .field static public class System.Compiler.Class SecurityCriticalAttribute
    .field static public class System.Compiler.Class SecurityTransparentAttribute
    .field static public class System.Compiler.Class SecurityTreatAsSafeAttribute
    .field static public class System.Compiler.Class SerializableAttribute
    .field static public class System.Compiler.Class SerializationInfo
    .field static public class System.Compiler.Class ShadowsAssemblyAttribute
    .field static public class System.Compiler.Struct Single
    .field static public class System.Compiler.Class Stack
    .field static public class System.Compiler.Class StackOverflowException
    .field static public class System.Compiler.Class Stream
    .field static public class System.Compiler.Struct StreamingContext
    .field static public class System.Compiler.Class String
    .field static public class System.Compiler.Class StringBuilder
    .field static public class System.Compiler.Class StringComparer
    .field static public class System.Compiler.EnumNode StringComparison
    .field static public class System.Compiler.Class StructLayoutAttribute
    .field static public class System.Compiler.Class SuppressMessageAttribute
    .field static public class System.Compiler.Class SuppressUnmanagedCodeSecurityAttribute
    .field static public class System.Compiler.AssemblyNode SystemAssembly
    .field static public class System.Compiler.Class SystemException
    .field static public class System.Compiler.Class Thread
    .field static public class System.Compiler.Struct TimeSpan
    .field static public class System.Compiler.Class Type
    .field static public class System.Compiler.Struct UInt16
    .field static public class System.Compiler.Struct UInt32
    .field static public class System.Compiler.Struct UInt64
    .field static public class System.Compiler.Struct UInt8
    .field static public class System.Compiler.Struct UIntPtr
    .field static public class System.Compiler.Class ValueType
    .field static public class System.Compiler.Struct Void
    .field static public class System.Compiler.Class WindowsImpersonationContext
    .field static public class System.Compiler.Class __HandleProtector
  }
  .class public sealed SystemXmlAssemblyLocation
    extends [mscorlib]System.Object
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public string Location
  }
  .class public sequential sealed TargetInformation
    extends [mscorlib]System.ValueType
  {
    .field public string Company
    .field public string Configuration
    .field public string Copyright
    .field public string Culture
    .field public string Description
    .field public string Product
    .field public string ProductVersion
    .field public string Title
    .field public string Trademark
    .field public string Version
  }
  .class public sealed TargetPlatform
    extends [mscorlib]System.Object
  {
    .method public static hidebysig 
      void Clear()
    {
      ret
    }
    .method public static hidebysig specialname 
      class System.Compiler.TrivialHashtable get_AssemblyReferenceFor()
    {
      ret
    }
    .method public static hidebysig specialname 
      void set_AssemblyReferenceFor(class System.Compiler.TrivialHashtable 'value')
    {
      ret
    }
    .method public static hidebysig 
      void SetToV1()
    {
      ret
    }
    .method public static hidebysig 
      void SetToV1(string platformAssembliesLocation)
    {
      ret
    }
    .method public static hidebysig 
      void SetToV1_1()
    {
      ret
    }
    .method public static hidebysig 
      void SetToV1_1(string platformAssembliesLocation)
    {
      ret
    }
    .method public static hidebysig 
      void SetToV2()
    {
      ret
    }
    .method public static hidebysig 
      void SetToV2(string platformAssembliesLocation)
    {
      ret
    }
    .method public static hidebysig 
      void SetToPostV1_1(string platformAssembliesLocation)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .field static public bool DoNotLockFiles
    .field static public bool GetDebugInfo
    .field static public string PlatformAssembliesLocation
    .field static public class [mscorlib]System.Version TargetVersion
    .property class System.Compiler.TrivialHashtable AssemblyReferenceFor()
    {
      .get class System.Compiler.TrivialHashtable System.Compiler.TargetPlatform::get_AssemblyReferenceFor()
      .set void System.Compiler.TargetPlatform::set_AssemblyReferenceFor(class System.Compiler.TrivialHashtable)
    }
  }
  .class public TemplateInstance
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.TypeNodeList typeArguments)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .field public bool IsMethodTemplate
    .field public class System.Compiler.TypeNodeList TypeArgumentExpressions
    .field public class System.Compiler.TypeNodeList TypeArguments
  }
  .class public TernaryExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand1, class System.Compiler.Expression operand2, class System.Compiler.Expression operand3, valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode resultType)
    {
      ret
    }
    .field public class System.Compiler.Expression Operand1
    .field public class System.Compiler.Expression Operand2
    .field public class System.Compiler.Expression Operand3
  }
  .class public This
    extends System.Compiler.Parameter
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
  .class public ThisBinding
    extends System.Compiler.This
    implements System.Compiler.IUniqueKey
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.This boundThis, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public virtual hidebysig 
      instance int32 GetHashCode()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool Equals(object obj)
    {
      ret
    }
    .method private final virtual hidebysig newslot specialname 
      instance int32 System.Compiler.IUniqueKey.get_UniqueId()
    {
      .override System.Compiler.IUniqueKey::get_UniqueId
      ret
    }
    .field public class System.Compiler.This BoundThis
    .property instance int32 System.Compiler.IUniqueKey.UniqueId()
    {
      .get instance int32 System.Compiler.ThisBinding::System.Compiler.IUniqueKey.get_UniqueId()
    }
  }
  .class public Throw
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext context)
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
  }
  .class public sealed TrivialHashtable
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 expectedEntries)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Count()
    {
      ret
    }
    .method public hidebysig specialname 
      instance object get_Item(int32 key)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 key, object 'value')
    {
      ret
    }
    .property instance int32 Count()
    {
      .get instance int32 System.Compiler.TrivialHashtable::get_Count()
    }
    .property instance object Item(int32)
    {
      .get instance object System.Compiler.TrivialHashtable::get_Item(int32)
      .set instance void System.Compiler.TrivialHashtable::set_Item(int32, object)
    }
  }
  .class public Try
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Block tryBlock, class System.Compiler.CatchList catchers, class System.Compiler.FilterList filters, class System.Compiler.FaultHandlerList faultHandlers, class System.Compiler.Finally Finally)
    {
      ret
    }
    .field public class System.Compiler.CatchList Catchers
    .field public class System.Compiler.FaultHandlerList FaultHandlers
    .field public class System.Compiler.FilterList Filters
    .field public class System.Compiler.Finally Finally
    .field public class System.Compiler.Block TryBlock
  }
  .class public TupleTypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.FieldList domains)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.FieldList domains, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.FieldList Domains
  }
  .class public TypeExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.TypeNodeList templateArguments)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.TypeNodeList templateArguments, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsUnmanaged()
    {
      ret
    }
    .field public class System.Compiler.Expression Expression
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.TypeExpression::get_IsUnmanaged()
    }
  }
  .class public sealed TypeFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.TypeFlags Abstract = int32(0x00000080)
    .field static public literal valuetype System.Compiler.TypeFlags AnsiClass = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeFlags AutoClass = int32(0x00020000)
    .field static public literal valuetype System.Compiler.TypeFlags AutoLayout = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeFlags BeforeFieldInit = int32(0x00100000)
    .field static public literal valuetype System.Compiler.TypeFlags Class = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeFlags ClassSemanticsMask = int32(0x00000020)
    .field static public literal valuetype System.Compiler.TypeFlags ExplicitLayout = int32(0x00000010)
    .field static public literal valuetype System.Compiler.TypeFlags HasSecurity = int32(0x00040000)
    .field static public literal valuetype System.Compiler.TypeFlags Import = int32(0x00001000)
    .field static public literal valuetype System.Compiler.TypeFlags Interface = int32(0x00000020)
    .field static public literal valuetype System.Compiler.TypeFlags LayoutMask = int32(0x00000018)
    .field static public literal valuetype System.Compiler.TypeFlags NestedAssembly = int32(0x00000005)
    .field static public literal valuetype System.Compiler.TypeFlags NestedFamANDAssem = int32(0x00000006)
    .field static public literal valuetype System.Compiler.TypeFlags NestedFamORAssem = int32(0x00000007)
    .field static public literal valuetype System.Compiler.TypeFlags NestedFamily = int32(0x00000004)
    .field static public literal valuetype System.Compiler.TypeFlags NestedPrivate = int32(0x00000003)
    .field static public literal valuetype System.Compiler.TypeFlags NestedPublic = int32(0x00000002)
    .field static public literal valuetype System.Compiler.TypeFlags None = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeFlags NotPublic = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeFlags Public = int32(0x00000001)
    .field static public literal valuetype System.Compiler.TypeFlags RTSpecialName = int32(0x00000800)
    .field static public literal valuetype System.Compiler.TypeFlags ReservedMask = int32(0x00040800)
    .field static public literal valuetype System.Compiler.TypeFlags Sealed = int32(0x00000100)
    .field static public literal valuetype System.Compiler.TypeFlags SequentialLayout = int32(0x00000008)
    .field static public literal valuetype System.Compiler.TypeFlags Serializable = int32(0x00002000)
    .field static public literal valuetype System.Compiler.TypeFlags SpecialName = int32(0x00000400)
    .field static public literal valuetype System.Compiler.TypeFlags StringFormatMask = int32(0x00030000)
    .field static public literal valuetype System.Compiler.TypeFlags UnicodeClass = int32(0x00010000)
    .field static public literal valuetype System.Compiler.TypeFlags VisibilityMask = int32(0x00000007)
  }
  .class public TypeIntersectionExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNodeList types, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNodeList Types
  }
  .class public TypeMemberSnippet
    extends System.Compiler.Member
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.IParserFactory parserFactory, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .field public class System.Compiler.IParserFactory ParserFactory
    .property instance string FullName()
    {
      .get instance string System.Compiler.TypeMemberSnippet::get_FullName()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsFamilyOrAssembly()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsPublic()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsStatic()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.TypeMemberSnippet::get_IsVisibleOutsideAssembly()
    }
  }
  .class public abstract TypeModifier
    extends System.Compiler.TypeNode
  {
    .method public virtual hidebysig 
      instance string GetUnmangledNameWithoutTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .field public class System.Compiler.TypeNode ModifiedType
    .field public class System.Compiler.TypeNode ModifiedTypeExpression
    .field public class System.Compiler.TypeNode Modifier
    .field public class System.Compiler.TypeNode ModifierExpression
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.TypeModifier::get_IsStructural()
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeModifier::get_StructuralElementTypes()
    }
  }
  .class public abstract TypeNode
    extends System.Compiler.Member
  {
    .class nested public sealed TypeAttributeProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.TypeNode 'type', object handle)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.TypeNode 'type', object handle, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .class nested public sealed TypeMemberProvider
      extends [mscorlib]System.MulticastDelegate
    {
      .method public hidebysig specialname 
        instance void .ctor(object 'object', native int 'method')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void Invoke(class System.Compiler.TypeNode 'type', object handle)
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance class [mscorlib]System.IAsyncResult BeginInvoke(class System.Compiler.TypeNode 'type', object handle, class [mscorlib]System.AsyncCallback callback, object 'object')
        runtime 
      {
      }
      .method public virtual hidebysig newslot 
        instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
        runtime 
      {
      }
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.AttributeList get_Attributes()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_Attributes(class System.Compiler.AttributeList 'value')
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.SecurityAttributeList get_SecurityAttributes()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_SecurityAttributes(class System.Compiler.SecurityAttributeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_BaseType()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.MemberList get_DefaultMembers()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_DefaultMembers(class System.Compiler.MemberList 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance string get_FullName()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetFullUnmangledNameWithoutTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetFullUnmangledNameWithTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetUnmangledNameWithTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance string GetUnmangledNameWithoutTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsAbstract()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsCompilerControlled()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamily()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsFamilyOrAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsGeneric()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsGeneric(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNestedAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNestedFamily()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNestedFamilyAndAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNestedInternal()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNestedPublic()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNonPublic()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsNormalized()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_IsNormalized(bool 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPrivate()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsPrimitiveComparable()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsPrimitiveInteger()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsPrimitiveNumeric()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsPublic()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsPrimitive()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsSealed()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsSpecialName()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStatic()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsTemplateParameter()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsUnmanaged()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsUnsignedPrimitiveNumeric()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance bool get_IsValueType()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsVisibleOutsideAssembly()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.MemberList get_Members()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Members(class System.Compiler.MemberList 'value')
    {
      ret
    }
    .method famorassem virtual hidebysig newslot 
      instance void ApplyOutOfBandContracts()
    {
      ret
    }
    .method family virtual hidebysig newslot 
      instance string FullStrippedName(class System.Compiler.Method m)
    {
      ret
    }
    .method family virtual hidebysig newslot 
      instance void CopyContractToMethod(class System.Compiler.Method contractMethod, class System.Compiler.Method codeMethod)
    {
      ret
    }
    .method family virtual hidebysig newslot 
      instance class System.Compiler.Method FindNearestOverriddenMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNode get_Template()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_Template(class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_TemplateArguments()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_TemplateArguments(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_ConsolidatedTemplateArguments()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ConsolidatedTemplateArguments(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_TemplateParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_TemplateParameters(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.TypeNodeList get_ConsolidatedTemplateParameters()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance void set_ConsolidatedTemplateParameters(class System.Compiler.TypeNodeList 'value')
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance valuetype [mscorlib]System.TypeCode get_TypeCode()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance void GetAbstractMethods(class System.Compiler.MethodList result)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ArrayType GetArrayType(int32 rank)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ArrayType GetArrayType(int32 rank, bool lowerBoundIsUnknown)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ArrayType GetArrayType(int32 rank, int32[] sizes, int32[] loBounds)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MemberList GetConstructors()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.InstanceInitializer GetConstructor(class System.Compiler.TypeNode[] types)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method family virtual hidebysig 
      instance class System.Compiler.Identifier GetDocumentationId()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetGenericTemplateInstance(class System.Compiler.Module module, class System.Compiler.TypeNodeList consolidatedArguments)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetTemplateInstance(class System.Compiler.Module module, class System.Compiler.TypeNode[] typeArguments)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetTemplateInstance(class System.Compiler.TypeNode referringType, class System.Compiler.TypeNode[] templateArguments)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetTemplateInstance(class System.Compiler.TypeNode referringType, class System.Compiler.TypeNodeList templateArguments)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetTemplateInstance(class System.Compiler.Module module, class System.Compiler.TypeNode referringType, class System.Compiler.TypeNode declaringType, class System.Compiler.TypeNodeList templateArguments)
    {
      ret
    }
    .method family hidebysig 
      instance class System.Compiler.TypeNodeList GetConsolidatedTemplateArguments()
    {
      ret
    }
    .method family hidebysig 
      instance class System.Compiler.TypeNodeList GetConsolidatedTemplateArguments(class System.Compiler.TypeNodeList typeArgs)
    {
      ret
    }
    .method family hidebysig 
      instance class System.Compiler.TypeNodeList GetConsolidatedTemplateParameters()
    {
      ret
    }
    .method family hidebysig 
      instance class System.Compiler.TypeNodeList GetOwnTemplateArguments(class System.Compiler.TypeNodeList consolidatedTemplateArguments)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Pointer GetPointerType()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Reference GetReferenceType()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.MemberList GetMembersNamed(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Event GetEvent(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Field GetField(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetMethod(class System.Compiler.Identifier name, class System.Compiler.TypeNode[] types)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.TypeNode GetNestedType(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Property GetProperty(class System.Compiler.Identifier name, class System.Compiler.TypeNode[] types)
    {
      .param [2]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.MemberList get_ExplicitCoercionMethods()
    {
      ret
    }
    .method public virtual hidebysig newslot specialname 
      instance class System.Compiler.MemberList get_ImplicitCoercionMethods()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetExplicitCoercionFromMethod(class System.Compiler.TypeNode sourceType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetExplicitCoercionToMethod(class System.Compiler.TypeNode targetType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetImplicitCoercionFromMethod(class System.Compiler.TypeNode sourceType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetImplicitCoercionToMethod(class System.Compiler.TypeNode targetType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetOpFalse()
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.Method GetOpTrue()
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.TypeNode GetTypeNode(class [mscorlib]System.Type 'type')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class [mscorlib]System.Type GetRuntimeType()
    {
      ret
    }
    .method public static hidebysig 
      valuetype System.Compiler.TypeFlags GetVisibilityIntersection(valuetype System.Compiler.TypeFlags vis1, valuetype System.Compiler.TypeFlags vis2)
    {
      ret
    }
    .method public hidebysig 
      instance bool ImplementsExplicitly(class System.Compiler.Method meth)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.Method GetImplementingMethod(class System.Compiler.Method meth, bool checkPublic)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool IsAssignableTo(class System.Compiler.TypeNode targetType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool IsDerivedFrom(class System.Compiler.TypeNode otherType)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance bool IsStructurallyEquivalentList(class System.Compiler.TypeNodeList list1, class System.Compiler.TypeNodeList list2)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.TypeNode StripModifiers(class System.Compiler.TypeNode t)
    {
      ret
    }
    .method public static hidebysig 
      class System.Compiler.TypeNode StripModifier(class System.Compiler.TypeNode t, class System.Compiler.TypeNode modifier)
    {
      ret
    }
    .method family virtual hidebysig newslot 
      instance void UpdateMemberTable(int32 n)
    {
      ret
    }
    .method family static hidebysig 
      class System.Compiler.MemberList WeedOutNonSpecialMethods(class System.Compiler.MemberList members, valuetype System.Compiler.MethodFlags mask)
    {
      ret
    }
    .method public virtual hidebysig 
      instance void WriteDocumentation(class [System.Xml]System.Xml.XmlTextWriter xwriter)
    {
      ret
    }
    .field public int32 ClassSize
    .field public class System.Compiler.Module DeclaringModule
    .field public valuetype System.Compiler.TypeFlags Flags
    .field public class System.Compiler.InterfaceList InterfaceExpressions
    .field public class System.Compiler.InterfaceList Interfaces
    .field public class System.Compiler.TypeNodeList IsDefinedBy
    .field public bool IsNotFullySpecialized
    .field static family initonly char[] MangleChars
    .field static family class System.Compiler.Method MethodDoesNotExist
    .field public class System.Compiler.Identifier Namespace
    .field public bool NewTemplateInstanceIsRecursive
    .field public int32 PackingSize
    .field public class System.Compiler.TypeNode PartiallyDefines
    .field public class System.Compiler.TypeNode/TypeAttributeProvider ProvideTypeAttributes
    .field public class System.Compiler.TypeNode/TypeMemberProvider ProvideTypeMembers
    .field public object ProviderHandle
    .field public class System.Compiler.TypeNodeList TemplateArgumentExpressions
    .field public class System.Compiler.TypeNode TemplateExpression
    .field public class System.Compiler.TypeNodeList TemplateInstances
    .field famorassem class System.Compiler.TrivialHashtable arrayTypes
    .field famorassem class System.Compiler.TypeNodeList consolidatedTemplateParameters
    .field famorassem class System.Compiler.MemberList constructors
    .field public class System.Compiler.Block contractInitializerBlock
    .field famorassem class System.Compiler.MemberList defaultMembers
    .field famorassem class System.Compiler.TrivialHashtable explicitCoercionFromTable
    .field famorassem class System.Compiler.MemberList explicitCoercionMethods
    .field family class System.Compiler.TrivialHashtable explicitCoercionToTable
    .field family string fullName
    .field famorassem class System.Compiler.TrivialHashtable implicitCoercionFromTable
    .field famorassem class System.Compiler.MemberList implicitCoercionMethods
    .field famorassem class System.Compiler.TrivialHashtable implicitCoercionToTable
    .field family bool isGeneric
    .field family bool isNormalized
    .field famorassem int32 memberCount
    .field famorassem class System.Compiler.TrivialHashtable memberTable
    .field famorassem class System.Compiler.MemberList members
    .field famorassem bool modreq([mscorlib]System.Runtime.CompilerServices.IsVolatile) membersBeingPopulated
    .field family class System.Compiler.Method opFalse
    .field family class System.Compiler.Method opTrue
    .field famorassem class System.Compiler.Pointer pointerType
    .field famorassem class System.Compiler.Reference referenceType
    .field family class [mscorlib]System.Type runtimeType
    .field family class System.Compiler.SecurityAttributeList securityAttributes
    .field famorassem class System.Compiler.TrivialHashtable structurallyEquivalentMethod
    .field famorassem class System.Compiler.TrivialHashtable szArrayTypes
    .field family class System.Compiler.TypeNode template
    .field family class System.Compiler.TypeNodeList templateArguments
    .property instance class System.Compiler.AttributeList Attributes()
    {
      .get instance class System.Compiler.AttributeList System.Compiler.TypeNode::get_Attributes()
      .set instance void System.Compiler.TypeNode::set_Attributes(class System.Compiler.AttributeList)
    }
    .property instance class System.Compiler.TypeNode BaseType()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.TypeNode::get_BaseType()
    }
    .property instance class System.Compiler.TypeNodeList ConsolidatedTemplateArguments()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeNode::get_ConsolidatedTemplateArguments()
      .set instance void System.Compiler.TypeNode::set_ConsolidatedTemplateArguments(class System.Compiler.TypeNodeList)
    }
    .property instance class System.Compiler.TypeNodeList ConsolidatedTemplateParameters()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeNode::get_ConsolidatedTemplateParameters()
      .set instance void System.Compiler.TypeNode::set_ConsolidatedTemplateParameters(class System.Compiler.TypeNodeList)
    }
    .property instance class System.Compiler.MemberList DefaultMembers()
    {
      .get instance class System.Compiler.MemberList System.Compiler.TypeNode::get_DefaultMembers()
      .set instance void System.Compiler.TypeNode::set_DefaultMembers(class System.Compiler.MemberList)
    }
    .property instance class System.Compiler.MemberList ExplicitCoercionMethods()
    {
      .get instance class System.Compiler.MemberList System.Compiler.TypeNode::get_ExplicitCoercionMethods()
    }
    .property instance string FullName()
    {
      .get instance string System.Compiler.TypeNode::get_FullName()
    }
    .property instance class System.Compiler.MemberList ImplicitCoercionMethods()
    {
      .get instance class System.Compiler.MemberList System.Compiler.TypeNode::get_ImplicitCoercionMethods()
    }
    .property instance bool IsAbstract()
    {
      .get instance bool System.Compiler.TypeNode::get_IsAbstract()
    }
    .property instance bool IsAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsAssembly()
    }
    .property instance bool IsCompilerControlled()
    {
      .get instance bool System.Compiler.TypeNode::get_IsCompilerControlled()
    }
    .property instance bool IsFamily()
    {
      .get instance bool System.Compiler.TypeNode::get_IsFamily()
    }
    .property instance bool IsFamilyAndAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsFamilyAndAssembly()
    }
    .property instance bool IsFamilyOrAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsFamilyOrAssembly()
    }
    .property instance bool IsGeneric()
    {
      .get instance bool System.Compiler.TypeNode::get_IsGeneric()
      .set instance void System.Compiler.TypeNode::set_IsGeneric(bool)
    }
    .property instance bool IsNestedAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNestedAssembly()
    }
    .property instance bool IsNestedFamily()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNestedFamily()
    }
    .property instance bool IsNestedFamilyAndAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNestedFamilyAndAssembly()
    }
    .property instance bool IsNestedInternal()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNestedInternal()
    }
    .property instance bool IsNestedPublic()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNestedPublic()
    }
    .property instance bool IsNonPublic()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNonPublic()
    }
    .property instance bool IsNormalized()
    {
      .get instance bool System.Compiler.TypeNode::get_IsNormalized()
      .set instance void System.Compiler.TypeNode::set_IsNormalized(bool)
    }
    .property instance bool IsPrimitive()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPrimitive()
    }
    .property instance bool IsPrimitiveComparable()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPrimitiveComparable()
    }
    .property instance bool IsPrimitiveInteger()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPrimitiveInteger()
    }
    .property instance bool IsPrimitiveNumeric()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPrimitiveNumeric()
    }
    .property instance bool IsPrivate()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPrivate()
    }
    .property instance bool IsPublic()
    {
      .get instance bool System.Compiler.TypeNode::get_IsPublic()
    }
    .property instance bool IsSealed()
    {
      .get instance bool System.Compiler.TypeNode::get_IsSealed()
    }
    .property instance bool IsSpecialName()
    {
      .get instance bool System.Compiler.TypeNode::get_IsSpecialName()
    }
    .property instance bool IsStatic()
    {
      .get instance bool System.Compiler.TypeNode::get_IsStatic()
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.TypeNode::get_IsStructural()
    }
    .property instance bool IsTemplateParameter()
    {
      .get instance bool System.Compiler.TypeNode::get_IsTemplateParameter()
    }
    .property instance bool IsUnmanaged()
    {
      .get instance bool System.Compiler.TypeNode::get_IsUnmanaged()
    }
    .property instance bool IsUnsignedPrimitiveNumeric()
    {
      .get instance bool System.Compiler.TypeNode::get_IsUnsignedPrimitiveNumeric()
    }
    .property instance bool IsValueType()
    {
      .get instance bool System.Compiler.TypeNode::get_IsValueType()
    }
    .property instance bool IsVisibleOutsideAssembly()
    {
      .get instance bool System.Compiler.TypeNode::get_IsVisibleOutsideAssembly()
    }
    .property instance class System.Compiler.MemberList Members()
    {
      .get instance class System.Compiler.MemberList System.Compiler.TypeNode::get_Members()
      .set instance void System.Compiler.TypeNode::set_Members(class System.Compiler.MemberList)
    }
    .property instance class System.Compiler.SecurityAttributeList SecurityAttributes()
    {
      .get instance class System.Compiler.SecurityAttributeList System.Compiler.TypeNode::get_SecurityAttributes()
      .set instance void System.Compiler.TypeNode::set_SecurityAttributes(class System.Compiler.SecurityAttributeList)
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeNode::get_StructuralElementTypes()
    }
    .property instance class System.Compiler.TypeNode Template()
    {
      .get instance class System.Compiler.TypeNode System.Compiler.TypeNode::get_Template()
      .set instance void System.Compiler.TypeNode::set_Template(class System.Compiler.TypeNode)
    }
    .property instance class System.Compiler.TypeNodeList TemplateArguments()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeNode::get_TemplateArguments()
      .set instance void System.Compiler.TypeNode::set_TemplateArguments(class System.Compiler.TypeNodeList)
    }
    .property instance class System.Compiler.TypeNodeList TemplateParameters()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeNode::get_TemplateParameters()
      .set instance void System.Compiler.TypeNode::set_TemplateParameters(class System.Compiler.TypeNodeList)
    }
    .property instance valuetype [mscorlib]System.TypeCode TypeCode()
    {
      .get instance valuetype [mscorlib]System.TypeCode System.Compiler.TypeNode::get_TypeCode()
    }
  }
  .class public sealed TypeNodeList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.TypeNodeList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.TypeNode get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.TypeNode Current()
      {
        .get instance class System.Compiler.TypeNode System.Compiler.TypeNodeList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode[] elements)
    {
      .param [1]
      .custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.TypeNode element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.TypeNodeList Clone()
    {
      ret
    }
    .method public hidebysig 
      instance void Insert(class System.Compiler.TypeNode element, int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig 
      instance int32 SearchFor(class System.Compiler.TypeNode element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.TypeNode get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.TypeNode 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.TypeNodeList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.TypeNode Item(int32)
    {
      .get instance class System.Compiler.TypeNode System.Compiler.TypeNodeList::get_Item(int32)
      .set instance void System.Compiler.TypeNodeList::set_Item(int32, class System.Compiler.TypeNode)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.TypeNodeList::get_Length()
    }
  }
  .class public TypeParameter
    extends System.Compiler.Interface
    implements System.Compiler.ITypeParameter
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.InterfaceList baseInterfaces, class System.Compiler.TypeNode/TypeAttributeProvider provideAttributes, class System.Compiler.TypeNode/TypeMemberProvider provideMembers, object handle)
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance class System.Compiler.Member get_DeclaringMember()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_DeclaringMember(class System.Compiler.Member 'value')
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance int32 get_ParameterListIndex()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_ParameterListIndex(int32 'value')
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance valuetype System.Compiler.TypeParameterFlags get_TypeParameterFlags()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance void set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags 'value')
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsStructural()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsTemplateParameter()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance bool get_IsValueType()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.TypeNodeList get_StructuralElementTypes()
    {
      ret
    }
    .method public virtual hidebysig 
      instance string GetFullUnmangledNameWithoutTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig 
      instance string GetFullUnmangledNameWithTypeParameters()
    {
      ret
    }
    .method public virtual hidebysig 
      instance bool IsStructurallyEquivalentTo(class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .field family class System.Compiler.TypeNodeList structuralElementTypes
    .property instance class System.Compiler.Member DeclaringMember()
    {
      .get instance class System.Compiler.Member System.Compiler.TypeParameter::get_DeclaringMember()
      .set instance void System.Compiler.TypeParameter::set_DeclaringMember(class System.Compiler.Member)
    }
    .property instance bool IsStructural()
    {
      .get instance bool System.Compiler.TypeParameter::get_IsStructural()
    }
    .property instance bool IsTemplateParameter()
    {
      .get instance bool System.Compiler.TypeParameter::get_IsTemplateParameter()
    }
    .property instance bool IsValueType()
    {
      .get instance bool System.Compiler.TypeParameter::get_IsValueType()
    }
    .property instance int32 ParameterListIndex()
    {
      .get instance int32 System.Compiler.TypeParameter::get_ParameterListIndex()
      .set instance void System.Compiler.TypeParameter::set_ParameterListIndex(int32)
    }
    .property instance class System.Compiler.TypeNodeList StructuralElementTypes()
    {
      .get instance class System.Compiler.TypeNodeList System.Compiler.TypeParameter::get_StructuralElementTypes()
    }
    .property instance valuetype System.Compiler.TypeParameterFlags TypeParameterFlags()
    {
      .get instance valuetype System.Compiler.TypeParameterFlags System.Compiler.TypeParameter::get_TypeParameterFlags()
      .set instance void System.Compiler.TypeParameter::set_TypeParameterFlags(valuetype System.Compiler.TypeParameterFlags)
    }
  }
  .class public sealed TypeParameterFlags
    extends [mscorlib]System.Enum
  {
    .custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
    .field public rtspecialname specialname int32 value__
    .field static public literal valuetype System.Compiler.TypeParameterFlags Contravariant = int32(0x00000002)
    .field static public literal valuetype System.Compiler.TypeParameterFlags Covariant = int32(0x00000001)
    .field static public literal valuetype System.Compiler.TypeParameterFlags DefaultConstructorConstraint = int32(0x00000010)
    .field static public literal valuetype System.Compiler.TypeParameterFlags NoSpecialConstraint = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeParameterFlags NonVariant = int32(0x00000000)
    .field static public literal valuetype System.Compiler.TypeParameterFlags ReferenceTypeConstraint = int32(0x00000004)
    .field static public literal valuetype System.Compiler.TypeParameterFlags SpecialConstraintMask = int32(0x0000001C)
    .field static public literal valuetype System.Compiler.TypeParameterFlags ValueTypeConstraint = int32(0x00000008)
    .field static public literal valuetype System.Compiler.TypeParameterFlags VarianceMask = int32(0x00000003)
  }
  .class public TypeScope
    extends System.Compiler.Scope
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Scope parentScope, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.MemberList GetMembersNamed(class System.Compiler.Identifier name)
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance class System.Compiler.MemberList get_Members()
    {
      ret
    }
    .method public virtual hidebysig specialname 
      instance void set_Members(class System.Compiler.MemberList 'value')
    {
      ret
    }
    .field public class System.Compiler.TypeNode Type
    .property instance class System.Compiler.MemberList Members()
    {
      .get instance class System.Compiler.MemberList System.Compiler.TypeScope::get_Members()
      .set instance void System.Compiler.TypeScope::set_Members(class System.Compiler.MemberList)
    }
  }
  .class public TypeUnionExpression
    extends System.Compiler.TypeNode
    implements System.Compiler.ISymbolicTypeReference
  {
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNodeList types)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNodeList types, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.TypeNodeList Types
  }
  .class public Typeswitch
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, class System.Compiler.TypeswitchCaseList cases)
    {
      ret
    }
    .field public class System.Compiler.TypeswitchCaseList Cases
    .field public class System.Compiler.Expression Expression
  }
  .class public TypeswitchCase
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.TypeNode labelType, class System.Compiler.Expression labelVariable, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.TypeNode LabelType
    .field public class System.Compiler.TypeNode LabelTypeExpression
    .field public class System.Compiler.Expression LabelVariable
  }
  .class public sealed TypeswitchCaseList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.TypeswitchCaseList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.TypeswitchCase get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.TypeswitchCase Current()
      {
        .get instance class System.Compiler.TypeswitchCase System.Compiler.TypeswitchCaseList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.TypeswitchCase element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.TypeswitchCaseList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.TypeswitchCase get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.TypeswitchCase 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.TypeswitchCaseList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.TypeswitchCase Item(int32)
    {
      .get instance class System.Compiler.TypeswitchCase System.Compiler.TypeswitchCaseList::get_Item(int32)
      .set instance void System.Compiler.TypeswitchCaseList::set_Item(int32, class System.Compiler.TypeswitchCase)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.TypeswitchCaseList::get_Length()
    }
  }
  .class public UnaryExpression
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand, valuetype System.Compiler.NodeType nodeType)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand, valuetype System.Compiler.NodeType nodeType, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand, valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode 'type')
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression operand, valuetype System.Compiler.NodeType nodeType, class System.Compiler.TypeNode 'type', valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Expression Operand
  }
  .class public sealed Unstacker
    extends System.Compiler.StandardVisitor
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitAssignmentStatement(class System.Compiler.AssignmentStatement assignment)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitBinaryExpression(class System.Compiler.BinaryExpression binaryExpression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Block VisitBlock(class System.Compiler.Block block)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitBranch(class System.Compiler.Branch branch)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitSwitchInstruction(class System.Compiler.SwitchInstruction switchInstruction)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.ExpressionList VisitExpressionList(class System.Compiler.ExpressionList expressions)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Statement VisitExpressionStatement(class System.Compiler.ExpressionStatement statement)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitExpression(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitIndexer(class System.Compiler.Indexer indexer)
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Method VisitMethod(class System.Compiler.Method 'method')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitMethodCall(class System.Compiler.MethodCall 'call')
    {
      ret
    }
    .method public virtual hidebysig 
      instance class System.Compiler.Expression VisitTernaryExpression(class System.Compiler.TernaryExpression expression)
    {
      ret
    }
  }
  .class public UsedNamespace
    extends System.Compiler.Node
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier Namespace)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier Namespace, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
    .field public class System.Compiler.Identifier Namespace
    .field public class System.Compiler.Identifier URI
  }
  .class public sealed UsedNamespaceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.UsedNamespaceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.UsedNamespace get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.UsedNamespace Current()
      {
        .get instance class System.Compiler.UsedNamespace System.Compiler.UsedNamespaceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.UsedNamespace element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.UsedNamespaceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.UsedNamespace get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.UsedNamespace 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.UsedNamespaceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.UsedNamespace Item(int32)
    {
      .get instance class System.Compiler.UsedNamespace System.Compiler.UsedNamespaceList::get_Item(int32)
      .set instance void System.Compiler.UsedNamespaceList::set_Item(int32, class System.Compiler.UsedNamespace)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.UsedNamespaceList::get_Length()
    }
  }
  .class public Variable
    extends System.Compiler.Expression
  {
    .method public hidebysig specialname 
      instance void .ctor(valuetype System.Compiler.NodeType 'type')
    {
      ret
    }
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.TypeNode TypeExpression
  }
  .class public VariableDeclaration
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Identifier name, class System.Compiler.TypeNode 'type', class System.Compiler.Expression initializer)
    {
      ret
    }
    .field public class System.Compiler.Field Field
    .field public class System.Compiler.Expression Initializer
    .field public class System.Compiler.Identifier Name
    .field public class System.Compiler.TypeNode Type
    .field public class System.Compiler.TypeNode TypeExpression
  }
  .class public sealed VariableDeclarationList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.VariableDeclarationList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance class System.Compiler.VariableDeclaration get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance class System.Compiler.VariableDeclaration Current()
      {
        .get instance class System.Compiler.VariableDeclaration System.Compiler.VariableDeclarationList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(class System.Compiler.VariableDeclaration element)
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance class System.Compiler.VariableDeclaration get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, class System.Compiler.VariableDeclaration 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.VariableDeclarationList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance class System.Compiler.VariableDeclaration Item(int32)
    {
      .get instance class System.Compiler.VariableDeclaration System.Compiler.VariableDeclarationList::get_Item(int32)
      .set instance void System.Compiler.VariableDeclarationList::set_Item(int32, class System.Compiler.VariableDeclaration)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.VariableDeclarationList::get_Length()
    }
  }
  .class public abstract Visitor
    extends [mscorlib]System.Object
  {
    .method public virtual hidebysig newslot abstract 
      instance class System.Compiler.Node Visit(class System.Compiler.Node node)
    {
    }
    .method public virtual hidebysig newslot 
      instance void TransferStateTo(class System.Compiler.Visitor targetVisitor)
    {
      ret
    }
    .method public virtual hidebysig newslot 
      instance class System.Compiler.ExpressionList VisitExpressionList(class System.Compiler.ExpressionList list)
    {
      ret
    }
    .method family hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
  }
  .class public While
    extends System.Compiler.Statement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression condition, class System.Compiler.Block body)
    {
      ret
    }
    .field public class System.Compiler.Block Body
    .field public class System.Compiler.Expression Condition
  }
  .class public sequential sealed Win32Resource
    extends [mscorlib]System.ValueType
  {
    .field public string TypeName
    .field public int32 TypeID
    .field public string Name
    .field public int32 ID
    .field public int32 LanguageID
    .field public int32 CodePage
    .field public unsigned int8[] Data
  }
  .class public sealed Win32ResourceList
    extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .class nested public sequential sealed Enumerator
      extends [mscorlib]System.ValueType
    {
      .method public hidebysig specialname 
        instance void .ctor(class System.Compiler.Win32ResourceList list)
      {
        ret
      }
      .method public hidebysig specialname 
        instance valuetype System.Compiler.Win32Resource get_Current()
      {
        ret
      }
      .method public hidebysig 
        instance bool MoveNext()
      {
        ret
      }
      .method public hidebysig 
        instance void Reset()
      {
        ret
      }

      //This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
      .field private int32 __Asmmeta_Private_Field
      .property instance valuetype System.Compiler.Win32Resource Current()
      {
        .get instance valuetype System.Compiler.Win32Resource System.Compiler.Win32ResourceList/Enumerator::get_Current()
      }
    }
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(int32 capacity)
    {
      ret
    }
    .method public hidebysig 
      instance void Add(valuetype System.Compiler.Win32Resource element)
    {
      ret
    }
    .method public hidebysig 
      instance class System.Compiler.Win32ResourceList Clone()
    {
      ret
    }
    .method public hidebysig specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public hidebysig specialname 
      instance valuetype System.Compiler.Win32Resource get_Item(int32 index)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void set_Item(int32 index, valuetype System.Compiler.Win32Resource 'value')
    {
      ret
    }
    .method public hidebysig 
      instance valuetype System.Compiler.Win32ResourceList/Enumerator GetEnumerator()
    {
      ret
    }
    .property instance valuetype System.Compiler.Win32Resource Item(int32)
    {
      .get instance valuetype System.Compiler.Win32Resource System.Compiler.Win32ResourceList::get_Item(int32)
      .set instance void System.Compiler.Win32ResourceList::set_Item(int32, valuetype System.Compiler.Win32Resource)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.Win32ResourceList::get_Length()
    }
  }
  .class public Yield
    extends System.Compiler.ExpressionStatement
  {
    .method public hidebysig specialname 
      instance void .ctor()
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression)
    {
      ret
    }
    .method public hidebysig specialname 
      instance void .ctor(class System.Compiler.Expression expression, valuetype System.Compiler.SourceContext sctx)
    {
      ret
    }
  }
}
.namespace System.Compiler.Metadata
{
  .class public sealed MemoryMappedFile
    extends [mscorlib]System.Object
    implements [mscorlib]System.IDisposable, System.Compiler.ISourceTextBuffer, System.Compiler.ISourceText
  {
    .custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
    .method public hidebysig specialname 
      instance void .ctor(string fileName)
    {
      ret
    }
    .method family virtual hidebysig 
      instance void Finalize()
    {
      ret
    }
    .method public final virtual hidebysig newslot 
      instance void Dispose()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance unsigned int8* get_Buffer()
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance int32 get_Length()
    {
      ret
    }
    .method public final virtual hidebysig newslot 
      instance string Substring(int32 start, int32 length)
    {
      ret
    }
    .method public final virtual hidebysig newslot specialname 
      instance char get_Item(int32 index)
    {
      ret
    }
    .method private final virtual hidebysig newslot 
      instance void System.Compiler.ISourceText.MakeCollectible()
    {
      .override System.Compiler.ISourceText::MakeCollectible
      ret
    }
    .property instance unsigned int8* Buffer()
    {
      .get instance unsigned int8* System.Compiler.Metadata.MemoryMappedFile::get_Buffer()
    }
    .property instance char Item(int32)
    {
      .get instance char System.Compiler.Metadata.MemoryMappedFile::get_Item(int32)
    }
    .property instance int32 Length()
    {
      .get instance int32 System.Compiler.Metadata.MemoryMappedFile::get_Length()
    }
  }
}

