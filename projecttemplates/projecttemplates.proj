<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildProjectDirectory)\..\tools\DotNetOpenAuth.automated.props"/>

	<PropertyGroup>
		<ProjectTemplateMaxPath Condition=" '$(ProjectTemplateMaxPath)' == '' ">50</ProjectTemplateMaxPath>
		<ProjectTemplatesLayoutPath>$(IntermediatePath)projecttemplates\</ProjectTemplatesLayoutPath>
		<ExtensionVsixLayoutDirectory>$(IntermediatePath)Vsix\</ExtensionVsixLayoutDirectory>

		<LayoutDependsOn>
			BuildUnifiedProduct;
			ReSignDelaySignedAssemblies;
			DeploySql;
			LayoutProjects;
		</LayoutDependsOn>

		<!-- We don't need to build the project templates, but to make sure we're not shipping junk,
		     we default to building them as a validation step. -->
		<LayoutDependsOn Condition=" '$(Validation)' == 'Full' ">
			Validate;
			$(LayoutDependsOn);
		</LayoutDependsOn>
	</PropertyGroup>
	
	<ItemGroup>
		<ProjectTemplates Include="**\*.*proj" Exclude="$(MSBuildThisFile)" />
	</ItemGroup>

	<Target Name="Validate">
		<MSBuild Projects="@(ProjectTemplates)" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="DeploySql">
		<!-- This causes the SQL script that generates the database to be deployed to the RelyingPartyLogic class library. -->
		<MSBuild Projects="RelyingPartyDatabase\RelyingPartyDatabase.dbproj" Targets="Build;Deploy" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="LayoutProjects">
		<ItemGroup>
			<TemplateProjects Include="**\*.csproj" Exclude="$(MSBuildThisFile)">
				<AfterTokens>$safeprojectname$</AfterTokens>
				<!-- Projects can get changed after the transform+copy operation, so don't skip copying them. -->
				<SkipUnchangedFiles>false</SkipUnchangedFiles>
			</TemplateProjects>
			<TemplateProjects>
				<BeforeTokens>%(RecursiveDir)</BeforeTokens>
			</TemplateProjects>
			<TemplateProjectsLayout Include="@(TemplateProjects->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')"/>

			<!-- Add external libraries -->
			<!-- Include the unified, signed version of the library -->
			<ProjectTemplateLibraries Include="$(ILMergeOutputAssembly)" />
			<ProjectTemplateLibraries Include="$(ILMergeOutputAssemblyDirectory)$(ProductName).pdb" />
			<ProjectTemplateLibraries Include="$(OutputPath)$(ProductName).xml" />
			<ProjectTemplateLibraries Include="$(OutputPath)$(ProductName).Contracts.dll" />
			<!-- ... and log4net -->
			<ProjectTemplateLibraries Include="$(ProjectRoot)lib\log4net.dll" />
			<ProjectTemplateLibraries Include="$(ProjectRoot)lib\log4net.xml" />
			<ProjectTemplateLibrariesTargets Include="@(ProjectTemplateLibraries->'$(ProjectTemplatesLayoutPath)RelyingPartyLogic\lib\%(FileName)%(Extension)')" />

			<FixupReferenceAssemblies Include="@(ProjectTemplateLibrariesTargets)" Condition="'%(Extension)' == '.dll'" />
			<InjectedLibraryItems Include="@(ProjectTemplateLibrariesTargets->'lib\%(FileName)%(Extension)')" />

			<VSProjectTemplates Include="**\*.vstemplate" Exclude="*.vstemplate" />
			<VSProjectTemplatesLayout Include="@(VSProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')" />
		</ItemGroup>

		<Trim Inputs="@(TemplateProjects)" MetadataName="BeforeTokens" AllAfter="\">
			<Output TaskParameter="Outputs" ItemName="TemplateProjectsTransformSource" />
		</Trim>
		<CopyWithTokenSubstitution SourceFiles="@(TemplateProjectsTransformSource)" DestinationFiles="@(TemplateProjectsLayout)">
			<Output TaskParameter="CopiedFiles" ItemName="CopiedProjectFiles" />
		</CopyWithTokenSubstitution>
		<ChangeProjectReferenceToAssemblyReference
			Projects="@(CopiedProjectFiles)"
			Condition=" '%(Extension)' == '.csproj' "
			ProjectReferences="..\..\src\$(ProductName)\$(ProductName).csproj;..\RelyingPartyDatabase\RelyingPartyDatabase.dbproj"
			References="Lib\$(ProductName).dll;REMOVE" />
		<FixupReferenceHintPaths
			Projects="@(CopiedProjectFiles)"
			References="@(FixupReferenceAssemblies)"
			/>
		<AddProjectItems
			Projects="@(CopiedProjectFiles)"
			Condition="'%(CopiedProjectFiles.FileName)%(CopiedProjectFiles.Extension)' == 'RelyingPartyLogic.csproj'"
			Items="@(InjectedLibraryItems)"
			/>
		<MergeProjectWithVSTemplate
			ProjectItemTypes="@(VsTemplateProjectItemTypes)"
			ReplaceParametersExtensions="@(VsTemplateParameterReplaceExtensions)"
			SourceTemplates="@(VSProjectTemplates)"
			SourceProjects="@(TemplateProjectsLayout)"
			DestinationTemplates="@(VSProjectTemplatesLayout)"
			MaximumRelativePathLength="$(ProjectTemplateMaxPath)"
			>
			<Output TaskParameter="ProjectItems" ItemName="TemplateProjectItems"/>
		</MergeProjectWithVSTemplate>
	</Target>

	<Target Name="Layout" DependsOnTargets="$(LayoutDependsOn)">
		<ItemGroup>
			<TemplateProjectItems Condition="
					 '%(Extension)' == '.cs'
					 or '%(Extension)' == '.csproj'
					 or '%(Extension)' == '.sql'
					 or '%(Extension)' == '.config'
					 or '%(Extension)' == '.Master'
					 or '%(Extension)' == '.aspx'
					 or '%(Extension)' == '.ascx'
					 or '%(Extension)' == '.asax'
					 or '%(Extension)' == '.ashx'
					 ">
				<BeforeTokens>%(RecursiveDir)</BeforeTokens>
				<AfterTokens>$safeprojectname$</AfterTokens>
			</TemplateProjectItems>
			<TemplateProjectItems>
				<SkipUnchangedFiles>true</SkipUnchangedFiles>
			</TemplateProjectItems>
			<TemplateProjectItemsForTransformSource Include="@(TemplateProjectItems->'%(SourceFullPath)')" />
			<TemplateProjectItemsForTransformLayout Include="@(TemplateProjectItems->'%(DestinationFullPath)')" />

			<RootVsTemplateSource Include="*.vstemplate" />
			<ProjectTemplatesSource Include="@(RootVsTemplateSource)" />
			<ProjectTemplatesLayout Include="@(RootVsTemplateSource->'$(ProjectTemplatesLayoutPath)%(FileName)%(Extension)')" />
			
			<!-- Include the template icon -->
			<ProjectTemplatesSource Include="$(ProjectRoot)doc\logo\favicon.ico" />
			<ProjectTemplatesLayout Include="$(ProjectTemplatesLayoutPath)__TemplateIcon.ico" />
		</ItemGroup>

		<Copy 
			SourceFiles="@(ProjectTemplatesSource)" 
			DestinationFiles="@(ProjectTemplatesLayout)" 
			SkipUnchangedFiles="true" />
		<CopyWithTokenSubstitution 
			SourceFiles="@(TemplateProjectItemsForTransformSource)" 
			DestinationFiles="@(TemplateProjectItemsForTransformLayout)" />

		<ItemGroup>
			<ProjectTemplateIntendedFiles Include="
																		@(ProjectTemplatesLayout);
																		@(TemplateProjectItemsForTransformLayout);
																		@(VSProjectTemplatesLayout);
																		@(TemplateProjectsLayout);
																		" />
			<ProjectTemplateIntendedFiles Remove="@(ProjectItemShortPathAdjustments)" />
		</ItemGroup>
		<Purge Directories="$(ProjectTemplatesLayoutPath)"
					 IntendedFiles="@(ProjectTemplateIntendedFiles)" />
	</Target>

	<Import Project="$(ProjectRoot)tools\DotNetOpenAuth.automated.targets"/>
</Project>